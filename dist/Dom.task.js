(self.webpackChunktaskmanagementsystem=self.webpackChunktaskmanagementsystem||[]).push([[92],{426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>A});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),l=t(667),s=t.n(l),c=new URL(t(250),t.b),d=i()(r());d.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap);"]);var u=s()(c);d.push([n.id,`\n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(${u});\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 159px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#3754DB;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\n\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:first-child:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    display: flex;\n    flex-direction: column;\n    overflow: auto;\n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n#TaskBox{\n  margin-top:12px;\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(3,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\n  flex-grow: 1;\n  padding: 0px 37px;\n  gap: 12px;\n  overflow: auto;\n}\n#TaskDiv{\n\n  background-color:#161a23 ;\n padding: 12px;\n display: flex;\n flex-direction: column;\n gap: 4px;\n border-radius: 12px;\n\n}\n\n#daysRemaining{\n\n  font-size: 12px;\n  color: #666666;\n  letter-spacing: 1px;\n  width: 73px;\n\n\n}\n\n#TaskTitle{\n\nfont-weight: bold;\n\n\n}\n\n#explainationTask{\n\nfont-style: italic;\nfont-size: 14px;\nfont-weight: 100;\ncolor: #666666;\n\n\n}\n\n#buttonsManipulationDiv{\n\ndisplay: flex;\ngap:6px;\njustify-content: flex-end;\n\n}\n#buttonsManipulationDiv button{\n\n  width: 71px;\n  height: 27px;\n  text-decoration: none;\n\n}\n\n#buttonsManipulationDiv button:first-child{\n\n  background-color: transparent;\n  color: #F39C12;\n  border: solid 2px #F39C12;\n  border-radius: 34px;\n  text-decoration: none;\n\n\n}\n#buttonsManipulationDiv button:nth-child(2){\n\n  background-color:#3754DB;\n  color: white;\n  border: none;\n  outline: none;\n  text-decoration: none;\n\n\n\n}\n#buttonsManipulationDiv button:nth-child(3){\nbackground-color: rgb(102, 33, 33);\ncolor: white;\nborder: none;\noutline: none;\n\n}\n\ninput[type="checkbox"]{\n\n  width: 28px;\n  height: 28px;\n\n  /* background:  */\n  appearance: none;\n  background-color: none;\n  border: 2px #ced4da solid;\n  border-radius: 8px;\n \n}\ninput[type="checkbox"]:checked{\n\n  background-color: #27AE60;\n  border: none;\n  \n\n\n}\n#dateDiv{\n\n  display: flex;\n  gap: 387px;\n  font-weight: bold;\n\n}\n\n#dateDiv button{\n\n  background-color: transparent;\n  \n  border: none;\n\n}\n#holderforDates{\n\n  \n  flex-grow: 1;\n  /* border: 2px solid red; */\n  display: flex;\n  flex-direction: column;\n\n\n}\n\n#holderforDates>div{\n\n  flex-grow: 1;\n\n  /* border: solid blue 2px; */\n  overflow: auto;\n\n\n}\n#TodayBox,#tomorrowBox{\n\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n\n\n}\n#TodayBox>div,#tomorrowBox>div{\n\n  /* border: 2px solid yellow; */\nflex-grow: 1;\n\n}\n\n#TodayBox>p,#tomorrowBox>p{\nfont-weight: bold;\n  \n}\n#taskBoxToday,#taskBoxtomorrow{\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(2,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\npadding: 13px;\ngap: 12px;\npadding: 0px 37px;\nmargin-top: 16px;\n\n\n}\n\n#HoldProject{\n\n  display: flex;\n  gap:14px;\n\n\n}\n\n#HoldProject button:last-child:hover{\n\ncolor: red;\n\n}\n\n#notTasksdiv{\n\n  border: solid red 3px;\ngrid-row: 1/-1;\ngrid-column: 1/-1;\nfont-size: 72px;\n\n}\n#Hey{\n\n  grid-column-start: 1;\n  grid-column-end: -2;\n  grid-row-start: 1;\n  grid-row-end: -1;\n\n\n}`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["\n  @import url('https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap');\n \n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(./icons/linuxHead.png);\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 159px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#3754DB;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\n\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:first-child:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    display: flex;\n    flex-direction: column;\n    overflow: auto;\n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n#TaskBox{\n  margin-top:12px;\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(3,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\n  flex-grow: 1;\n  padding: 0px 37px;\n  gap: 12px;\n  overflow: auto;\n}\n#TaskDiv{\n\n  background-color:#161a23 ;\n padding: 12px;\n display: flex;\n flex-direction: column;\n gap: 4px;\n border-radius: 12px;\n\n}\n\n#daysRemaining{\n\n  font-size: 12px;\n  color: #666666;\n  letter-spacing: 1px;\n  width: 73px;\n\n\n}\n\n#TaskTitle{\n\nfont-weight: bold;\n\n\n}\n\n#explainationTask{\n\nfont-style: italic;\nfont-size: 14px;\nfont-weight: 100;\ncolor: #666666;\n\n\n}\n\n#buttonsManipulationDiv{\n\ndisplay: flex;\ngap:6px;\njustify-content: flex-end;\n\n}\n#buttonsManipulationDiv button{\n\n  width: 71px;\n  height: 27px;\n  text-decoration: none;\n\n}\n\n#buttonsManipulationDiv button:first-child{\n\n  background-color: transparent;\n  color: #F39C12;\n  border: solid 2px #F39C12;\n  border-radius: 34px;\n  text-decoration: none;\n\n\n}\n#buttonsManipulationDiv button:nth-child(2){\n\n  background-color:#3754DB;\n  color: white;\n  border: none;\n  outline: none;\n  text-decoration: none;\n\n\n\n}\n#buttonsManipulationDiv button:nth-child(3){\nbackground-color: rgb(102, 33, 33);\ncolor: white;\nborder: none;\noutline: none;\n\n}\n\ninput[type=\"checkbox\"]{\n\n  width: 28px;\n  height: 28px;\n\n  /* background:  */\n  appearance: none;\n  background-color: none;\n  border: 2px #ced4da solid;\n  border-radius: 8px;\n \n}\ninput[type=\"checkbox\"]:checked{\n\n  background-color: #27AE60;\n  border: none;\n  \n\n\n}\n#dateDiv{\n\n  display: flex;\n  gap: 387px;\n  font-weight: bold;\n\n}\n\n#dateDiv button{\n\n  background-color: transparent;\n  \n  border: none;\n\n}\n#holderforDates{\n\n  \n  flex-grow: 1;\n  /* border: 2px solid red; */\n  display: flex;\n  flex-direction: column;\n\n\n}\n\n#holderforDates>div{\n\n  flex-grow: 1;\n\n  /* border: solid blue 2px; */\n  overflow: auto;\n\n\n}\n#TodayBox,#tomorrowBox{\n\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n\n\n}\n#TodayBox>div,#tomorrowBox>div{\n\n  /* border: 2px solid yellow; */\nflex-grow: 1;\n\n}\n\n#TodayBox>p,#tomorrowBox>p{\nfont-weight: bold;\n  \n}\n#taskBoxToday,#taskBoxtomorrow{\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(2,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\npadding: 13px;\ngap: 12px;\npadding: 0px 37px;\nmargin-top: 16px;\n\n\n}\n\n#HoldProject{\n\n  display: flex;\n  gap:14px;\n\n\n}\n\n#HoldProject button:last-child:hover{\n\ncolor: red;\n\n}\n\n#notTasksdiv{\n\n  border: solid red 3px;\ngrid-row: 1/-1;\ngrid-column: 1/-1;\nfont-size: 72px;\n\n}\n#Hey{\n\n  grid-column-start: 1;\n  grid-column-end: -2;\n  grid-row-start: 1;\n  grid-row-end: -1;\n\n\n}"],sourceRoot:""}]);const A=d},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},667:n=>{"use strict";n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},729:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getDefaultOptions=function(){return t},e.setDefaultOptions=function(n){t=n};var t={}},734:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")},n.exports=e.default},84:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)},n.exports=e.default},276:(n,e,t)=>{"use strict";var o=t(836).default;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n,e,t){(0,a.default)(2,arguments);var o=(0,r.default)(n,t),i=(0,r.default)(e,t);return o.getTime()===i.getTime()};var r=o(t(466)),a=o(t(734));n.exports=e.default},609:(n,e,t)=>{"use strict";var o=t(836).default;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n,e){return(0,a.default)(1,arguments),(0,r.default)(n,Date.now(),e)};var r=o(t(276)),a=o(t(734));n.exports=e.default},466:(n,e,t)=>{"use strict";var o=t(836).default;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n,e){var t,o,s,c,d,u,A,p;(0,i.default)(1,arguments);var f=(0,l.getDefaultOptions)(),g=(0,a.default)(null!==(t=null!==(o=null!==(s=null!==(c=null==e?void 0:e.weekStartsOn)&&void 0!==c?c:null==e||null===(d=e.locale)||void 0===d||null===(u=d.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:f.weekStartsOn)&&void 0!==o?o:null===(A=f.locale)||void 0===A||null===(p=A.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==t?t:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=(0,r.default)(n),h=m.getDay(),b=(h<g?7:0)+h-g;return m.setDate(m.getDate()-b),m.setHours(0,0,0,0),m};var r=o(t(171)),a=o(t(84)),i=o(t(734)),l=t(729);n.exports=e.default},171:(n,e,t)=>{"use strict";var o=t(836).default;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){(0,a.default)(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===(0,r.default)(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))};var r=o(t(698)),a=o(t(734));n.exports=e.default},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],l=0;l<n.length;l++){var s=n[l],c=o.base?s[0]+o.base:s[0],d=a[c]||0,u="".concat(c," ").concat(d);a[c]=d+1;var A=t(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var f=r(p,o);o.byIndex=l,e.splice(l,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var l=t(a[i]);e[l].references--}for(var s=o(n,r),c=0;c<a.length;c++){var d=t(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=s}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},977:(n,e,t)=>{"use strict";t.d(e,{Wl:()=>fe,AZ:()=>te,rN:()=>_n,PC:()=>ee,Ib:()=>xe,fm:()=>Ce,em:()=>de,u:()=>Qn,FY:()=>le,nr:()=>ce,R2:()=>$n,$C:()=>be,s$:()=>ue,HU:()=>se,$t:()=>ge,kQ:()=>Jn,mB:()=>he,p2:()=>me});var o=t(379),r=t.n(o),a=t(795),i=t.n(a),l=t(569),s=t.n(l),c=t(565),d=t.n(c),u=t(216),A=t.n(u),p=t(589),f=t.n(p),g=t(426),m={};m.styleTagTransform=f(),m.setAttributes=d(),m.insert=s().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=A(),r()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals;var h=t(609),b=t.n(h);function x(n){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},x(n)}function v(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function C(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function B(n){C(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===x(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(n,e){if(C(2,arguments),!e||"object"!==x(e))return new Date(NaN);var t=e.years?v(e.years):0,o=e.months?v(e.months):0,r=e.weeks?v(e.weeks):0,a=e.days?v(e.days):0,i=e.hours?v(e.hours):0,l=e.minutes?v(e.minutes):0,s=e.seconds?v(e.seconds):0,c=B(n),d=o||t?function(n,e){C(2,arguments);var t=B(n),o=v(e);if(isNaN(o))return new Date(NaN);if(!o)return t;var r=t.getDate(),a=new Date(t.getTime());return a.setMonth(t.getMonth()+o+1,0),r>=a.getDate()?a:(t.setFullYear(a.getFullYear(),a.getMonth(),r),t)}(c,o+12*t):c,u=a||r?function(n,e){C(2,arguments);var t=B(n),o=v(e);return isNaN(o)?new Date(NaN):o?(t.setDate(t.getDate()+o),t):t}(d,a+7*r):d,A=1e3*(s+60*(l+60*i));return new Date(u.getTime()+A)}let k={allProjects:[],allTasks:[],thisWeek:[],today:[]},w={FindProject:function(n){for(let e=0;e<k.allProjects.length;e++)if(n===k.allProjects[e].projectTitle)return e},createProject:class{constructor(n){this.projectTitle=n,this.projectList=[]}},addToAllProjects:function(n){k.allProjects[k.allProjects.length]=n}},E=(()=>{let n={position:0};function e(){k.allTasks.splice(0,k.allTasks.length);for(let n=0;n<k.allProjects.length;n++)for(let e=0;e<k.allProjects[n].projectList.length;e++)k.allTasks[k.allTasks.length]=k.allProjects[n].projectList[e]}return{createTask:class{constructor(n,e="No description",t,o,r="undone",a=""){this.title=n,this.description=e,this.date=t,this.priority=o,this.status=r,this.Project=a}},findingTask:function({title:n,description:e}){for(let t=0;t<k.allProjects.length;t++)for(let o=0;o<k.allProjects[t].projectList.length;o++)if(n===k.allProjects[t].projectList[o].title&&e===k.allProjects[t].projectList[o].description)return console.log("found",o,t,k.allProjects[t].projectList[o].title),{i:t,x:o}},addTasktoProject:function(e,t=k.allProjects[n.position].projectList){t[t.length]=e},projectPos:n,addingToallTasks:e,HuntingForTasktodelete:function(n,e){for(let t=0;t<k.allProjects[n].projectList.length;t++)if(e===k.allProjects[n].projectList[t].title)return t},replaceTask:function(n,t){console.log(n.Project),k.allProjects[w.FindProject(n.Project)].projectList[t]=n,e()}}})(),T={countCompletedTasks:function(){let n=0;return k.allTasks.forEach((e=>{"done"==e.status&&n++})),console.log("here",k.allTasks),n}},j=function(){for(let n=0;n<k.allTasks.length;n++)new Date(k.allTasks[n].date).toISOString().slice(0,10)===(new Date).toISOString().slice(0,10)&&(le.taskcards(k.allTasks[n]),k.today[k.today.length]=k.allTasks[n]);return k.today},P=function(){for(let n=0;n<k.allTasks.length;n++){let e=new Date(k.allTasks[n].date);y(new Date,{days:1}).toISOString().slice(0,10),b()(e)&&le.taskcards(k.allTasks[n])}},D=new w.createProject("Default Project");w.addToAllProjects(D);class I{constructor(n,e){this.projectButton=n.addEventListener("click",(function(t){var o;$n(),o=e,E.projectPos.position=o,Jn.returnAllbuttonstlyesTodefault(),Jn.makingTheButtonGlow(n),ce.refreshTaskBox(),ue.createTaskBoxforProject(),ue.navigatingTheProjectAndGivingTasks(e),fe.manageCheckbox(),xe.buttonManager()}))}}var S=t(250);const Y=t.p+"c8fd1bb6b4dfd455da79.svg",M=t.p+"04e1a7df197a2de1e626.svg",N=t.p+"79e6b39a5dedd0689ad7.svg",O=t.p+"03b02e98500c669ef571.svg",L=t.p+"819817edadaa5c76bccf.svg",H=t.p+"1213764b91350a02bb2c.svg",W=t.p+"2ac2511792bf6add08e5.svg",q=t.p+"0794abbf4bbe4158f856.svg",U=t.p+"cbf897ee25afe1cbd2d5.svg";function F(n){C(1,arguments);var e=B(n),t=e.getUTCDay(),o=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function G(n){C(1,arguments);var e=B(n),t=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(t+1,0,4),o.setUTCHours(0,0,0,0);var r=F(o),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=F(a);return e.getTime()>=r.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}var z={};function Z(){return z}function R(n,e){var t,o,r,a,i,l,s,c;C(1,arguments);var d=Z(),u=v(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:d.weekStartsOn)&&void 0!==o?o:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=B(n),p=A.getUTCDay(),f=(p<u?7:0)+p-u;return A.setUTCDate(A.getUTCDate()-f),A.setUTCHours(0,0,0,0),A}function Q(n,e){var t,o,r,a,i,l,s,c;C(1,arguments);var d=B(n),u=d.getUTCFullYear(),A=Z(),p=v(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:A.firstWeekContainsDate)&&void 0!==o?o:null===(s=A.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(u+1,0,p),f.setUTCHours(0,0,0,0);var g=R(f,e),m=new Date(0);m.setUTCFullYear(u,0,p),m.setUTCHours(0,0,0,0);var h=R(m,e);return d.getTime()>=g.getTime()?u+1:d.getTime()>=h.getTime()?u:u-1}function X(n,e){for(var t=n<0?"-":"",o=Math.abs(n).toString();o.length<e;)o="0"+o;return t+o}const _=function(n,e){var t=n.getUTCFullYear(),o=t>0?t:1-t;return X("yy"===e?o%100:o,e.length)},J=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):X(t+1,2)},V=function(n,e){return X(n.getUTCDate(),e.length)},$=function(n,e){return X(n.getUTCHours()%12||12,e.length)},K=function(n,e){return X(n.getUTCHours(),e.length)},nn=function(n,e){return X(n.getUTCMinutes(),e.length)},en=function(n,e){return X(n.getUTCSeconds(),e.length)},tn=function(n,e){var t=e.length,o=n.getUTCMilliseconds();return X(Math.floor(o*Math.pow(10,t-3)),e.length)};var on={G:function(n,e,t){var o=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var o=n.getUTCFullYear(),r=o>0?o:1-o;return t.ordinalNumber(r,{unit:"year"})}return _(n,e)},Y:function(n,e,t,o){var r=Q(n,o),a=r>0?r:1-r;return"YY"===e?X(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):X(a,e.length)},R:function(n,e){return X(G(n),e.length)},u:function(n,e){return X(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return X(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return X(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,e,t){var o=n.getUTCMonth();switch(e){case"M":case"MM":return J(n,e);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(n,e,t){var o=n.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return X(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(n,e,t,o){var r=function(n,e){C(1,arguments);var t=B(n),o=R(t,e).getTime()-function(n,e){var t,o,r,a,i,l,s,c;C(1,arguments);var d=Z(),u=v(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:d.firstWeekContainsDate)&&void 0!==o?o:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),A=Q(n,e),p=new Date(0);return p.setUTCFullYear(A,0,u),p.setUTCHours(0,0,0,0),R(p,e)}(t,e).getTime();return Math.round(o/6048e5)+1}(n,o);return"wo"===e?t.ordinalNumber(r,{unit:"week"}):X(r,e.length)},I:function(n,e,t){var o=function(n){C(1,arguments);var e=B(n),t=F(e).getTime()-function(n){C(1,arguments);var e=G(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),F(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(o,{unit:"week"}):X(o,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):V(n,e)},D:function(n,e,t){var o=function(n){C(1,arguments);var e=B(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=t-e.getTime();return Math.floor(o/864e5)+1}(n);return"Do"===e?t.ordinalNumber(o,{unit:"dayOfYear"}):X(o,e.length)},E:function(n,e,t){var o=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return X(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return X(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var o=n.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return X(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(n,e,t){var o=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,e,t){var o,r=n.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,e,t){var o,r=n.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var o=n.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return $(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):K(n,e)},K:function(n,e,t){var o=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(o,{unit:"hour"}):X(o,e.length)},k:function(n,e,t){var o=n.getUTCHours();return 0===o&&(o=24),"ko"===e?t.ordinalNumber(o,{unit:"hour"}):X(o,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):nn(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):en(n,e)},S:function(n,e){return tn(n,e)},X:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return an(r);case"XXXX":case"XX":return ln(r);default:return ln(r,":")}},x:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"x":return an(r);case"xxxx":case"xx":return ln(r);default:return ln(r,":")}},O:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+rn(r,":");default:return"GMT"+ln(r,":")}},z:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+rn(r,":");default:return"GMT"+ln(r,":")}},t:function(n,e,t,o){var r=o._originalDate||n;return X(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,o){return X((o._originalDate||n).getTime(),e.length)}};function rn(n,e){var t=n>0?"-":"+",o=Math.abs(n),r=Math.floor(o/60),a=o%60;if(0===a)return t+String(r);var i=e||"";return t+String(r)+i+X(a,2)}function an(n,e){return n%60==0?(n>0?"-":"+")+X(Math.abs(n)/60,2):ln(n,e)}function ln(n,e){var t=e||"",o=n>0?"-":"+",r=Math.abs(n);return o+X(Math.floor(r/60),2)+t+X(r%60,2)}const sn=on;var cn=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},dn=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const un={p:dn,P:function(n,e){var t,o=n.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return cn(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",cn(r,e)).replace("{{time}}",dn(a,e))}};var An=["D","DD"],pn=["YY","YYYY"];function fn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var gn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function mn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const hn={date:mn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:mn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:mn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var bn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function xn(n){return function(e,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var i=n.defaultWidth,l=null!=t&&t.width?String(t.width):n.defaultWidth;o=n.values[l]||n.values[i]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const vn={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:xn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:xn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:xn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:xn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:xn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Cn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,l=a[0],s=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(l))return t}(s):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(l))return t}(s);return i=n.valueCallback?n.valueCallback(c):c,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(l.length)}}}var Bn,yn={ordinalNumber:(Bn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(Bn.matchPattern);if(!t)return null;var o=t[0],r=n.match(Bn.parsePattern);if(!r)return null;var a=Bn.valueCallback?Bn.valueCallback(r[0]):r[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(o.length)}}),era:Cn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Cn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Cn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Cn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Cn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const kn={code:"en-US",formatDistance:function(n,e,t){var o,r=gn[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:hn,formatRelative:function(n,e,t,o){return bn[n]},localize:vn,match:yn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var wn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,En=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Tn=/^'([^]*?)'?$/,jn=/''/g,Pn=/[a-zA-Z]/;function Dn(n,e,t){var o,r,a,i,l,s,c,d,u,A,p,f,g,m,h,b,y,k;C(2,arguments);var w=String(e),E=Z(),T=null!==(o=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:E.locale)&&void 0!==o?o:kn,j=v(null!==(a=null!==(i=null!==(l=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==l?l:E.firstWeekContainsDate)&&void 0!==i?i:null===(u=E.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(j>=1&&j<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var P=v(null!==(p=null!==(f=null!==(g=null!==(m=null==t?void 0:t.weekStartsOn)&&void 0!==m?m:null==t||null===(h=t.locale)||void 0===h||null===(b=h.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==g?g:E.weekStartsOn)&&void 0!==f?f:null===(y=E.locale)||void 0===y||null===(k=y.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==p?p:0);if(!(P>=0&&P<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var D=B(n);if(!function(n){if(C(1,arguments),!function(n){return C(1,arguments),n instanceof Date||"object"===x(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=B(n);return!isNaN(Number(e))}(D))throw new RangeError("Invalid time value");var I=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(D),S=function(n,e){return C(2,arguments),function(n,e){C(2,arguments);var t=B(n).getTime(),o=v(e);return new Date(t+o)}(n,-v(e))}(D,I),Y={firstWeekContainsDate:j,weekStartsOn:P,locale:T,_originalDate:D};return w.match(En).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,un[e])(n,T.formatLong):n})).join("").match(wn).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(Tn))?a[1].replace(jn,"'"):r;var l,s=sn[i];if(s)return null!=t&&t.useAdditionalWeekYearTokens||(l=o,-1===pn.indexOf(l))||fn(o,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==An.indexOf(n)}(o)||fn(o,e,String(n)),s(S,o,T.localize,Y);if(i.match(Pn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}const In=t.p+"819e1e40c3fcf14e1116.svg",Sn=t.p+"eabb3514fa0376368ae9.svg";let Yn=function(){let n=0;for(;null!==localStorage.getItem("project"+n);)k.allProjects[n]=JSON.parse(localStorage.getItem("project"+n)),n++},Mn=function(){localStorage.clear();for(let n=0;n<k.allProjects.length;n++)localStorage.setItem("project"+n,JSON.stringify(k.allProjects[n]))},Nn=function(){Yn(),E.addingToallTasks(),de(),te(),se(),_n()};class On{constructor(n,e){this.TaskButton=n.addEventListener("change",(function(n){this.checked?(E.projectPos.position<1?Ln.CheckingInHome(e):E.projectPos.position,Ln.checkingInprojects(e)):Ln.uncheckinginhome(e),Mn()}))}}let Ln={CheckingInHome:function(n){let e=w.FindProject(k.allTasks[n].Project);console.log(e);let t=E.HuntingForTasktodelete(e,k.allTasks[n].title);k.allProjects[e].projectList[t].status="done",ge.strikeoutWords(n),me()},uncheckinginhome:function(n){let e=w.FindProject(k.allTasks[n].Project),t=E.HuntingForTasktodelete(e,k.allTasks[n].title);k.allProjects[e].projectList[t].status="undone",ge.strikeoutWords(n,"none"),me(),console.log("frogEyas")},checkingToday:function(n){let e=j(),t=w.FindProject(e[n].Project),o=E.HuntingForTasktodelete(t,k.today[n].title);k.allProjects[t].projectList[o].status="undone",ge.strikeoutWords(n)},checkingInprojects:function(n){k.allProjects[E.projectPos.position].projectList[n].status="done",ge.strikeoutWords(n)}};const Hn=t.p+"5add4d4dee2471347aed.svg",Wn=t.p+"706624a5af14d5157aa8.svg";let qn=(()=>{function n(n){E.projectPos.position>0?function(n){k.allProjects[E.projectPos.position].projectList.splice(n,1),E.addingToallTasks(),le.placingTasks()}(n):function(n){let e=w.FindProject(k.allTasks[n].Project),t=E.HuntingForTasktodelete(e,k.allTasks[n].title);k.allProjects[e].projectList.splice(t,1),function(){k.allTasks.splice(0,k.allTasks.length);let n=0;for(let e=0;e<k.allProjects.length;e++)for(let t=0;t<k.allProjects[e].projectList.length;t++)k.allTasks[n]=k.allProjects[e].projectList[t],n++}(),console.log(k.allProjects),console.log(k.allTasks),le.resettingTaskboxAfterdeleteHome(),le.updateAlltasks(),"Home"===Qn.section&&me()}(n)}return{clearOverdue:function(){for(let n=0;n<k.allProjects.length;n++)for(let e=0;e<k.allProjects[n].projectList.length;e++)(new Date).setHours(0,0,0,0)>new Date(k.allProjects[n].projectList[e].date).setHours(0,0,0,0)&&(k.allProjects[n].projectList.splice(e,1),console.log("You can't create a date in the past"),console.log(new Date,new Date))},deletingSpecificTask:n,deleteTask:class{constructor(e,t){this.button=e.addEventListener("click",(function(e){n(t),xe.buttonManager(),Mn()}))}}}})(),Un=class{constructor(n,e){this.ProjectButton=n.addEventListener("click",(function(n){!function(n){k.allProjects.splice(n,1),E.addingToallTasks()}(e),te(),ee.eraseProject(),"Home"===Qn.section?de():"Today"===Qn.section?he.todayRefresh():"calender"===Qn.section?be.CalenderRefresh():E.projectPos.position,de(),Mn()}))}};class Fn{constructor(n,e){this.button=n.addEventListener("click",(function(n){Gn.showTask(Gn.taskToedit(e)),Ce.createTask(e)}))}}let Gn={showTask:function(n){Ce.createDialogBox(n)},taskToedit:function(n){if(E.projectPos.position<1){let e=w.FindProject(k.allTasks[n].Project),t=E.HuntingForTasktodelete(e,k.allTasks[n].title);return k.allProjects[e].projectList[t]}if(E.projectPos.position>0)return k.allProjects[E.projectPos.position].projectList[n]}},zn=new class{domElementCreator(n,e,t,o="",r=""){let a=document.createElement(n);return a.id=e,a.textContent=o,a.placeholder=r,t.appendChild(a),a}ImageLoadtoDOm(n,e,t){let o=new Image;return o.src=n,o.id=t,e.appendChild(o),o}},Zn=(()=>{let n=zn.domElementCreator("div","sidebox",document.body),e=zn.domElementCreator("div","appTitleHolder",n),t=(zn.ImageLoadtoDOm(S,e,"appLogo"),zn.domElementCreator("p","appTitle",e,"Ubuntu Tasks"),zn.domElementCreator("div","section",n)),o=zn.domElementCreator("button","homeDiv",t),r=(zn.ImageLoadtoDOm(Y,o,"homeicon"),zn.domElementCreator("p","hometext",o,"Home"),zn.domElementCreator("button","todayButton",t)),a=(zn.ImageLoadtoDOm(Wn,r,"todayIcon"),zn.domElementCreator("p","TodayText",r,"Today"),zn.domElementCreator("button","calender",t)),i=(zn.ImageLoadtoDOm(N,a,"Datesicon"),zn.domElementCreator("p","hometext",a,"This Week"),zn.domElementCreator("button","Projects",t)),l=(zn.ImageLoadtoDOm(L,i,"projectIcon"),zn.domElementCreator("p","ProjectText",i,"Projects"),zn.domElementCreator("div","projectsSection",t)),s=zn.domElementCreator("button","createprojects",t);return zn.ImageLoadtoDOm(O,s,"createprojectsicon"),zn.domElementCreator("p","projectText",s,"Create Projects"),s.title="Create Project",{createprojectsButton:s,siderbox:n,divProjectsSection:l,Today:r}})(),Rn=((()=>{let n=zn.domElementCreator("div","topBox",document.body);zn.domElementCreator("p","topText",n,`Enjoy your ${Dn(new Date,"EEEE")}`),zn.ImageLoadtoDOm(H,n,"topBoximagegirl"),zn.ImageLoadtoDOm(W,n,"musicboy"),zn.ImageLoadtoDOm(U,n,"boyWithpapers")})(),(()=>{let n=zn.domElementCreator("button","addTask",document.body);return n.title="Create new task",zn.ImageLoadtoDOm(q,n,"addtaskicon"),{addTask:n}})()),Qn={section:"Home"},Xn=(()=>{let n=zn.domElementCreator("dialog","dialogCreateProject",Zn.siderbox),e=zn.domElementCreator("form","messageBoxdiv",n);e.setAttribute("method","dialog"),zn.domElementCreator("label","projectName",e).setAttribute("for","projectNameinput");let t=zn.domElementCreator("input","projectNameinput",e);t.placeholder="Go to the Moon";let o=zn.domElementCreator("div","buttondiv",e);return{dialogBox:n,cancelButton:zn.domElementCreator("button","cancelButton",o,"Cancel"),doneButton:zn.domElementCreator("button","doneButton",o,"Create"),projectNameinput:t}})();function _n(){!function(){if(""===Xn.projectNameinput.value)return;let n=new w.createProject(Xn.projectNameinput.value);w.addToAllProjects(n)}(),te(),ie(),se(),ee.eraseProject()}Zn.createprojectsButton.addEventListener("click",(function(n){Xn.dialogBox.showModal()})),Xn.doneButton.addEventListener("click",(function(n){_n(),n.preventDefault(),Xn.dialogBox.close(),Mn()}));let Jn={returnAllbuttonstlyesTodefault:function(){document.querySelectorAll("#project").forEach((n=>{n.style.setProperty("background-color","transparent"),n.style.setProperty("color","#828489"),n.style.setProperty("text-align","left")}))},makingTheButtonGlow:function(n){n.style.setProperty("color","white"),n.style.setProperty("background-color","#F39C12"),n.style.setProperty("text-align","center")}},Vn=(()=>{let n=zn.domElementCreator("dialog","dialogTask",document.body),e=zn.domElementCreator("form","messageBoxdiv",n);zn.domElementCreator("label","DateLabel",e,"Task Name").setAttribute("for","TaskName");let t=zn.domElementCreator("input","TaskName",e,null,"Venus summit");zn.domElementCreator("label","DateLabel",e,"Description").setAttribute("for","TaskDescription");let o=zn.domElementCreator("textarea","TaskDescription",e,null,"Take the mars rover at ubuntu station ");o.rows=4,o.setAttribute("maxlength",45),zn.domElementCreator("label","DateLabel",e,"Due Date").setAttribute("for","Date");let r=zn.domElementCreator("input","Date",e,"Date","Due Date");r.type="date",zn.domElementCreator("label","PriorityLabel",e,"Priority").setAttribute("for","selectDropDown");let a=zn.domElementCreator("select","selectDropDown",e),i=zn.domElementCreator("option","optionHigh",a,"High"),l=zn.domElementCreator("option","optionMedium",a,"Medium"),s=zn.domElementCreator("option","optionLow",a,"Low");i.setAttribute("value","High"),l.setAttribute("value","Medium"),s.setAttribute("value","Low"),l.selected=!0,t.required=!0,a.required=!0,r.required=!0,o.required=!0;let c=zn.domElementCreator("div","buttonHolder",n),d=zn.domElementCreator("button","cancelTask",c,"Cancel"),u=zn.domElementCreator("button","createTask",c,"Create");return u.type="Submit",{dialogTask:n,cancelTask:d,createTask:u,TaskName:t,TaskDescription:o,PriorityDropdown:a,date:r}})();function $n(){Qn.section="notHome"}function Kn(){"Home"===Qn.section?pe():"Today"===Qn.section&&he.todayTask()}function ne(){!function(){if(""===Vn.TaskName.value||void 0===Vn.date.value||void 0===Vn.date.value)return;""===Vn.TaskDescription.value?Vn.TaskDescription.value="No description":Vn.TaskDescription.value;let n=new E.createTask(Vn.TaskName.value,Vn.TaskDescription.value,Vn.date.value,Vn.PriorityDropdown.value);n.Project=k.allProjects[E.projectPos.position].projectTitle,E.addTasktoProject(n),qn.clearOverdue(),E.addingToallTasks(),Vn.dialogTask.close()}(),le.placingTasks(),le.updateAlltasks(),Kn(),fe.manageCheckbox(),xe.buttonManager(),ve.editFunctionalities(),Mn()}Rn.addTask.addEventListener("click",(function(n){var e,t;Vn.dialogTask.showModal(),t=(e=document.getElementById("createTask")).cloneNode(!0),e.parentNode.replaceChild(t,e),document.querySelector("#createTask").addEventListener("click",ne)})),Vn.cancelTask.addEventListener("click",(function(n){Vn.dialogTask.close(),n.preventDefault()})),Xn.cancelButton.addEventListener("click",(function(n){te(),ve.editFunctionalities(),le.placingTasks(),n.preventDefault(),Xn.dialogBox.close()}));let ee=(()=>{function n(){let n=document.querySelectorAll("#removeProject"),e=1;n.forEach((n=>{new Un(n,e),e++}))}return n(),{eraseProject:n}})();function te(){!function(){let n=document.querySelectorAll(".projectName"),e=document.querySelectorAll("#HoldProject");document.querySelectorAll("#removeProject").forEach((n=>{n.remove()})),e.forEach((n=>{n.remove()})),n.forEach((n=>{n.remove()}))}();let n=k.allProjects;for(let e=1;e<n.length;e++){let t=zn.domElementCreator("div","HoldProject",Zn.divProjectsSection),o=zn.domElementCreator("button","project",t,"> "+n[e].projectTitle);zn.domElementCreator("button","removeProject",t,"X"),e===E.projectPos.position&&Jn.makingTheButtonGlow(o),o.className="projectName"}}te();let oe={content:zn.domElementCreator("div","contentTobeUpdated",document.body)};function re(n,e,t,o="",r="",a="contentToRemove"){let i=zn.domElementCreator(n,e,t,o,"");return i.className=a,i}let ae=(()=>{function n(){let n=re("div","statisticsHolderbox",oe.content),e=["Current Projects","Overall Tasks","Completed Tasks"],t=["informationOfProjectsHolder","infomationOfTasksHolder","informationOfcompletedTasksHolder"],o=["projectNumber","TaskNumber","completedNumber"],r=[In,Sn,M],a=["numberOfProjectsdiv","numberOfTasksdiv","completedTasks"],i=[k.allProjects.length-1,k.allTasks.length,0],l=["projectDetails","TaskDetails","completedTask"],s=["projectsBackdrop","tasksBackdrop","completedBackdrop"];for(let c=0;c<e.length;c++){let d=re("div",a[c],n),u=re("div",t[c],d),A=(re("p",o[c],u,i[c]),re("p",l[c],u,e[c]),re("div","iconDiv",d));zn.ImageLoadtoDOm(r[c],A,"iconStatics"),zn.domElementCreator("div",s[c],A)}}return n(),{makeStatistics:n}})();function ie(){"Home"===Qn.section&&(document.querySelector("#projectNumber").textContent=k.allProjects.length-1)}let le=(()=>{let n=({title:n,description:e,date:t,priority:o,status:r},a=document.querySelector("#TaskBox"))=>{let i=re("div","TaskDiv",a),l=re("div","dateDiv",i),s=re("p","daysRemaining",l,t),c=zn.domElementCreator("button","deleteTask",l),d=(zn.ImageLoadtoDOm(Hn,c,"deleteIcon"),re("p","taskTitle",i,n)),u=re("p","explainationTask",i,e),A=re("div","buttonsManipulationDiv",i),p=re("button","Priotrity",A,o),f=re("button","editTask",A,"edit"),g=re("input","completeTask",A,r);"done"===r&&(g.checked=!0,d.style.setProperty("text-decoration","line-through"),u.style.setProperty("text-decoration","line-through")),g.type="checkbox",g.title="toogle complete",i.className="task",l.className="task",s.className="task",d.className="task",u.className="task",A.className="task",p.className="task",f.className="task",g.className="task"};function e(){document.querySelectorAll(".task").forEach((n=>{n.remove()}))}return{placingTasks:function(){if(e(),"calender"===Qn.section)for(let e=0;e<k.allProjects[E.projectPos.position].projectList.length;e++){let t=k.allProjects[E.projectPos.position].projectList[e];console.log(t.date),b()(new Date(t.date))&&n(t)}else for(let e=0;e<k.allProjects[E.projectPos.position].projectList.length;e++){let t=k.allProjects[E.projectPos.position].projectList[e];n(t)}},updateAlltasks:function(){"Home"===Qn.section&&(document.querySelector("#TaskNumber").textContent=k.allTasks.length)},makeTaskbox:function(){return re("div","TaskBox",oe.content)},taskcards:n,resettingTaskboxAfterdeleteHome:function(){e();for(let e=0;e<k.allTasks.length;e++){let t=k.allTasks[e];n(t)}}}})();function se(){let n=document.querySelectorAll("#project"),e=1;n.forEach((n=>{new I(n,e),e++}))}re("div","TaskBox",oe.content),document.querySelectorAll("#project")[0],se();let ce={refreshTaskBox:function(){document.querySelectorAll(".contentToRemove").forEach((n=>{n.remove()})),document.querySelectorAll(".task").forEach((n=>{n.remove()})),document.querySelectorAll("#TaskBox").forEach((n=>{n.remove()}))},TaskBoxcleanup:Ae};function de(){E.projectPos.position=0,ce.refreshTaskBox(),ae.makeStatistics(),le.makeTaskbox(),ie(),Qn.section="Home",Kn(),fe.manageCheckbox(),me(),xe.buttonManager(),ve.editFunctionalities()}document.querySelector("#homeDiv").addEventListener("click",(function(n){de()}));let ue={createTaskBoxforProject:function(){zn.domElementCreator("div","TaskBox",document.querySelector("#contentTobeUpdated")).className=".contentToRemove"},navigatingTheProjectAndGivingTasks:function(n){for(let e=0;e<k.allProjects[n].projectList.length;e++)le.taskcards(k.allProjects[n].projectList[e])}};function Ae(){document.querySelectorAll(".task").forEach((n=>{n.remove()}))}function pe(){Ae(),console.log("hello");for(let n=0;n<k.allTasks.length;n++)le.taskcards(k.allTasks[n])}pe();let fe={manageCheckbox:function(){let n=0;document.querySelectorAll("#completeTask").forEach((e=>{new On(e,n),n++}))}},ge={strikeoutWords:function(n,e="line-through"){let t=document.querySelectorAll("#taskTitle"),o=document.querySelectorAll("#explainationTask");t[n].style.setProperty("text-decoration",e),o[n].style.setProperty("text-decoration",e)}};function me(){document.querySelector("#completedNumber").textContent=T.countCompletedTasks()}me();let he=(()=>{function n(){ce.refreshTaskBox(),le.makeTaskbox(),j()}function e(){Qn.section="Today",E.projectPos.position=0,n(),fe.manageCheckbox(),xe.buttonManager(),ve.editFunctionalities()}return Zn.Today.addEventListener("click",(function(n){e()})),{todayTask:n,todayRefresh:e}})(),be=(()=>{function n(){Qn.section="calender",ce.refreshTaskBox(),le.makeTaskbox(),P(),xe.buttonManager(),ve.editFunctionalities()}return document.querySelector("#calender").addEventListener("click",(function(e){n()})),{CalenderRefresh:n}})(),xe=(()=>{function n(){let n=document.querySelectorAll("#deleteTask");for(let e=0;e<n.length;e++)new qn.deleteTask(n[e],e)}return n(),{buttonManager:n}})(),ve=(()=>{function n(){let n=document.querySelectorAll("#editTask"),e=0;n.forEach((n=>{new Fn(n,e),e++}))}return n(),{editFunctionalities:n}})(),Ce=(()=>{function n(n){let e=function(){let n=document.querySelector("#TaskName"),e=document.querySelector("#TaskDescription"),t=document.querySelector("#Date"),o=document.querySelector("#selectDropDown");return new E.createTask(n.value,e.value,t.value,o.value)}();E.projectPos.position<1?(e.Project=k.allTasks[n].Project,e.status=k.allTasks[n].status):E.projectPos.position,e.Project=k.allProjects[E.projectPos.position].projectTitle,E.replaceTask(e,n),console.log(e)}function e(){le.placingTasks(),xe.buttonManager(),fe.manageCheckbox(),ve.editFunctionalities(),Vn.dialogTask.close()}return{createDialogBox:function(n){Vn.dialogTask.showModal(),function({title:n,description:e,date:t,priority:o}){document.querySelector("#TaskName").value=n,document.querySelector("#TaskDescription").value=e,document.querySelector("#Date").value=t,document.querySelector("#selectDropDown").value=o}(n)},createTask:function(t){let o=document.querySelector("#createTask");o.removeEventListener("click",ne,!1),o.addEventListener("click",(function(o){n(t),e(),Mn()}))},managetask:n,configureEverything:e}})();Nn(),console.log(k.allProjects)},250:(n,e,t)=>{"use strict";n.exports=t.p+"0ae69d2eae7e39bfe725.png"},836:n=>{n.exports=function(n){return n&&n.__esModule?n:{default:n}},n.exports.__esModule=!0,n.exports.default=n.exports},698:n=>{function e(t){return n.exports=e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},n.exports.__esModule=!0,n.exports.default=n.exports,e(t)}n.exports=e,n.exports.__esModule=!0,n.exports.default=n.exports}},n=>{n.O(0,[712],(()=>(977,n(n.s=977)))),n.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,