"use strict";(self.webpackChunktaskmanagementsystem=self.webpackChunktaskmanagementsystem||[]).push([[92],{426:(n,e,t)=>{t.d(e,{Z:()=>A});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),l=t(667),s=t.n(l),d=new URL(t(250),t.b),c=i()(r());c.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap);"]);var u=s()(d);c.push([n.id,`\n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(${u});\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 150px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#3754DB;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\n\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    display: flex;\n    flex-direction: column;\n    overflow: auto;\n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n#TaskBox{\n  margin-top:12px;\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(3,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\n  flex-grow: 1;\n  padding: 0px 37px;\n  gap: 12px;\n  overflow: auto;\n}\n#TaskDiv{\n\n  background-color:#161a23 ;\n padding: 12px;\n display: flex;\n flex-direction: column;\n gap: 4px;\n border-radius: 12px;\n\n}\n\n#daysRemaining{\n\n  font-size: 12px;\n  color: #666666;\n  letter-spacing: 1px;\n  width: 73px;\n\n\n}\n\n#TaskTitle{\n\nfont-weight: bold;\n\n\n}\n\n#explainationTask{\n\nfont-style: italic;\nfont-size: 14px;\nfont-weight: 100;\ncolor: #666666;\n\n\n}\n\n#buttonsManipulationDiv{\n\ndisplay: flex;\ngap:6px;\njustify-content: flex-end;\n\n}\n#buttonsManipulationDiv button{\n\n  width: 71px;\n  height: 27px;\n  text-decoration: none;\n\n}\n\n#buttonsManipulationDiv button:first-child{\n\n  background-color: transparent;\n  color: #F39C12;\n  border: solid 2px #F39C12;\n  border-radius: 34px;\n  text-decoration: none;\n\n\n}\n#buttonsManipulationDiv button:nth-child(2){\n\n  background-color:#3754DB;\n  color: white;\n  border: none;\n  outline: none;\n  text-decoration: none;\n\n\n\n}\n#buttonsManipulationDiv button:nth-child(3){\nbackground-color: rgb(102, 33, 33);\ncolor: white;\nborder: none;\noutline: none;\n\n}\n\ninput[type="checkbox"]{\n\n  width: 28px;\n  height: 28px;\n\n  /* background:  */\n  appearance: none;\n  background-color: none;\n  border: 2px #ced4da solid;\n  border-radius: 8px;\n \n}\ninput[type="checkbox"]:checked{\n\n  background-color: #27AE60;\n  border: none;\n  \n\n\n}\n#dateDiv{\n\n  display: flex;\n  gap: 387px;\n  font-weight: bold;\n\n}\n\n#dateDiv button{\n\n  background-color: transparent;\n  \n  border: none;\n\n}\n#holderforDates{\n\n  \n  flex-grow: 1;\n  /* border: 2px solid red; */\n  display: flex;\n  flex-direction: column;\n\n\n}\n\n#holderforDates>div{\n\n  flex-grow: 1;\n\n  /* border: solid blue 2px; */\n  overflow: auto;\n\n\n}\n#TodayBox,#tomorrowBox{\n\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n\n\n}\n#TodayBox>div,#tomorrowBox>div{\n\n  /* border: 2px solid yellow; */\nflex-grow: 1;\n\n}\n\n#TodayBox>p,#tomorrowBox>p{\nfont-weight: bold;\n  \n}\n#taskBoxToday,#taskBoxtomorrow{\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(2,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\npadding: 13px;\ngap: 12px;\npadding: 0px 37px;\nmargin-top: 16px;\n\n\n}\n\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["\n  @import url('https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap');\n\n  \n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(./icons/linuxHead.png);\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 150px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#3754DB;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\n\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    display: flex;\n    flex-direction: column;\n    overflow: auto;\n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n#TaskBox{\n  margin-top:12px;\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(3,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\n  flex-grow: 1;\n  padding: 0px 37px;\n  gap: 12px;\n  overflow: auto;\n}\n#TaskDiv{\n\n  background-color:#161a23 ;\n padding: 12px;\n display: flex;\n flex-direction: column;\n gap: 4px;\n border-radius: 12px;\n\n}\n\n#daysRemaining{\n\n  font-size: 12px;\n  color: #666666;\n  letter-spacing: 1px;\n  width: 73px;\n\n\n}\n\n#TaskTitle{\n\nfont-weight: bold;\n\n\n}\n\n#explainationTask{\n\nfont-style: italic;\nfont-size: 14px;\nfont-weight: 100;\ncolor: #666666;\n\n\n}\n\n#buttonsManipulationDiv{\n\ndisplay: flex;\ngap:6px;\njustify-content: flex-end;\n\n}\n#buttonsManipulationDiv button{\n\n  width: 71px;\n  height: 27px;\n  text-decoration: none;\n\n}\n\n#buttonsManipulationDiv button:first-child{\n\n  background-color: transparent;\n  color: #F39C12;\n  border: solid 2px #F39C12;\n  border-radius: 34px;\n  text-decoration: none;\n\n\n}\n#buttonsManipulationDiv button:nth-child(2){\n\n  background-color:#3754DB;\n  color: white;\n  border: none;\n  outline: none;\n  text-decoration: none;\n\n\n\n}\n#buttonsManipulationDiv button:nth-child(3){\nbackground-color: rgb(102, 33, 33);\ncolor: white;\nborder: none;\noutline: none;\n\n}\n\ninput[type=\"checkbox\"]{\n\n  width: 28px;\n  height: 28px;\n\n  /* background:  */\n  appearance: none;\n  background-color: none;\n  border: 2px #ced4da solid;\n  border-radius: 8px;\n \n}\ninput[type=\"checkbox\"]:checked{\n\n  background-color: #27AE60;\n  border: none;\n  \n\n\n}\n#dateDiv{\n\n  display: flex;\n  gap: 387px;\n  font-weight: bold;\n\n}\n\n#dateDiv button{\n\n  background-color: transparent;\n  \n  border: none;\n\n}\n#holderforDates{\n\n  \n  flex-grow: 1;\n  /* border: 2px solid red; */\n  display: flex;\n  flex-direction: column;\n\n\n}\n\n#holderforDates>div{\n\n  flex-grow: 1;\n\n  /* border: solid blue 2px; */\n  overflow: auto;\n\n\n}\n#TodayBox,#tomorrowBox{\n\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n\n\n}\n#TodayBox>div,#tomorrowBox>div{\n\n  /* border: 2px solid yellow; */\nflex-grow: 1;\n\n}\n\n#TodayBox>p,#tomorrowBox>p{\nfont-weight: bold;\n  \n}\n#taskBoxToday,#taskBoxtomorrow{\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(2,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\npadding: 13px;\ngap: 12px;\npadding: 0px 37px;\nmargin-top: 16px;\n\n\n}\n\n"],sourceRoot:""}]);const A=c},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],l=0;l<n.length;l++){var s=n[l],d=o.base?s[0]+o.base:s[0],c=a[d]||0,u="".concat(d," ").concat(c);a[d]=c+1;var A=t(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var m=r(p,o);o.byIndex=l,e.splice(l,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var l=t(a[i]);e[l].references--}for(var s=o(n,r),d=0;d<a.length;d++){var c=t(a[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},95:(n,e,t)=>{t.d(e,{Wl:()=>re,Ib:()=>se,u:()=>Hn,FY:()=>Vn,nr:()=>ne,R2:()=>Zn,s$:()=>ee,$t:()=>ae,kQ:()=>zn,p2:()=>ie});var o=t(379),r=t.n(o),a=t(795),i=t.n(a),l=t(569),s=t.n(l),d=t(565),c=t.n(d),u=t(216),A=t.n(u),p=t(589),m=t.n(p),g=t(426),f={};function h(n){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},h(n)}function b(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function x(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function C(n){x(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===h(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function B(n,e){if(x(2,arguments),!e||"object"!==h(e))return new Date(NaN);var t=e.years?b(e.years):0,o=e.months?b(e.months):0,r=e.weeks?b(e.weeks):0,a=e.days?b(e.days):0,i=e.hours?b(e.hours):0,l=e.minutes?b(e.minutes):0,s=e.seconds?b(e.seconds):0,d=C(n),c=o||t?function(n,e){x(2,arguments);var t=C(n),o=b(e);if(isNaN(o))return new Date(NaN);if(!o)return t;var r=t.getDate(),a=new Date(t.getTime());return a.setMonth(t.getMonth()+o+1,0),r>=a.getDate()?a:(t.setFullYear(a.getFullYear(),a.getMonth(),r),t)}(d,o+12*t):d,u=a||r?function(n,e){x(2,arguments);var t=C(n),o=b(e);return isNaN(o)?new Date(NaN):o?(t.setDate(t.getDate()+o),t):t}(c,a+7*r):c,A=1e3*(s+60*(l+60*i));return new Date(u.getTime()+A)}f.styleTagTransform=m(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=A(),r()(g.Z,f),g.Z&&g.Z.locals&&g.Z.locals;let v={allProjects:[],allTasks:[]},y=class{constructor(n){this.projectTitle=n,this.projectList=[]}},k=function(n){v.allProjects[v.allProjects.length]=n},w=(()=>{let n={position:0};return{createTask:class{constructor(n,e,t,o,r="undone",a=""){this.title=n,this.description=e,this.date=t,this.priority=o,this.status=r,this.Project=a}},findingTask:function({title:n,description:e}){for(let t=0;t<v.allProjects.length;t++)for(let o=0;o<v.allProjects[t].projectList.length;o++)if(n===v.allProjects[t].projectList[o].title&&e===v.allProjects[t].projectList[o].description)return console.log("found",o,t,v.allProjects[t].projectList[o].title),{i:t,x:o}},addTasktoProject:function(e,t=v.allProjects[n.position].projectList){t[t.length]=e},projectPos:n,addingToallTasks:function(){v.allTasks.splice(0,v.allTasks.length);for(let n=0;n<v.allProjects.length;n++)for(let e=0;e<v.allProjects[n].projectList.length;e++)v.allTasks[v.allTasks.length]=v.allProjects[n].projectList[e]}}})(),E={countCompletedTasks:function(){let n=0;return v.allTasks.forEach((e=>{"done"==e.status&&n++})),console.log("here",v.allTasks),n}},T=function(){for(let n=0;n<v.allTasks.length;n++)new Date(v.allTasks[n].date).toISOString().slice(0,10)===(new Date).toISOString().slice(0,10)&&Vn.taskcards(v.allTasks[n])},D=function(){for(let n=0;n<v.allTasks.length;n++)new Date(v.allTasks[n].date).toISOString().slice(0,10)===B(new Date,{days:1}).toISOString().slice(0,10)&&Vn.taskcards(v.allTasks[n],document.querySelector("#taskBoxToday"))},j=function(){for(let n=0;n<v.allTasks.length;n++)new Date(v.allTasks[n].date).toISOString().slice(0,10)===B(new Date,{days:2}).toISOString().slice(0,10)&&Vn.taskcards(v.allTasks[n],document.querySelector("#taskBoxtomorrow"))},I=new y("space trip");k(I);class Y{constructor(n,e){this.projectButton=n.addEventListener("click",(function(t){var o;Zn(),o=e,w.projectPos.position=o,zn.returnAllbuttonstlyesTodefault(),zn.makingTheButtonGlow(n),ne.refreshTaskBox(),ee.createTaskBoxforProject(),ee.navigatingTheProjectAndGivingTasks(e),re.manageCheckbox(),se.buttonManager()}))}}var P=t(250);const S=t.p+"c8fd1bb6b4dfd455da79.svg",M=t.p+"04e1a7df197a2de1e626.svg",N=t.p+"79e6b39a5dedd0689ad7.svg",W=t.p+"03b02e98500c669ef571.svg",L=t.p+"819817edadaa5c76bccf.svg",O=t.p+"1213764b91350a02bb2c.svg",U=t.p+"2ac2511792bf6add08e5.svg",q=t.p+"0794abbf4bbe4158f856.svg",H=t.p+"cbf897ee25afe1cbd2d5.svg";function G(n){x(1,arguments);var e=C(n),t=e.getUTCDay(),o=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function z(n){x(1,arguments);var e=C(n),t=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(t+1,0,4),o.setUTCHours(0,0,0,0);var r=G(o),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=G(a);return e.getTime()>=r.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}var F={};function Z(){return F}function Q(n,e){var t,o,r,a,i,l,s,d;x(1,arguments);var c=Z(),u=b(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:c.weekStartsOn)&&void 0!==o?o:null===(s=c.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=C(n),p=A.getUTCDay(),m=(p<u?7:0)+p-u;return A.setUTCDate(A.getUTCDate()-m),A.setUTCHours(0,0,0,0),A}function R(n,e){var t,o,r,a,i,l,s,d;x(1,arguments);var c=C(n),u=c.getUTCFullYear(),A=Z(),p=b(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:A.firstWeekContainsDate)&&void 0!==o?o:null===(s=A.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(u+1,0,p),m.setUTCHours(0,0,0,0);var g=Q(m,e),f=new Date(0);f.setUTCFullYear(u,0,p),f.setUTCHours(0,0,0,0);var h=Q(f,e);return c.getTime()>=g.getTime()?u+1:c.getTime()>=h.getTime()?u:u-1}function X(n,e){for(var t=n<0?"-":"",o=Math.abs(n).toString();o.length<e;)o="0"+o;return t+o}const J=function(n,e){var t=n.getUTCFullYear(),o=t>0?t:1-t;return X("yy"===e?o%100:o,e.length)},_=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):X(t+1,2)},K=function(n,e){return X(n.getUTCDate(),e.length)},V=function(n,e){return X(n.getUTCHours()%12||12,e.length)},$=function(n,e){return X(n.getUTCHours(),e.length)},nn=function(n,e){return X(n.getUTCMinutes(),e.length)},en=function(n,e){return X(n.getUTCSeconds(),e.length)},tn=function(n,e){var t=e.length,o=n.getUTCMilliseconds();return X(Math.floor(o*Math.pow(10,t-3)),e.length)};var on={G:function(n,e,t){var o=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var o=n.getUTCFullYear(),r=o>0?o:1-o;return t.ordinalNumber(r,{unit:"year"})}return J(n,e)},Y:function(n,e,t,o){var r=R(n,o),a=r>0?r:1-r;return"YY"===e?X(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):X(a,e.length)},R:function(n,e){return X(z(n),e.length)},u:function(n,e){return X(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return X(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return X(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,e,t){var o=n.getUTCMonth();switch(e){case"M":case"MM":return _(n,e);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(n,e,t){var o=n.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return X(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(n,e,t,o){var r=function(n,e){x(1,arguments);var t=C(n),o=Q(t,e).getTime()-function(n,e){var t,o,r,a,i,l,s,d;x(1,arguments);var c=Z(),u=b(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:c.firstWeekContainsDate)&&void 0!==o?o:null===(s=c.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1),A=R(n,e),p=new Date(0);return p.setUTCFullYear(A,0,u),p.setUTCHours(0,0,0,0),Q(p,e)}(t,e).getTime();return Math.round(o/6048e5)+1}(n,o);return"wo"===e?t.ordinalNumber(r,{unit:"week"}):X(r,e.length)},I:function(n,e,t){var o=function(n){x(1,arguments);var e=C(n),t=G(e).getTime()-function(n){x(1,arguments);var e=z(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),G(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(o,{unit:"week"}):X(o,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):K(n,e)},D:function(n,e,t){var o=function(n){x(1,arguments);var e=C(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=t-e.getTime();return Math.floor(o/864e5)+1}(n);return"Do"===e?t.ordinalNumber(o,{unit:"dayOfYear"}):X(o,e.length)},E:function(n,e,t){var o=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return X(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return X(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var o=n.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return X(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(n,e,t){var o=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,e,t){var o,r=n.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,e,t){var o,r=n.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var o=n.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return V(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):$(n,e)},K:function(n,e,t){var o=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(o,{unit:"hour"}):X(o,e.length)},k:function(n,e,t){var o=n.getUTCHours();return 0===o&&(o=24),"ko"===e?t.ordinalNumber(o,{unit:"hour"}):X(o,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):nn(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):en(n,e)},S:function(n,e){return tn(n,e)},X:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return an(r);case"XXXX":case"XX":return ln(r);default:return ln(r,":")}},x:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"x":return an(r);case"xxxx":case"xx":return ln(r);default:return ln(r,":")}},O:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+rn(r,":");default:return"GMT"+ln(r,":")}},z:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+rn(r,":");default:return"GMT"+ln(r,":")}},t:function(n,e,t,o){var r=o._originalDate||n;return X(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,o){return X((o._originalDate||n).getTime(),e.length)}};function rn(n,e){var t=n>0?"-":"+",o=Math.abs(n),r=Math.floor(o/60),a=o%60;if(0===a)return t+String(r);var i=e||"";return t+String(r)+i+X(a,2)}function an(n,e){return n%60==0?(n>0?"-":"+")+X(Math.abs(n)/60,2):ln(n,e)}function ln(n,e){var t=e||"",o=n>0?"-":"+",r=Math.abs(n);return o+X(Math.floor(r/60),2)+t+X(r%60,2)}const sn=on;var dn=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},cn=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const un={p:cn,P:function(n,e){var t,o=n.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return dn(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",dn(r,e)).replace("{{time}}",cn(a,e))}};var An=["D","DD"],pn=["YY","YYYY"];function mn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var gn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function fn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const hn={date:fn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:fn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:fn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var bn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function xn(n){return function(e,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var i=n.defaultWidth,l=null!=t&&t.width?String(t.width):n.defaultWidth;o=n.values[l]||n.values[i]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const Cn={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:xn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:xn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:xn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:xn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:xn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Bn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,l=a[0],s=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(s)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(l))return t}(s):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(l))return t}(s);return i=n.valueCallback?n.valueCallback(d):d,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(l.length)}}}var vn,yn={ordinalNumber:(vn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(vn.matchPattern);if(!t)return null;var o=t[0],r=n.match(vn.parsePattern);if(!r)return null;var a=vn.valueCallback?vn.valueCallback(r[0]):r[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(o.length)}}),era:Bn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Bn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Bn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Bn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Bn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const kn={code:"en-US",formatDistance:function(n,e,t){var o,r=gn[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:hn,formatRelative:function(n,e,t,o){return bn[n]},localize:Cn,match:yn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var wn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,En=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Tn=/^'([^]*?)'?$/,Dn=/''/g,jn=/[a-zA-Z]/;function In(n,e,t){var o,r,a,i,l,s,d,c,u,A,p,m,g,f,B,v,y,k;x(2,arguments);var w=String(e),E=Z(),T=null!==(o=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:E.locale)&&void 0!==o?o:kn,D=b(null!==(a=null!==(i=null!==(l=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(d=t.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==l?l:E.firstWeekContainsDate)&&void 0!==i?i:null===(u=E.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var j=b(null!==(p=null!==(m=null!==(g=null!==(f=null==t?void 0:t.weekStartsOn)&&void 0!==f?f:null==t||null===(B=t.locale)||void 0===B||null===(v=B.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==g?g:E.weekStartsOn)&&void 0!==m?m:null===(y=E.locale)||void 0===y||null===(k=y.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==p?p:0);if(!(j>=0&&j<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var I=C(n);if(!function(n){if(x(1,arguments),!function(n){return x(1,arguments),n instanceof Date||"object"===h(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=C(n);return!isNaN(Number(e))}(I))throw new RangeError("Invalid time value");var Y=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(I),P=function(n,e){return x(2,arguments),function(n,e){x(2,arguments);var t=C(n).getTime(),o=b(e);return new Date(t+o)}(n,-b(e))}(I,Y),S={firstWeekContainsDate:D,weekStartsOn:j,locale:T,_originalDate:I};return w.match(En).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,un[e])(n,T.formatLong):n})).join("").match(wn).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(Tn))?a[1].replace(Dn,"'"):r;var l,s=sn[i];if(s)return null!=t&&t.useAdditionalWeekYearTokens||(l=o,-1===pn.indexOf(l))||mn(o,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==An.indexOf(n)}(o)||mn(o,e,String(n)),s(P,o,T.localize,S);if(i.match(jn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}const Yn=t.p+"819e1e40c3fcf14e1116.svg",Pn=t.p+"eabb3514fa0376368ae9.svg";class Sn{constructor(n,e){this.TaskButton=n.addEventListener("change",(function(n){if(this.checked)if("Home"===Hn.section){let n=w.findingTask(v.allTasks[e]);v.allProjects[n.i].projectList[n.x].status="done",ae.strikeoutWords(e),ie()}else v.allProjects[w.projectPos.position].projectList[e].status="done",ae.strikeoutWords(e);else ae.strikeoutWords(e,"none"),v.allProjects[w.projectPos.position].projectList[e].status="undone","Home"===Hn.section&&ie()}))}}const Mn=t.p+"5add4d4dee2471347aed.svg",Nn=t.p+"706624a5af14d5157aa8.svg";function Wn(n,e){x(2,arguments);var t=C(n),o=C(e);return t.getTime()>o.getTime()}let Ln=(()=>{function n(n){"Home"===Hn.section||v.allProjects[w.projectPos.position].projectList.splice(n,1)}return{clearOverdue:function(){for(let n=0;n<v.allProjects.length;n++)for(let e=0;e<v.allProjects[n].projectList.length;e++)Wn(new Date,new Date(v.allProjects[n].projectList[e].date))&&(v.allProjects[n].projectList.splice(e,1),alert("You can't create a date in the past"))},deletingSpecificTask:n,deleteTask:class{constructor(e,t){this.button=e.addEventListener("click",(function(e){n(t),w.addingToallTasks(),Vn.placingTasks(),Vn.updateAlltasks(),console.log("yes we work")}))}}}})(),On=new class{domElementCreator(n,e,t,o="",r=""){let a=document.createElement(n);return a.id=e,a.textContent=o,a.placeholder=r,t.appendChild(a),a}ImageLoadtoDOm(n,e,t){let o=new Image;return o.src=n,o.id=t,e.appendChild(o),o}},Un=(()=>{let n=On.domElementCreator("div","sidebox",document.body),e=On.domElementCreator("div","appTitleHolder",n),t=(On.ImageLoadtoDOm(P,e,"appLogo"),On.domElementCreator("p","appTitle",e,"Ubuntu Tasks"),On.domElementCreator("div","section",n)),o=On.domElementCreator("button","homeDiv",t),r=(On.ImageLoadtoDOm(S,o,"homeicon"),On.domElementCreator("p","hometext",o,"Home"),On.domElementCreator("button","todayButton",t)),a=(On.ImageLoadtoDOm(Nn,r,"todayIcon"),On.domElementCreator("p","TodayText",r,"Today"),On.domElementCreator("button","calender",t)),i=(On.ImageLoadtoDOm(N,a,"Datesicon"),On.domElementCreator("p","hometext",a,"Calender"),On.domElementCreator("button","Projects",t)),l=(On.ImageLoadtoDOm(L,i,"projectIcon"),On.domElementCreator("p","ProjectText",i,"Projects"),On.domElementCreator("div","projectsSection",t)),s=On.domElementCreator("button","createprojects",t);return On.ImageLoadtoDOm(W,s,"createprojectsicon"),On.domElementCreator("p","projectText",s,"Create Projects"),s.title="Create Project",{createprojectsButton:s,siderbox:n,divProjectsSection:l,Today:r}})(),qn=((()=>{let n=On.domElementCreator("div","topBox",document.body);On.domElementCreator("p","topText",n,`Enjoy your ${In(new Date,"EEEE")}`),On.ImageLoadtoDOm(O,n,"topBoximagegirl"),On.ImageLoadtoDOm(U,n,"musicboy"),On.ImageLoadtoDOm(H,n,"boyWithpapers")})(),(()=>{let n=On.domElementCreator("button","addTask",document.body);return n.title="Create new task",On.ImageLoadtoDOm(q,n,"addtaskicon"),{addTask:n}})()),Hn={section:"Home"},Gn=(()=>{let n=On.domElementCreator("dialog","dialogCreateProject",Un.siderbox),e=On.domElementCreator("form","messageBoxdiv",n);e.setAttribute("method","dialog"),On.domElementCreator("label","projectName",e).setAttribute("for","projectNameinput");let t=On.domElementCreator("input","projectNameinput",e);t.placeholder="Go to the Moon";let o=On.domElementCreator("div","buttondiv",e);return{dialogBox:n,cancelButton:On.domElementCreator("button","cancelButton",o,"Cancel"),doneButton:On.domElementCreator("button","doneButton",o,"Create"),projectNameinput:t}})();Un.createprojectsButton.addEventListener("click",(function(n){Gn.dialogBox.showModal()})),Gn.doneButton.addEventListener("click",(function(n){!function(){if(""===Gn.projectNameinput.value)return;let n=new y(Gn.projectNameinput.value);k(n)}(),Rn(),Kn(),$n(),n.preventDefault(),Gn.dialogBox.close()}));let zn={returnAllbuttonstlyesTodefault:function(){document.querySelectorAll("#project").forEach((n=>{n.style.setProperty("background-color","transparent"),n.style.setProperty("color","#828489"),n.style.setProperty("text-align","left")}))},makingTheButtonGlow:function(n){n.style.setProperty("color","white"),n.style.setProperty("background-color","#F39C12"),n.style.setProperty("text-align","center")}},Fn=(()=>{let n=On.domElementCreator("dialog","dialogTask",document.body),e=On.domElementCreator("form","messageBoxdiv",n);On.domElementCreator("label","DateLabel",e,"Task Name").setAttribute("for","TaskName");let t=On.domElementCreator("input","TaskName",e,null,"Venus summit");On.domElementCreator("label","DateLabel",e,"Description").setAttribute("for","TaskDescription");let o=On.domElementCreator("textarea","TaskDescription",e,null,"Take the mars rover at ubuntu station ");o.rows=4,o.setAttribute("maxlength",45),On.domElementCreator("label","DateLabel",e,"Due Date").setAttribute("for","Date");let r=On.domElementCreator("input","Date",e,"Date","Due Date");r.type="date",On.domElementCreator("label","PriorityLabel",e,"Priority").setAttribute("for","selectDropDown");let a=On.domElementCreator("select","selectDropDown",e),i=On.domElementCreator("option","optionHigh",a,"High"),l=On.domElementCreator("option","optionMedium",a,"Medium"),s=On.domElementCreator("option","optionLow",a,"Low");i.setAttribute("value","High"),l.setAttribute("value","Medium"),s.setAttribute("value","Low"),l.selected=!0,t.required=!0,a.required=!0,r.required=!0,o.required=!0;let d=On.domElementCreator("div","buttonHolder",n),c=On.domElementCreator("button","cancelTask",d,"Cancel"),u=On.domElementCreator("button","createTask",d,"Create");return u.type="Submit",{dialogTask:n,cancelTask:c,createTask:u,TaskName:t,TaskDescription:o,PriorityDropdown:a,date:r}})();function Zn(){Hn.section="notHome"}function Qn(){"Home"===Hn.section?oe():"Today"===Hn.section&&le.todayTask()}function Rn(){document.querySelectorAll(".projectName").forEach((n=>{n.remove()}));let n=v.allProjects;for(let e=0;e<n.length;e++){let t=On.domElementCreator("button","project",Un.divProjectsSection,"> "+n[e].projectTitle);e===w.projectPos.position&&zn.makingTheButtonGlow(t),t.className="projectName"}}qn.addTask.addEventListener("click",(function(n){Fn.dialogTask.showModal()})),Fn.cancelTask.addEventListener("click",(function(n){Fn.dialogTask.close(),n.preventDefault()})),Fn.createTask.addEventListener("click",(function(n){!function(){if(""===Fn.TaskName.value||""===Fn.TaskDescription.value||""===Fn.date.value)return;let n=new w.createTask(Fn.TaskName.value,Fn.TaskDescription.value,Fn.date.value,Fn.PriorityDropdown.value);n.Project=v.allProjects[w.projectPos.position].projectTitle,w.addTasktoProject(n),Ln.clearOverdue(),w.addingToallTasks(),Fn.dialogTask.close()}(),Vn.placingTasks(),Vn.updateAlltasks(),Qn(),re.manageCheckbox()})),Gn.cancelButton.addEventListener("click",(function(n){Rn(),n.preventDefault(),Gn.dialogBox.close()})),Rn();let Xn={content:On.domElementCreator("div","contentTobeUpdated",document.body)};function Jn(n,e,t,o="",r="",a="contentToRemove"){let i=On.domElementCreator(n,e,t,o,"");return i.className=a,i}let _n=(()=>{function n(){let n=Jn("div","statisticsHolderbox",Xn.content),e=["Current Projects","Overall Tasks","Completed Tasks"],t=["informationOfProjectsHolder","infomationOfTasksHolder","informationOfcompletedTasksHolder"],o=["projectNumber","TaskNumber","completedNumber"],r=[Yn,Pn,M],a=["numberOfProjectsdiv","numberOfTasksdiv","completedTasks"],i=[v.allProjects.length,v.allTasks.length,0],l=["projectDetails","TaskDetails","completedTask"],s=["projectsBackdrop","tasksBackdrop","completedBackdrop"];for(let d=0;d<e.length;d++){let c=Jn("div",a[d],n),u=Jn("div",t[d],c),A=(Jn("p",o[d],u,i[d]),Jn("p",l[d],u,e[d]),Jn("div","iconDiv",c));On.ImageLoadtoDOm(r[d],A,"iconStatics"),On.domElementCreator("div",s[d],A)}}return n(),{makeStatistics:n}})();function Kn(){"Home"===Hn.section&&(document.querySelector("#projectNumber").textContent=v.allProjects.length)}let Vn=(()=>{let n=({title:n,description:e,date:t,priority:o,status:r},a=document.querySelector("#TaskBox"))=>{let i=Jn("div","TaskDiv",a),l=Jn("div","dateDiv",i),s=Jn("p","daysRemaining",l,t),d=On.domElementCreator("button","deleteTask",l),c=(On.ImageLoadtoDOm(Mn,d,"deleteIcon"),Jn("p","taskTitle",i,n)),u=Jn("p","explainationTask",i,e),A=Jn("div","buttonsManipulationDiv",i),p=Jn("button","Priotrity",A,o),m=Jn("button","editTask",A,"edit"),g=Jn("input","completeTask",A,r);"done"===r&&(g.checked=!0,c.style.setProperty("text-decoration","line-through"),u.style.setProperty("text-decoration","line-through")),g.type="checkbox",g.title="toogle complete",i.className="task",l.className="task",s.className="task",c.className="task",u.className="task",A.className="task",p.className="task",m.className="task",g.className="task"};return{placingTasks:function(){document.querySelectorAll(".task").forEach((n=>{n.remove()}));for(let e=0;e<v.allProjects[w.projectPos.position].projectList.length;e++){let t=v.allProjects[w.projectPos.position].projectList[e];n(t)}se.buttonManager()},updateAlltasks:function(){"Home"===Hn.section&&(document.querySelector("#TaskNumber").textContent=v.allTasks.length)},makeTaskbox:function(){return Jn("div","TaskBox",Xn.content)},taskcards:n}})();function $n(){let n=document.querySelectorAll("#project"),e=0;n.forEach((n=>{new Y(n,e),e++}))}Jn("div","TaskBox",Xn.content),document.querySelectorAll("#project")[0],$n();let ne={refreshTaskBox:function(){document.querySelectorAll(".contentToRemove").forEach((n=>{n.remove()})),document.querySelectorAll(".task").forEach((n=>{n.remove()})),document.querySelectorAll("#TaskBox").forEach((n=>{n.remove()}))},TaskBoxcleanup:te};document.querySelector("#homeDiv").addEventListener("click",(function(n){ne.refreshTaskBox(),_n.makeStatistics(),Vn.makeTaskbox(),Kn(),Hn.section="Home",Qn(),re.manageCheckbox(),ie()}));let ee={createTaskBoxforProject:function(){On.domElementCreator("div","TaskBox",document.querySelector("#contentTobeUpdated")).className=".contentToRemove"},navigatingTheProjectAndGivingTasks:function(n){for(let e=0;e<v.allProjects[n].projectList.length;e++)Vn.taskcards(v.allProjects[n].projectList[e])}};function te(){document.querySelectorAll(".task").forEach((n=>{n.remove()}))}function oe(){te(),console.log("hello");for(let n=0;n<v.allTasks.length;n++)Vn.taskcards(v.allTasks[n])}oe();let re={manageCheckbox:function(){let n=0;document.querySelectorAll("#completeTask").forEach((e=>{new Sn(e,n),n++}))}},ae={strikeoutWords:function(n,e="line-through"){let t=document.querySelectorAll("#taskTitle"),o=document.querySelectorAll("#explainationTask");t[n].style.setProperty("text-decoration",e),o[n].style.setProperty("text-decoration",e)}};function ie(){let n=document.querySelector("#completedNumber"),e=E.countCompletedTasks();n.textContent=e}ie();let le=(()=>{function n(){ne.refreshTaskBox(),Vn.makeTaskbox(),T()}return Un.Today.addEventListener("click",(function(e){Hn.section="Today",n()})),{todayTask:n}})(),se=(document.querySelector("#calender").addEventListener("click",(function(n){ne.refreshTaskBox(),function(){let n=Jn("div","holderforDates",document.querySelector("#contentTobeUpdated")),e=Jn("div","TodayBox",n),t=(Jn("p","heading",e,"Tomorrow"),Jn("div","taskBoxToday",e),Jn("div","tomorrowBox",n));Jn("p","tomorrowHeading",t,B(new Date,{days:2}).toLocaleString("en-us",{day:"numeric",month:"long"})),Jn("div","taskBoxtomorrow",t)}(),D(),j()})),(()=>{function n(){let n=document.querySelectorAll("#deleteTask");for(let e=0;e<n.length;e++)new Ln.deleteTask(n[e],e)}return n(),{buttonManager:n}})())},250:(n,e,t)=>{n.exports=t.p+"0ae69d2eae7e39bfe725.png"}},n=>{n.O(0,[712],(()=>(95,n(n.s=95)))),n.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQUksVUFBVXFDLEVBQVMsWUFDOUNyQyxHQUF1QixNQUFNLGVBQWVxQyxHQUM3Q3JDLEdBQXdCLE1BQU0sY0FBY29DLElBRXhDcEMsR0FBdUIsSUFBSSxrQkFBa0JzQyxFQUFZbmQsRUFBSSxJQUFJTCxLQUFPLENBQUNXLEtBQUssSUFBSThjLGVBQWUsUUFBUSxDQUFDdlksSUFBSSxVQUFVd0MsTUFBTSxVQUM5SHdULEdBQXVCLE1BQU0sa0JBQWtCc0MsRUFFckUsQ0FLQUUsR0FDQTlaLElBQ0FBLEdBQ0YsSUFRbUMsTUFHakMsU0FBU29CLElBQ1AsSUFBSTJZLEVBQWtCL2dCLFNBQVM2YyxpQkFBaUIsZUFFaEQsSUFBSyxJQUFJNWdCLEVBQUksRUFBR0EsRUFBSThrQixFQUFrQmhsQixPQUFRRSxJQUV2QixJQUFJd2QsR0FBWUksV0FBV2tILEVBQWtCOWtCLEdBQUdBLEVBUXpFLENBS0YsT0FGQW1NLElBRU8sQ0FBQ0EsZ0JBQ1AsRUF0QmtDLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNb250aHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZERheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9zcmMvYWRkLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vc3JjL3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0TG9jYWxlL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL3NyYy9jaGVjay5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNBZnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL3NyYy9kZWxldGUuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9zcmMvRG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2ljb25zL2xpbnV4SGVhZC5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUluZGllK0Zsb3dlciZmYW1pbHk9UXVpY2tzYW5kOndnaHRANTAwJmZhbWlseT1TYXRpc2Z5JmRpc3BsYXk9c3dhcCk7XCJdKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYFxuICAqe1xuXG4gICAgcGFkZGluZzogMHB4O1xuICAgIG1hcmdpbjogMHB4O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgZm9udC1mYW1pbHk6ICdRdWlja3NhbmQnLCBzYW5zLXNlcmlmO1xuXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuOHB4O1xuXG4gICAgXG5cblxuXG59XG5ib2R5e1xuYmFja2dyb3VuZC1jb2xvcjogIzBmMGUxMztcblxuZGlzcGxheTogZ3JpZDtcbmdyaWQtdGVtcGxhdGUtY29sdW1uczogMjUwcHggcmVwZWF0KDQsMWZyKTtcbmdyaWQtdGVtcGxhdGUtcm93czpyZXBlYXQoNywxZnIpIDtcbmhlaWdodDogMTAwdmg7XG5jb2xvcjogd2hpdGU7XG5cblxufVxuXG4jc2lkZWJveHtcblxuICBcbiAgICBncmlkLWNvbHVtbjogMS8xO1xuICAgIGdyaWQtcm93OiAxLy0xO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNjFhMjM7XG4gIFxuIFxuXG5cblxufVxuXG4jYXBwVGl0bGVIb2xkZXJ7XG5cblxuZGlzcGxheTogZmxleDtcblxuYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuYmFja2dyb3VuZC1jb2xvcjogIzE2MWEyMztcblxuYm9yZGVyLWJvdHRvbTogc29saWQgMC41cHggICM0MDQ4NWE7XG5cblxucGFkZGluZzogMjJweDtcbmhlaWdodDogMTAwcHg7XG5cblxuXG5cbn1cbiNhcHBUaXRsZXtcblxuZm9udC1zaXplOiAxOHB4O1xuZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbn1cbiNhcHBMb2dve1xuICBcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19ffSk7XG4gICAgd2lkdGg6IDYwcHg7XG4gICAgaGVpZ2h0OiA2MHB4O1xufVxuXG4jc2VjdGlvblRpdGxle1xuXG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIG1hcmdpbjogIDEycHggMHB4IDBweCAzOXB4O1xuICAgXG4gICAgXG5cblxufVxuI3NlY3Rpb257XG5cbiAgICBjb2xvcjogIzQ4NGI1MjtcblxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgIFxuICAgIGdhcDogMTJweDtcbiAgICBtYXJnaW4tdG9wOiAxMnB4O1xuXG59XG4jc2VjdGlvbj5idXR0b257XG5cbiAgICBiYWNrZ3JvdW5kOnRyYW5zcGFyZW50IDtcbiAgICBjb2xvcjogIzlkOWZhNTtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgd2lkdGg6IDE1MHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIHBhZGRpbmc6IDEycHg7XG4gICAgZ2FwOiAxNHB4O1xuICAgIGZvbnQtc2l6ZTogMTUuNXB4O1xuICAgIHBhZGRpbmctbGVmdDogMjZweDtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgXG4gICBcbn1cblxuI3NlY3Rpb24+YnV0dG9uOmxhc3QtY2hpbGR7XG5cbmJhY2tncm91bmQtY29sb3I6IzM3NTREQjtcbmJvcmRlci1yYWRpdXM6IDEycHg7XG5oZWlnaHQ6IDUwcHg7XG5jb2xvcjp3aGl0ZTtcbndpZHRoOiAyMDBweDtcblxubWFyZ2luLWxlZnQ6IDIxcHg7XG5cbn1cbiNzZWN0aW9uPmJ1dHRvbjpob3ZlcntcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyRDJGMzk7XG4gICAgd2lkdGg6IDI1MHB4O1xuXG5cbn0gICAgXG5cbiNzZWN0aW9uPmJ1dHRvbjpsYXN0LWNoaWxkOmhvdmVye1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjojMzc1NERCO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIH1cbiN0b3BCb3hpbWFnZWdpcmwsI211c2ljYm95LCNib3lXaXRocGFwZXJze1xuXG5cbmhlaWdodDogMTAwcHg7XG5cblxuXG5cblxufVxuI3RvcEJveGltYWdlZ2lybHtcblxuICAgIG1hcmdpbi1sZWZ0OjExMXB4IDtcbn1cblxuXG4jdG9wQm94e1xuXG5ncmlkLWNvbHVtbi1zdGFydDogMjtcbmdyaWQtY29sdW1uLWVuZDogNjtcbmJhY2tncm91bmQtY29sb3I6ICMzNzU0REI7XG5cbmRpc3BsYXk6IGZsZXg7XG5nYXA6MTBweDtcbmhlaWdodDoxMDBweCA7XG5cblxuXG5cbn1cbiN0b3BUZXh0e1xuICBcbiAgZm9udC1mYW1pbHk6ICdTYXRpc2Z5JywgY3Vyc2l2ZTtcbmFsaWduLXNlbGY6IGNlbnRlcjtcbmZvbnQtc2l6ZTogNTBweDtcbmZvbnQtd2VpZ2h0OiBib2xkO1xubWFyZ2luOiAxMnB4O1xufVxuI2FkZFRhc2t7XG5cbndpZHRoOiA3MHB4O1xuaGVpZ2h0OiA3MHB4O1xucG9zaXRpb246IGFic29sdXRlO1xudG9wOjQ0MHB4O1xubGVmdDoxMTc4cHg7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjMzc1NERCO1xuXG5ib3JkZXI6IG5vbmU7XG5ib3JkZXItcmFkaXVzOiAxMDAlO1xuXG5cbn1cblxuI2FkZHRhc2tpY29ue1xuXG4gICAgZmlsbDp3aGl0ZTtcbiAgIFxuXG5cblxufVxuXG4jYWRkVGFzazpob3ZlcntcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY1Njc4O1xuXG5cbn1cbiNkaWFsb2dDcmVhdGVQcm9qZWN0e1xuXG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyNjJjMzY7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICB3aWR0aDogMjUxcHg7XG5wYWRkaW5nOiAyMHB4O1xubWFyZ2luLXRvcDogMzc5cHg7XG5cbn1cbiNtZXNzYWdlQm94ZGl2e1xuXG4gICAgZGlzcGxheTogZmxleDtcblxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgcGFkZGluZzogMTVweDtcbiAgICBnYXA6NnB4O1xuICAgIFxuICAgXG59XG5cbiNtZXNzYWdlQm94ZGl2IGJ1dHRvbntcblxuICAgIHdpZHRoOiA3OHB4O1xuICAgIGhlaWdodDogMjZweDtcbmJvcmRlcjogbm9uZTtcbm91dGxpbmU6bm9uZTtcbmNvbG9yOndoaXRlO1xuXG59XG5cbiNtZXNzYWdlQm94ZGl2IGJ1dHRvbjpmaXJzdC1jaGlsZHtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNTNiMzA7XG59XG5cbiNtZXNzYWdlQm94ZGl2IGJ1dHRvbjpsYXN0LWNoaWxke1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJhYTMxZjtcbn1cblxuI21lc3NhZ2VCb3hkaXYgaW5wdXR7XG5cbiAgICBwYWRkaW5nOiA0cHggMTJweDtcbiAgICBib3JkZXItcmFkaXVzOjRweCA7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0UzRTNFMztcblxufVxuI21lc3NhZ2VCb3hkaXYgaW5wdXQ6YWN0aXZle1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBvdXRsaW5lOiBub25lO1xufVxuI21lc3NhZ2VCb3hkaXYgZGl2e1xuXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6OHB4O1xuXG5cbn1cblxuXG4gIFxudGV4dGFyZWEge1xuICAgIHJlc2l6ZTogbm9uZTtcbiAgfVxuICNkaWFsb2dUYXNre1xuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDoyNyU7XG4gICAgbGVmdDo0MCU7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6bm9uZTtcbiAgICB3aWR0aDogMjkxcHg7XG4gICAgaGVpZ2h0OiAzNTVweDtcbiAgICBwYWRkaW5nOiAxM3B4O1xuICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgIGJhY2tncm91bmQtY29sb3I6ICMyNjJjMzY7XG4gICBjb2xvcjp3aGl0ZVxuXG4gfVxuICNkaWFsb2dUYXNrIGlucHV0LCAjZGlhbG9nVGFzayB0ZXh0YXJlYXtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiOGMwY2M7XG4gfSBcblxuICBkaWFsb2c6OmJhY2tkcm9wIHtcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTtcbiAgfVxuICAjYnV0dG9uSG9sZGVye1xuXG5kaXNwbGF5OiBmbGV4O1xuZ2FwOiA4cHg7XG5qdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcbmhlaWdodDogMzBweDtcbnBhZGRpbmc6IDBweCAxMHB4O1xuICB9XG5cbiAgI2J1dHRvbkhvbGRlciBidXR0b257XG5cbiAgICB3aWR0aDogMTMwcHg7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6bm9uZTtcbiAgICBjb2xvcjogd2hpdGU7XG5cbiAgfVxuXG4gICNidXR0b25Ib2xkZXIgYnV0dG9uOmxhc3QtY2hpbGR7XG5cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmFhMzFmO1xuICAgIFxuXG4gIH1cblxuICAjYnV0dG9uSG9sZGVyIGJ1dHRvbjpmaXJzdC1jaGlsZHtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGNTNiMzA7XG5cbiAgfVxuXG4gICNidXR0b25Ib2xkZXIgYnV0dG9uOmhvdmVyLCNtZXNzYWdlQm94ZGl2IGJ1dHRvbjpob3ZlcntcblxuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyOiAycHggc29saWQgI2I4YzBjYztcblxuXG4gIH1cblxuICBcblxuICAjcHJvamVjdHNTZWN0aW9ue1xuXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBcbiAgICBcbiAgICBtYXJnaW4tdG9wOi0xNHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAyMCU7XG4gICAgXG5cblxuICB9XG4gICNwcm9qZWN0c1NlY3Rpb24gYnV0dG9ue1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIHdpZHRoOiAxNTBweDtcbiAgICBoZWlnaHQ6IDMwcHg7XG4gICAgY29sb3I6IzgyODQ4OTtcbiAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgIGJvcmRlci1yYWRpdXM6IDdweDtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcblxuICB9XG4gICNwcm9qZWN0c1NlY3Rpb24gYnV0dG9uOmhvdmVye1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyZDJmMzk7XG5cblxuXG4gIH1cbiAgI2NvbnRlbnRUb2JlVXBkYXRlZHtcblxuICAgIC8qIGJvcmRlcjogc29saWQgM3B4IHJlZDsgKi9cbiAgIFxuICAgIGdyaWQtY29sdW1uOiAyLy0xO1xuICAgIGdyaWQtcm93OiAyLy0xO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBvdmVyZmxvdzogYXV0bztcblxuXG5cbiAgfVxuICAjc3RhdGlzdGljc0hvbGRlcmJveHtcblxuICAgIFxuICAgIGhlaWdodDogMTAwcHg7XG4gICAgbWFyZ2luOiAyMHB4IDBweCAwcHggMTBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdhcDogNzZweDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuICB9XG5cbiAgI2luZm9ybWF0aW9uT2ZQcm9qZWN0c0hvbGRlcntcblxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuXG5cblxuICB9XG4gICNpbmZvcm1hdGlvbk9mUHJvamVjdHNIb2xkZXIgcDpmaXJzdC1jaGlsZCwjVGFza051bWJlciwjY29tcGxldGVkTnVtYmVye1xuXG4gICAgZm9udC1zaXplOiAzNHB4O1xuXG5cbiAgfVxuICAjc3RhdGlzdGljc0hvbGRlcmJveD5kaXZ7XG5cbmRpc3BsYXk6IGZsZXg7XG5cbndpZHRoOiAzMDBweDtcbmhlaWdodDogaW5oZXJpdDtcbnBhZGRpbmc6IDE1cHg7XG5ib3JkZXItcmFkaXVzOiA4cHg7XG5qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbmJhY2tncm91bmQtY29sb3I6ICMxNjFhMjM7XG5cblxuIH1cbiAjcHJvamVjdHNCYWNrZHJvcCwjdGFza3NCYWNrZHJvcCwjY29tcGxldGVkQmFja2Ryb3B7XG5cbm9wYWNpdHk6IDE1JTtcbmJvcmRlci1yYWRpdXM6MTAwJSA7XG53aWR0aDogNjBweDtcbmhlaWdodDogNjBweDtcblxuXG5cblxuXG5cbiB9XG4gI3Byb2plY3RzQmFja2Ryb3B7XG4gIGJhY2tncm91bmQtY29sb3I6ICNhODAzZTQ7XG5cblxuIH1cbiAjdGFza3NCYWNrZHJvcHtcbiAgYmFja2dyb3VuZC1jb2xvcjojRjM5QzEyIDtcbiB9XG5cbiAjY29tcGxldGVkQmFja2Ryb3B7XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogIzI3QUU2MDtcblxuIH1cbiBcbiAjaWNvbkRpdntcblxuZGlzcGxheTogZmxleDtcbmp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cbiB9XG4gI2ljb25EaXYgaW1ne1xuICB3aWR0aDozMnB4O1xuICBoZWlnaHQ6MzBweDsgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbmxlZnQ6IDQ2cHg7XG50b3A6MTVweFxuIH1cblxuI1Rhc2tCb3h7XG4gIG1hcmdpbi10b3A6MTJweDtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwxZnIpO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgzLDEyMHB4KTtcbiAgZ3JpZC1hdXRvLWNvbHVtbnM6IDFmcjtcbiAgZ3JpZC1hdXRvLXJvd3M6MTIwcHg7XG4gIGZsZXgtZ3JvdzogMTtcbiAgcGFkZGluZzogMHB4IDM3cHg7XG4gIGdhcDogMTJweDtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG4jVGFza0RpdntcblxuICBiYWNrZ3JvdW5kLWNvbG9yOiMxNjFhMjMgO1xuIHBhZGRpbmc6IDEycHg7XG4gZGlzcGxheTogZmxleDtcbiBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuIGdhcDogNHB4O1xuIGJvcmRlci1yYWRpdXM6IDEycHg7XG5cbn1cblxuI2RheXNSZW1haW5pbmd7XG5cbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogIzY2NjY2NjtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgd2lkdGg6IDczcHg7XG5cblxufVxuXG4jVGFza1RpdGxle1xuXG5mb250LXdlaWdodDogYm9sZDtcblxuXG59XG5cbiNleHBsYWluYXRpb25UYXNre1xuXG5mb250LXN0eWxlOiBpdGFsaWM7XG5mb250LXNpemU6IDE0cHg7XG5mb250LXdlaWdodDogMTAwO1xuY29sb3I6ICM2NjY2NjY7XG5cblxufVxuXG4jYnV0dG9uc01hbmlwdWxhdGlvbkRpdntcblxuZGlzcGxheTogZmxleDtcbmdhcDo2cHg7XG5qdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuXG59XG4jYnV0dG9uc01hbmlwdWxhdGlvbkRpdiBidXR0b257XG5cbiAgd2lkdGg6IDcxcHg7XG4gIGhlaWdodDogMjdweDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXG59XG5cbiNidXR0b25zTWFuaXB1bGF0aW9uRGl2IGJ1dHRvbjpmaXJzdC1jaGlsZHtcblxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY29sb3I6ICNGMzlDMTI7XG4gIGJvcmRlcjogc29saWQgMnB4ICNGMzlDMTI7XG4gIGJvcmRlci1yYWRpdXM6IDM0cHg7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuXG59XG4jYnV0dG9uc01hbmlwdWxhdGlvbkRpdiBidXR0b246bnRoLWNoaWxkKDIpe1xuXG4gIGJhY2tncm91bmQtY29sb3I6IzM3NTREQjtcbiAgY29sb3I6IHdoaXRlO1xuICBib3JkZXI6IG5vbmU7XG4gIG91dGxpbmU6IG5vbmU7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuXG5cbn1cbiNidXR0b25zTWFuaXB1bGF0aW9uRGl2IGJ1dHRvbjpudGgtY2hpbGQoMyl7XG5iYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTAyLCAzMywgMzMpO1xuY29sb3I6IHdoaXRlO1xuYm9yZGVyOiBub25lO1xub3V0bGluZTogbm9uZTtcblxufVxuXG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl17XG5cbiAgd2lkdGg6IDI4cHg7XG4gIGhlaWdodDogMjhweDtcblxuICAvKiBiYWNrZ3JvdW5kOiAgKi9cbiAgYXBwZWFyYW5jZTogbm9uZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTtcbiAgYm9yZGVyOiAycHggI2NlZDRkYSBzb2xpZDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuIFxufVxuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdOmNoZWNrZWR7XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogIzI3QUU2MDtcbiAgYm9yZGVyOiBub25lO1xuICBcblxuXG59XG4jZGF0ZURpdntcblxuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDM4N3B4O1xuICBmb250LXdlaWdodDogYm9sZDtcblxufVxuXG4jZGF0ZURpdiBidXR0b257XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIFxuICBib3JkZXI6IG5vbmU7XG5cbn1cbiNob2xkZXJmb3JEYXRlc3tcblxuICBcbiAgZmxleC1ncm93OiAxO1xuICAvKiBib3JkZXI6IDJweCBzb2xpZCByZWQ7ICovXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cblxufVxuXG4jaG9sZGVyZm9yRGF0ZXM+ZGl2e1xuXG4gIGZsZXgtZ3JvdzogMTtcblxuICAvKiBib3JkZXI6IHNvbGlkIGJsdWUgMnB4OyAqL1xuICBvdmVyZmxvdzogYXV0bztcblxuXG59XG4jVG9kYXlCb3gsI3RvbW9ycm93Qm94e1xuXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDEycHg7XG5cblxufVxuI1RvZGF5Qm94PmRpdiwjdG9tb3Jyb3dCb3g+ZGl2e1xuXG4gIC8qIGJvcmRlcjogMnB4IHNvbGlkIHllbGxvdzsgKi9cbmZsZXgtZ3JvdzogMTtcblxufVxuXG4jVG9kYXlCb3g+cCwjdG9tb3Jyb3dCb3g+cHtcbmZvbnQtd2VpZ2h0OiBib2xkO1xuICBcbn1cbiN0YXNrQm94VG9kYXksI3Rhc2tCb3h0b21vcnJvd3tcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwxZnIpO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgyLDEyMHB4KTtcbiAgZ3JpZC1hdXRvLWNvbHVtbnM6IDFmcjtcbiAgZ3JpZC1hdXRvLXJvd3M6MTIwcHg7XG5wYWRkaW5nOiAxM3B4O1xuZ2FwOiAxMnB4O1xucGFkZGluZzogMHB4IDM3cHg7XG5tYXJnaW4tdG9wOiAxNnB4O1xuXG5cbn1cblxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7RUFJRTs7SUFFRSxZQUFZO0lBQ1osV0FBVztJQUNYLHNCQUFzQjtJQUN0QixvQ0FBb0M7O0lBRXBDLHFCQUFxQjs7Ozs7O0FBTXpCO0FBQ0E7QUFDQSx5QkFBeUI7O0FBRXpCLGFBQWE7QUFDYiwwQ0FBMEM7QUFDMUMsaUNBQWlDO0FBQ2pDLGFBQWE7QUFDYixZQUFZOzs7QUFHWjs7QUFFQTs7O0lBR0ksZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCx5QkFBeUI7Ozs7OztBQU03Qjs7QUFFQTs7O0FBR0EsYUFBYTs7QUFFYixtQkFBbUI7O0FBRW5CLHlCQUF5Qjs7QUFFekIsbUNBQW1DOzs7QUFHbkMsYUFBYTtBQUNiLGFBQWE7Ozs7O0FBS2I7QUFDQTs7QUFFQSxlQUFlO0FBQ2YsaUJBQWlCOztBQUVqQjtBQUNBOztJQUVJLG1EQUFzQztJQUN0QyxXQUFXO0lBQ1gsWUFBWTtBQUNoQjs7QUFFQTs7SUFFSSxlQUFlO0lBQ2YsMEJBQTBCOzs7OztBQUs5QjtBQUNBOztJQUVJLGNBQWM7O0lBRWQsYUFBYTtJQUNiLHNCQUFzQjs7SUFFdEIsU0FBUztJQUNULGdCQUFnQjs7QUFFcEI7QUFDQTs7SUFFSSx1QkFBdUI7SUFDdkIsY0FBYztJQUNkLFlBQVk7SUFDWixZQUFZO0lBQ1osYUFBYTtJQUNiLFlBQVk7SUFDWixhQUFhO0lBQ2IsU0FBUztJQUNULGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLG1CQUFtQjs7O0FBR3ZCOztBQUVBOztBQUVBLHdCQUF3QjtBQUN4QixtQkFBbUI7QUFDbkIsWUFBWTtBQUNaLFdBQVc7QUFDWCxZQUFZOztBQUVaLGlCQUFpQjs7QUFFakI7QUFDQTs7SUFFSSx5QkFBeUI7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LHNCQUFzQjtFQUN0Qix5QkFBeUI7RUFDekIsa0JBQWtCOztBQUVwQjtBQUNBOztFQUVFLHlCQUF5QjtFQUN6QixZQUFZOzs7O0FBSWQ7QUFDQTs7RUFFRSxhQUFhO0VBQ2IsVUFBVTtFQUNWLGlCQUFpQjs7QUFFbkI7O0FBRUE7O0VBRUUsNkJBQTZCOztFQUU3QixZQUFZOztBQUVkO0FBQ0E7OztFQUdFLFlBQVk7RUFDWiwyQkFBMkI7RUFDM0IsYUFBYTtFQUNiLHNCQUFzQjs7O0FBR3hCOztBQUVBOztFQUVFLFlBQVk7O0VBRVosNEJBQTRCO0VBQzVCLGNBQWM7OztBQUdoQjtBQUNBOztFQUVFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsYUFBYTs7O0FBR2Y7QUFDQTs7RUFFRSw4QkFBOEI7QUFDaEMsWUFBWTs7QUFFWjs7QUFFQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtFQUNFLGFBQWE7RUFDYixvQ0FBb0M7RUFDcEMsbUNBQW1DO0VBQ25DLHNCQUFzQjtFQUN0QixvQkFBb0I7QUFDdEIsYUFBYTtBQUNiLFNBQVM7QUFDVCxpQkFBaUI7QUFDakIsZ0JBQWdCOzs7QUFHaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbmRpZStGbG93ZXImZmFtaWx5PVF1aWNrc2FuZDp3Z2h0QDUwMCZmYW1pbHk9U2F0aXNmeSZkaXNwbGF5PXN3YXAnKTtcXG5cXG4gIFxcbiAgKntcXG5cXG4gICAgcGFkZGluZzogMHB4O1xcbiAgICBtYXJnaW46IDBweDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgZm9udC1mYW1pbHk6ICdRdWlja3NhbmQnLCBzYW5zLXNlcmlmO1xcblxcbiAgICBsZXR0ZXItc3BhY2luZzogMC44cHg7XFxuXFxuICAgIFxcblxcblxcblxcbn1cXG5ib2R5e1xcbmJhY2tncm91bmQtY29sb3I6ICMwZjBlMTM7XFxuXFxuZGlzcGxheTogZ3JpZDtcXG5ncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDI1MHB4IHJlcGVhdCg0LDFmcik7XFxuZ3JpZC10ZW1wbGF0ZS1yb3dzOnJlcGVhdCg3LDFmcikgO1xcbmhlaWdodDogMTAwdmg7XFxuY29sb3I6IHdoaXRlO1xcblxcblxcbn1cXG5cXG4jc2lkZWJveHtcXG5cXG4gIFxcbiAgICBncmlkLWNvbHVtbjogMS8xO1xcbiAgICBncmlkLXJvdzogMS8tMTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE2MWEyMztcXG4gIFxcbiBcXG5cXG5cXG5cXG59XFxuXFxuI2FwcFRpdGxlSG9sZGVye1xcblxcblxcbmRpc3BsYXk6IGZsZXg7XFxuXFxuYWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG5iYWNrZ3JvdW5kLWNvbG9yOiAjMTYxYTIzO1xcblxcbmJvcmRlci1ib3R0b206IHNvbGlkIDAuNXB4ICAjNDA0ODVhO1xcblxcblxcbnBhZGRpbmc6IDIycHg7XFxuaGVpZ2h0OiAxMDBweDtcXG5cXG5cXG5cXG5cXG59XFxuI2FwcFRpdGxle1xcblxcbmZvbnQtc2l6ZTogMThweDtcXG5mb250LXdlaWdodDogYm9sZDtcXG5cXG59XFxuI2FwcExvZ297XFxuICBcXG4gICAgYmFja2dyb3VuZDogdXJsKC4vaWNvbnMvbGludXhIZWFkLnBuZyk7XFxuICAgIHdpZHRoOiA2MHB4O1xcbiAgICBoZWlnaHQ6IDYwcHg7XFxufVxcblxcbiNzZWN0aW9uVGl0bGV7XFxuXFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gICAgbWFyZ2luOiAgMTJweCAwcHggMHB4IDM5cHg7XFxuICAgXFxuICAgIFxcblxcblxcbn1cXG4jc2VjdGlvbntcXG5cXG4gICAgY29sb3I6ICM0ODRiNTI7XFxuXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgXFxuICAgIGdhcDogMTJweDtcXG4gICAgbWFyZ2luLXRvcDogMTJweDtcXG5cXG59XFxuI3NlY3Rpb24+YnV0dG9ue1xcblxcbiAgICBiYWNrZ3JvdW5kOnRyYW5zcGFyZW50IDtcXG4gICAgY29sb3I6ICM5ZDlmYTU7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgd2lkdGg6IDE1MHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBoZWlnaHQ6IDQwcHg7XFxuICAgIHBhZGRpbmc6IDEycHg7XFxuICAgIGdhcDogMTRweDtcXG4gICAgZm9udC1zaXplOiAxNS41cHg7XFxuICAgIHBhZGRpbmctbGVmdDogMjZweDtcXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgXFxuICAgXFxufVxcblxcbiNzZWN0aW9uPmJ1dHRvbjpsYXN0LWNoaWxke1xcblxcbmJhY2tncm91bmQtY29sb3I6IzM3NTREQjtcXG5ib3JkZXItcmFkaXVzOiAxMnB4O1xcbmhlaWdodDogNTBweDtcXG5jb2xvcjp3aGl0ZTtcXG53aWR0aDogMjAwcHg7XFxuXFxubWFyZ2luLWxlZnQ6IDIxcHg7XFxuXFxufVxcbiNzZWN0aW9uPmJ1dHRvbjpob3ZlcntcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJEMkYzOTtcXG4gICAgd2lkdGg6IDI1MHB4O1xcblxcblxcbn0gICAgXFxuXFxuI3NlY3Rpb24+YnV0dG9uOmxhc3QtY2hpbGQ6aG92ZXJ7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6IzM3NTREQjtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7XFxuICAgIHdpZHRoOiAyMDBweDtcXG4gICAgfVxcbiN0b3BCb3hpbWFnZWdpcmwsI211c2ljYm95LCNib3lXaXRocGFwZXJze1xcblxcblxcbmhlaWdodDogMTAwcHg7XFxuXFxuXFxuXFxuXFxuXFxufVxcbiN0b3BCb3hpbWFnZWdpcmx7XFxuXFxuICAgIG1hcmdpbi1sZWZ0OjExMXB4IDtcXG59XFxuXFxuXFxuI3RvcEJveHtcXG5cXG5ncmlkLWNvbHVtbi1zdGFydDogMjtcXG5ncmlkLWNvbHVtbi1lbmQ6IDY7XFxuYmFja2dyb3VuZC1jb2xvcjogIzM3NTREQjtcXG5cXG5kaXNwbGF5OiBmbGV4O1xcbmdhcDoxMHB4O1xcbmhlaWdodDoxMDBweCA7XFxuXFxuXFxuXFxuXFxufVxcbiN0b3BUZXh0e1xcbiAgXFxuICBmb250LWZhbWlseTogJ1NhdGlzZnknLCBjdXJzaXZlO1xcbmFsaWduLXNlbGY6IGNlbnRlcjtcXG5mb250LXNpemU6IDUwcHg7XFxuZm9udC13ZWlnaHQ6IGJvbGQ7XFxubWFyZ2luOiAxMnB4O1xcbn1cXG4jYWRkVGFza3tcXG5cXG53aWR0aDogNzBweDtcXG5oZWlnaHQ6IDcwcHg7XFxucG9zaXRpb246IGFic29sdXRlO1xcbnRvcDo0NDBweDtcXG5sZWZ0OjExNzhweDtcXG5iYWNrZ3JvdW5kLWNvbG9yOiAjMzc1NERCO1xcblxcbmJvcmRlcjogbm9uZTtcXG5ib3JkZXItcmFkaXVzOiAxMDAlO1xcblxcblxcbn1cXG5cXG4jYWRkdGFza2ljb257XFxuXFxuICAgIGZpbGw6d2hpdGU7XFxuICAgXFxuXFxuXFxuXFxufVxcblxcbiNhZGRUYXNrOmhvdmVye1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY1Njc4O1xcblxcblxcbn1cXG4jZGlhbG9nQ3JlYXRlUHJvamVjdHtcXG5cXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjYyYzM2O1xcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICB3aWR0aDogMjUxcHg7XFxucGFkZGluZzogMjBweDtcXG5tYXJnaW4tdG9wOiAzNzlweDtcXG5cXG59XFxuI21lc3NhZ2VCb3hkaXZ7XFxuXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIHBhZGRpbmc6IDE1cHg7XFxuICAgIGdhcDo2cHg7XFxuICAgIFxcbiAgIFxcbn1cXG5cXG4jbWVzc2FnZUJveGRpdiBidXR0b257XFxuXFxuICAgIHdpZHRoOiA3OHB4O1xcbiAgICBoZWlnaHQ6IDI2cHg7XFxuYm9yZGVyOiBub25lO1xcbm91dGxpbmU6bm9uZTtcXG5jb2xvcjp3aGl0ZTtcXG5cXG59XFxuXFxuI21lc3NhZ2VCb3hkaXYgYnV0dG9uOmZpcnN0LWNoaWxke1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjUzYjMwO1xcbn1cXG5cXG4jbWVzc2FnZUJveGRpdiBidXR0b246bGFzdC1jaGlsZHtcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJhYTMxZjtcXG59XFxuXFxuI21lc3NhZ2VCb3hkaXYgaW5wdXR7XFxuXFxuICAgIHBhZGRpbmc6IDRweCAxMnB4O1xcbiAgICBib3JkZXItcmFkaXVzOjRweCA7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgb3V0bGluZTogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0UzRTNFMztcXG5cXG59XFxuI21lc3NhZ2VCb3hkaXYgaW5wdXQ6YWN0aXZle1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxufVxcbiNtZXNzYWdlQm94ZGl2IGRpdntcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOjhweDtcXG5cXG5cXG59XFxuXFxuXFxuICBcXG50ZXh0YXJlYSB7XFxuICAgIHJlc2l6ZTogbm9uZTtcXG4gIH1cXG4gI2RpYWxvZ1Rhc2t7XFxuXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgdG9wOjI3JTtcXG4gICAgbGVmdDo0MCU7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgb3V0bGluZTpub25lO1xcbiAgICB3aWR0aDogMjkxcHg7XFxuICAgIGhlaWdodDogMzU1cHg7XFxuICAgIHBhZGRpbmc6IDEzcHg7XFxuICAgYm9yZGVyLXJhZGl1czogMTJweDtcXG4gICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjYyYzM2O1xcbiAgIGNvbG9yOndoaXRlXFxuXFxuIH1cXG4gI2RpYWxvZ1Rhc2sgaW5wdXQsICNkaWFsb2dUYXNrIHRleHRhcmVhe1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjhjMGNjO1xcbiB9IFxcblxcbiAgZGlhbG9nOjpiYWNrZHJvcCB7XFxuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cig1cHgpO1xcbiAgfVxcbiAgI2J1dHRvbkhvbGRlcntcXG5cXG5kaXNwbGF5OiBmbGV4O1xcbmdhcDogOHB4O1xcbmp1c3RpZnktY29udGVudDogZW5kO1xcbmhlaWdodDogMzBweDtcXG5wYWRkaW5nOiAwcHggMTBweDtcXG4gIH1cXG5cXG4gICNidXR0b25Ib2xkZXIgYnV0dG9ue1xcblxcbiAgICB3aWR0aDogMTMwcHg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgb3V0bGluZTpub25lO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuXFxuICB9XFxuXFxuICAjYnV0dG9uSG9sZGVyIGJ1dHRvbjpsYXN0LWNoaWxke1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmFhMzFmO1xcbiAgICBcXG5cXG4gIH1cXG5cXG4gICNidXR0b25Ib2xkZXIgYnV0dG9uOmZpcnN0LWNoaWxke1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjUzYjMwO1xcblxcbiAgfVxcblxcbiAgI2J1dHRvbkhvbGRlciBidXR0b246aG92ZXIsI21lc3NhZ2VCb3hkaXYgYnV0dG9uOmhvdmVye1xcblxcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyOiAycHggc29saWQgI2I4YzBjYztcXG5cXG5cXG4gIH1cXG5cXG4gIFxcblxcbiAgI3Byb2plY3RzU2VjdGlvbntcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIFxcbiAgICBcXG4gICAgbWFyZ2luLXRvcDotMTRweDtcXG4gICAgbWFyZ2luLWxlZnQ6IDIwJTtcXG4gICAgXFxuXFxuXFxuICB9XFxuICAjcHJvamVjdHNTZWN0aW9uIGJ1dHRvbntcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgd2lkdGg6IDE1MHB4O1xcbiAgICBoZWlnaHQ6IDMwcHg7XFxuICAgIGNvbG9yOiM4Mjg0ODk7XFxuICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgICBib3JkZXItcmFkaXVzOiA3cHg7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcXG5cXG4gIH1cXG4gICNwcm9qZWN0c1NlY3Rpb24gYnV0dG9uOmhvdmVye1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZjM5O1xcblxcblxcblxcbiAgfVxcbiAgI2NvbnRlbnRUb2JlVXBkYXRlZHtcXG5cXG4gICAgLyogYm9yZGVyOiBzb2xpZCAzcHggcmVkOyAqL1xcbiAgIFxcbiAgICBncmlkLWNvbHVtbjogMi8tMTtcXG4gICAgZ3JpZC1yb3c6IDIvLTE7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcblxcblxcblxcbiAgfVxcbiAgI3N0YXRpc3RpY3NIb2xkZXJib3h7XFxuXFxuICAgIFxcbiAgICBoZWlnaHQ6IDEwMHB4O1xcbiAgICBtYXJnaW46IDIwcHggMHB4IDBweCAxMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6IDc2cHg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgfVxcblxcbiAgI2luZm9ybWF0aW9uT2ZQcm9qZWN0c0hvbGRlcntcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG5cXG5cXG5cXG4gIH1cXG4gICNpbmZvcm1hdGlvbk9mUHJvamVjdHNIb2xkZXIgcDpmaXJzdC1jaGlsZCwjVGFza051bWJlciwjY29tcGxldGVkTnVtYmVye1xcblxcbiAgICBmb250LXNpemU6IDM0cHg7XFxuXFxuXFxuICB9XFxuICAjc3RhdGlzdGljc0hvbGRlcmJveD5kaXZ7XFxuXFxuZGlzcGxheTogZmxleDtcXG5cXG53aWR0aDogMzAwcHg7XFxuaGVpZ2h0OiBpbmhlcml0O1xcbnBhZGRpbmc6IDE1cHg7XFxuYm9yZGVyLXJhZGl1czogOHB4O1xcbmp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcbmJhY2tncm91bmQtY29sb3I6ICMxNjFhMjM7XFxuXFxuXFxuIH1cXG4gI3Byb2plY3RzQmFja2Ryb3AsI3Rhc2tzQmFja2Ryb3AsI2NvbXBsZXRlZEJhY2tkcm9we1xcblxcbm9wYWNpdHk6IDE1JTtcXG5ib3JkZXItcmFkaXVzOjEwMCUgO1xcbndpZHRoOiA2MHB4O1xcbmhlaWdodDogNjBweDtcXG5cXG5cXG5cXG5cXG5cXG5cXG4gfVxcbiAjcHJvamVjdHNCYWNrZHJvcHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhODAzZTQ7XFxuXFxuXFxuIH1cXG4gI3Rhc2tzQmFja2Ryb3B7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiNGMzlDMTIgO1xcbiB9XFxuXFxuICNjb21wbGV0ZWRCYWNrZHJvcHtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6ICMyN0FFNjA7XFxuXFxuIH1cXG4gXFxuICNpY29uRGl2e1xcblxcbmRpc3BsYXk6IGZsZXg7XFxuanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFxuXFxuIH1cXG4gI2ljb25EaXYgaW1ne1xcbiAgd2lkdGg6MzJweDtcXG4gIGhlaWdodDozMHB4OyBcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5sZWZ0OiA0NnB4O1xcbnRvcDoxNXB4XFxuIH1cXG5cXG4jVGFza0JveHtcXG4gIG1hcmdpbi10b3A6MTJweDtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLDFmcik7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgzLDEyMHB4KTtcXG4gIGdyaWQtYXV0by1jb2x1bW5zOiAxZnI7XFxuICBncmlkLWF1dG8tcm93czoxMjBweDtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIHBhZGRpbmc6IDBweCAzN3B4O1xcbiAgZ2FwOiAxMnB4O1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxufVxcbiNUYXNrRGl2e1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjojMTYxYTIzIDtcXG4gcGFkZGluZzogMTJweDtcXG4gZGlzcGxheTogZmxleDtcXG4gZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gZ2FwOiA0cHg7XFxuIGJvcmRlci1yYWRpdXM6IDEycHg7XFxuXFxufVxcblxcbiNkYXlzUmVtYWluaW5ne1xcblxcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgY29sb3I6ICM2NjY2NjY7XFxuICBsZXR0ZXItc3BhY2luZzogMXB4O1xcbiAgd2lkdGg6IDczcHg7XFxuXFxuXFxufVxcblxcbiNUYXNrVGl0bGV7XFxuXFxuZm9udC13ZWlnaHQ6IGJvbGQ7XFxuXFxuXFxufVxcblxcbiNleHBsYWluYXRpb25UYXNre1xcblxcbmZvbnQtc3R5bGU6IGl0YWxpYztcXG5mb250LXNpemU6IDE0cHg7XFxuZm9udC13ZWlnaHQ6IDEwMDtcXG5jb2xvcjogIzY2NjY2NjtcXG5cXG5cXG59XFxuXFxuI2J1dHRvbnNNYW5pcHVsYXRpb25EaXZ7XFxuXFxuZGlzcGxheTogZmxleDtcXG5nYXA6NnB4O1xcbmp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxuXFxufVxcbiNidXR0b25zTWFuaXB1bGF0aW9uRGl2IGJ1dHRvbntcXG5cXG4gIHdpZHRoOiA3MXB4O1xcbiAgaGVpZ2h0OiAyN3B4O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcblxcbn1cXG5cXG4jYnV0dG9uc01hbmlwdWxhdGlvbkRpdiBidXR0b246Zmlyc3QtY2hpbGR7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiAjRjM5QzEyO1xcbiAgYm9yZGVyOiBzb2xpZCAycHggI0YzOUMxMjtcXG4gIGJvcmRlci1yYWRpdXM6IDM0cHg7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuXFxuXFxufVxcbiNidXR0b25zTWFuaXB1bGF0aW9uRGl2IGJ1dHRvbjpudGgtY2hpbGQoMil7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiMzNzU0REI7XFxuICBjb2xvcjogd2hpdGU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcblxcblxcblxcbn1cXG4jYnV0dG9uc01hbmlwdWxhdGlvbkRpdiBidXR0b246bnRoLWNoaWxkKDMpe1xcbmJhY2tncm91bmQtY29sb3I6IHJnYigxMDIsIDMzLCAzMyk7XFxuY29sb3I6IHdoaXRlO1xcbmJvcmRlcjogbm9uZTtcXG5vdXRsaW5lOiBub25lO1xcblxcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJde1xcblxcbiAgd2lkdGg6IDI4cHg7XFxuICBoZWlnaHQ6IDI4cHg7XFxuXFxuICAvKiBiYWNrZ3JvdW5kOiAgKi9cXG4gIGFwcGVhcmFuY2U6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lO1xcbiAgYm9yZGVyOiAycHggI2NlZDRkYSBzb2xpZDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gXFxufVxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06Y2hlY2tlZHtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6ICMyN0FFNjA7XFxuICBib3JkZXI6IG5vbmU7XFxuICBcXG5cXG5cXG59XFxuI2RhdGVEaXZ7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiAzODdweDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcblxcbn1cXG5cXG4jZGF0ZURpdiBidXR0b257XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIFxcbiAgYm9yZGVyOiBub25lO1xcblxcbn1cXG4jaG9sZGVyZm9yRGF0ZXN7XFxuXFxuICBcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIC8qIGJvcmRlcjogMnB4IHNvbGlkIHJlZDsgKi9cXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcblxcbn1cXG5cXG4jaG9sZGVyZm9yRGF0ZXM+ZGl2e1xcblxcbiAgZmxleC1ncm93OiAxO1xcblxcbiAgLyogYm9yZGVyOiBzb2xpZCBibHVlIDJweDsgKi9cXG4gIG92ZXJmbG93OiBhdXRvO1xcblxcblxcbn1cXG4jVG9kYXlCb3gsI3RvbW9ycm93Qm94e1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBwYWRkaW5nOiAxMnB4O1xcblxcblxcbn1cXG4jVG9kYXlCb3g+ZGl2LCN0b21vcnJvd0JveD5kaXZ7XFxuXFxuICAvKiBib3JkZXI6IDJweCBzb2xpZCB5ZWxsb3c7ICovXFxuZmxleC1ncm93OiAxO1xcblxcbn1cXG5cXG4jVG9kYXlCb3g+cCwjdG9tb3Jyb3dCb3g+cHtcXG5mb250LXdlaWdodDogYm9sZDtcXG4gIFxcbn1cXG4jdGFza0JveFRvZGF5LCN0YXNrQm94dG9tb3Jyb3d7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwxZnIpO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMiwxMjBweCk7XFxuICBncmlkLWF1dG8tY29sdW1uczogMWZyO1xcbiAgZ3JpZC1hdXRvLXJvd3M6MTIwcHg7XFxucGFkZGluZzogMTNweDtcXG5nYXA6IDEycHg7XFxucGFkZGluZzogMHB4IDM3cHg7XFxubWFyZ2luLXRvcDogMTZweDtcXG5cXG5cXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpO1xuXG4gIC8vIENsb25lIHRoZSBkYXRlXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZihhcmd1bWVudCkgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNzdHJpbmctYXJndW1lbnRzXCIpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IGFkZERheXMgZnJvbSBcIi4uL2FkZERheXMvaW5kZXguanNcIjtcbmltcG9ydCBhZGRNb250aHMgZnJvbSBcIi4uL2FkZE1vbnRocy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIHllYXJzLCBtb250aHMsIHdlZWtzLCBkYXlzLCBob3VycywgbWludXRlcyBhbmQgc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIHllYXJzLCBtb250aHMsIHdlZWtzLCBkYXlzLCBob3VycywgbWludXRlcyBhbmQgc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtEdXJhdGlvbn0gZHVyYXRpb24gLSB0aGUgb2JqZWN0IHdpdGggeWVhcnMsIG1vbnRocywgd2Vla3MsIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKlxuICogfCBLZXkgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB5ZWFycyAgICAgICAgICB8IEFtb3VudCBvZiB5ZWFycyB0byBiZSBhZGRlZCAgICAgICAgfFxuICogfCBtb250aHMgICAgICAgICB8IEFtb3VudCBvZiBtb250aHMgdG8gYmUgYWRkZWQgICAgICAgfFxuICogfCB3ZWVrcyAgICAgICAgICB8IEFtb3VudCBvZiB3ZWVrcyB0byBiZSBhZGRlZCAgICAgICAgfFxuICogfCBkYXlzICAgICAgICAgICB8IEFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkICAgICAgICAgfFxuICogfCBob3VycyAgICAgICAgICB8IEFtb3VudCBvZiBob3VycyB0byBiZSBhZGRlZCAgICAgICAgfFxuICogfCBtaW51dGVzICAgICAgICB8IEFtb3VudCBvZiBtaW51dGVzIHRvIGJlIGFkZGVkICAgICAgfFxuICogfCBzZWNvbmRzICAgICAgICB8IEFtb3VudCBvZiBzZWNvbmRzIHRvIGJlIGFkZGVkICAgICAgfFxuICpcbiAqIEFsbCB2YWx1ZXMgZGVmYXVsdCB0byAwXG4gKlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCB0aGUgZm9sbG93aW5nIGR1cmF0aW9uIHRvIDEgU2VwdGVtYmVyIDIwMTQsIDEwOjE5OjUwXG4gKiBjb25zdCByZXN1bHQgPSBhZGQobmV3IERhdGUoMjAxNCwgOCwgMSwgMTAsIDE5LCA1MCksIHtcbiAqICAgeWVhcnM6IDIsXG4gKiAgIG1vbnRoczogOSxcbiAqICAgd2Vla3M6IDEsXG4gKiAgIGRheXM6IDcsXG4gKiAgIGhvdXJzOiA1LFxuICogICBtaW51dGVzOiA5LFxuICogICBzZWNvbmRzOiAzMCxcbiAqIH0pXG4gKiAvLz0+IFRodSBKdW4gMTUgMjAxNyAxNToyOToyMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGQoZGlydHlEYXRlLCBkdXJhdGlvbikge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgaWYgKCFkdXJhdGlvbiB8fCBfdHlwZW9mKGR1cmF0aW9uKSAhPT0gJ29iamVjdCcpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgeWVhcnMgPSBkdXJhdGlvbi55ZWFycyA/IHRvSW50ZWdlcihkdXJhdGlvbi55ZWFycykgOiAwO1xuICB2YXIgbW9udGhzID0gZHVyYXRpb24ubW9udGhzID8gdG9JbnRlZ2VyKGR1cmF0aW9uLm1vbnRocykgOiAwO1xuICB2YXIgd2Vla3MgPSBkdXJhdGlvbi53ZWVrcyA/IHRvSW50ZWdlcihkdXJhdGlvbi53ZWVrcykgOiAwO1xuICB2YXIgZGF5cyA9IGR1cmF0aW9uLmRheXMgPyB0b0ludGVnZXIoZHVyYXRpb24uZGF5cykgOiAwO1xuICB2YXIgaG91cnMgPSBkdXJhdGlvbi5ob3VycyA/IHRvSW50ZWdlcihkdXJhdGlvbi5ob3VycykgOiAwO1xuICB2YXIgbWludXRlcyA9IGR1cmF0aW9uLm1pbnV0ZXMgPyB0b0ludGVnZXIoZHVyYXRpb24ubWludXRlcykgOiAwO1xuICB2YXIgc2Vjb25kcyA9IGR1cmF0aW9uLnNlY29uZHMgPyB0b0ludGVnZXIoZHVyYXRpb24uc2Vjb25kcykgOiAwO1xuXG4gIC8vIEFkZCB5ZWFycyBhbmQgbW9udGhzXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlV2l0aE1vbnRocyA9IG1vbnRocyB8fCB5ZWFycyA/IGFkZE1vbnRocyhkYXRlLCBtb250aHMgKyB5ZWFycyAqIDEyKSA6IGRhdGU7XG5cbiAgLy8gQWRkIHdlZWtzIGFuZCBkYXlzXG4gIHZhciBkYXRlV2l0aERheXMgPSBkYXlzIHx8IHdlZWtzID8gYWRkRGF5cyhkYXRlV2l0aE1vbnRocywgZGF5cyArIHdlZWtzICogNykgOiBkYXRlV2l0aE1vbnRocztcblxuICAvLyBBZGQgZGF5cywgaG91cnMsIG1pbnV0ZXMgYW5kIHNlY29uZHNcbiAgdmFyIG1pbnV0ZXNUb0FkZCA9IG1pbnV0ZXMgKyBob3VycyAqIDYwO1xuICB2YXIgc2Vjb25kc1RvQWRkID0gc2Vjb25kcyArIG1pbnV0ZXNUb0FkZCAqIDYwO1xuICB2YXIgbXNUb0FkZCA9IHNlY29uZHNUb0FkZCAqIDEwMDA7XG4gIHZhciBmaW5hbERhdGUgPSBuZXcgRGF0ZShkYXRlV2l0aERheXMuZ2V0VGltZSgpICsgbXNUb0FkZCk7XG4gIHJldHVybiBmaW5hbERhdGU7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTW9udGhzXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbnRocyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtb250aHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1vbnRocyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtb250aHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDUgbW9udGhzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNb250aHMobmV3IERhdGUoMjAxNCwgOCwgMSksIDUpXG4gKiAvLz0+IFN1biBGZWIgMDEgMjAxNSAwMDowMDowMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNb250aHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIGlmIChpc05hTihhbW91bnQpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIG1vbnRocywgbm8tb3AgdG8gYXZvaWQgY2hhbmdpbmcgdGltZXMgaW4gdGhlIGhvdXIgYmVmb3JlIGVuZCBvZiBEU1RcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICB2YXIgZGF5T2ZNb250aCA9IGRhdGUuZ2V0RGF0ZSgpO1xuXG4gIC8vIFRoZSBKUyBEYXRlIG9iamVjdCBzdXBwb3J0cyBkYXRlIG1hdGggYnkgYWNjZXB0aW5nIG91dC1vZi1ib3VuZHMgdmFsdWVzIGZvclxuICAvLyBtb250aCwgZGF5LCBldGMuIEZvciBleGFtcGxlLCBuZXcgRGF0ZSgyMDIwLCAwLCAwKSByZXR1cm5zIDMxIERlYyAyMDE5IGFuZFxuICAvLyBuZXcgRGF0ZSgyMDIwLCAxMywgMSkgcmV0dXJucyAxIEZlYiAyMDIxLiAgVGhpcyBpcyAqYWxtb3N0KiB0aGUgYmVoYXZpb3Igd2VcbiAgLy8gd2FudCBleGNlcHQgdGhhdCBkYXRlcyB3aWxsIHdyYXAgYXJvdW5kIHRoZSBlbmQgb2YgYSBtb250aCwgbWVhbmluZyB0aGF0XG4gIC8vIG5ldyBEYXRlKDIwMjAsIDEzLCAzMSkgd2lsbCByZXR1cm4gMyBNYXIgMjAyMSBub3QgMjggRmViIDIwMjEgYXMgZGVzaXJlZC4gU29cbiAgLy8gd2UnbGwgZGVmYXVsdCB0byB0aGUgZW5kIG9mIHRoZSBkZXNpcmVkIG1vbnRoIGJ5IGFkZGluZyAxIHRvIHRoZSBkZXNpcmVkXG4gIC8vIG1vbnRoIGFuZCB1c2luZyBhIGRhdGUgb2YgMCB0byBiYWNrIHVwIG9uZSBkYXkgdG8gdGhlIGVuZCBvZiB0aGUgZGVzaXJlZFxuICAvLyBtb250aC5cbiAgdmFyIGVuZE9mRGVzaXJlZE1vbnRoID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICBlbmRPZkRlc2lyZWRNb250aC5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBhbW91bnQgKyAxLCAwKTtcbiAgdmFyIGRheXNJbk1vbnRoID0gZW5kT2ZEZXNpcmVkTW9udGguZ2V0RGF0ZSgpO1xuICBpZiAoZGF5T2ZNb250aCA+PSBkYXlzSW5Nb250aCkge1xuICAgIC8vIElmIHdlJ3JlIGFscmVhZHkgYXQgdGhlIGVuZCBvZiB0aGUgbW9udGgsIHRoZW4gdGhpcyBpcyB0aGUgY29ycmVjdCBkYXRlXG4gICAgLy8gYW5kIHdlJ3JlIGRvbmUuXG4gICAgcmV0dXJuIGVuZE9mRGVzaXJlZE1vbnRoO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSwgd2Ugbm93IGtub3cgdGhhdCBzZXR0aW5nIHRoZSBvcmlnaW5hbCBkYXktb2YtbW9udGggdmFsdWUgd29uJ3RcbiAgICAvLyBjYXVzZSBhbiBvdmVyZmxvdywgc28gc2V0IHRoZSBkZXNpcmVkIGRheS1vZi1tb250aC4gTm90ZSB0aGF0IHdlIGNhbid0XG4gICAgLy8ganVzdCBzZXQgdGhlIGRhdGUgb2YgYGVuZE9mRGVzaXJlZE1vbnRoYCBiZWNhdXNlIHRoYXQgb2JqZWN0IG1heSBoYXZlIGhhZFxuICAgIC8vIGl0cyB0aW1lIGNoYW5nZWQgaW4gdGhlIHVudXN1YWwgY2FzZSB3aGVyZSB3aGVyZSBhIERTVCB0cmFuc2l0aW9uIHdhcyBvblxuICAgIC8vIHRoZSBsYXN0IGRheSBvZiB0aGUgbW9udGggYW5kIGl0cyBsb2NhbCB0aW1lIHdhcyBpbiB0aGUgaG91ciBza2lwcGVkIG9yXG4gICAgLy8gcmVwZWF0ZWQgbmV4dCB0byBhIERTVCB0cmFuc2l0aW9uLiAgU28gd2UgdXNlIGBkYXRlYCBpbnN0ZWFkIHdoaWNoIGlzXG4gICAgLy8gZ3VhcmFudGVlZCB0byBzdGlsbCBoYXZlIHRoZSBvcmlnaW5hbCB0aW1lLlxuICAgIGRhdGUuc2V0RnVsbFllYXIoZW5kT2ZEZXNpcmVkTW9udGguZ2V0RnVsbFllYXIoKSwgZW5kT2ZEZXNpcmVkTW9udGguZ2V0TW9udGgoKSwgZGF5T2ZNb250aCk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGREYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIGRheXMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSAtIHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBkYXlzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IC0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDEwIGRheXMgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZERheXMobmV3IERhdGUoMjAxNCwgOCwgMSksIDEwKVxuICogLy89PiBUaHUgU2VwIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRGF5cyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgaWYgKGlzTmFOKGFtb3VudCkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuICBpZiAoIWFtb3VudCkge1xuICAgIC8vIElmIDAgZGF5cywgbm8tb3AgdG8gYXZvaWQgY2hhbmdpbmcgdGltZXMgaW4gdGhlIGhvdXIgYmVmb3JlIGVuZCBvZiBEU1RcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBhbW91bnQpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgeyBtb3ZpbmdUYXNrcyB9IGZyb20gXCIuL0RvbS5qc1wiO1xuaW1wb3J0IGFkZCBmcm9tIFwiZGF0ZS1mbnMvYWRkXCI7XG5leHBvcnQgbGV0IGFsbE1hdGVyaWFscz0oKCk9PntcblxuICAgIGxldCBhbGxQcm9qZWN0cz1bXTtcbiAgICBsZXQgYWxsVGFza3M9W107XG4gIFxuXG5cbnJldHVybiB7YWxsUHJvamVjdHMsYWxsVGFza3N9XG5cbn0pKClcblxuXG5leHBvcnQgbGV0IFByb2plY3RNYW5hZ2VtZW50PSgoKT0+e1xuXG4gICAgY2xhc3MgY3JlYXRlUHJvamVjdHtcblxuICAgICAgICBjb25zdHJ1Y3Rvcihwcm9qZWN0VGl0bGUpe1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0VGl0bGU9cHJvamVjdFRpdGxlO1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0TGlzdD1bXTtcbiAgICAgICAgICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUb0FsbFByb2plY3RzKE5ld1Byb2plY3QpIHtcbiAgICAgICAgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW2FsbE1hdGVyaWFscy5hbGxQcm9qZWN0cy5sZW5ndGhdPU5ld1Byb2plY3Q7XG4gICAgICAgIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIEZpbmRQcm9qZWN0KFByb2plY3ROYW1lKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIFxuICAgICAgICBpZihQcm9qZWN0TmFtZT09PWFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tpXS5wcm9qZWN0TmFtZSlcbiAgICAgXG4gICAgICBcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm5cbiAgICAgfVxuXG5cblxucmV0dXJue0ZpbmRQcm9qZWN0LGNyZWF0ZVByb2plY3QsYWRkVG9BbGxQcm9qZWN0c31cblxuXG59KSgpIFxuXG5cbmV4cG9ydCBsZXQgVGFza01hbmFnZW1lbnQ9KCgpPT57XG5cbiAgICBjbGFzcyBjcmVhdGVUYXNre1xuXG5cbiAgICAgICAgY29uc3RydWN0b3IodGl0bGUsZGVzY3JpcHRpb24sZGF0ZSxwcmlvcml0eSxzdGF0dXM9XCJ1bmRvbmVcIixwcm9qZWN0QmVsb25nPVwiXCIpe1xuICAgIFxuICAgICAgICAgICAgdGhpcy50aXRsZT10aXRsZTtcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb249ZGVzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLmRhdGU9ZGF0ZTtcbiAgICAgICAgICAgIHRoaXMucHJpb3JpdHk9cHJpb3JpdHk7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cz1zdGF0dXM7XG4gICAgICAgICAgICB0aGlzLlByb2plY3Q9cHJvamVjdEJlbG9uZ1xuICAgIFxuICAgIFxuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgfVxuXG4gICBcblxuICAgIGZ1bmN0aW9uIGZpbmRpbmdUYXNrKHt0aXRsZSxkZXNjcmlwdGlvbn0pe1xuXG4gICBcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICBcbiAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tpXVtcInByb2plY3RMaXN0XCJdLmxlbmd0aDsgeCsrKSB7XG4gICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgaWYodGl0bGU9PT1hbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaV1bXCJwcm9qZWN0TGlzdFwiXVt4XVtcInRpdGxlXCJdJiZkZXNjcmlwdGlvbj09PWFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tpXVtcInByb2plY3RMaXN0XCJdW3hdW1wiZGVzY3JpcHRpb25cIl0pe1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZm91bmRcIix4LGksYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW2ldW1wicHJvamVjdExpc3RcIl1beF1bXCJ0aXRsZVwiXSk7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtpLHh9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIFxuICAgIFxuICAgIH1cbiAgICBsZXQgcHJvamVjdFBvcz17XG4gICAgICAgIHBvc2l0aW9uOjBcbiAgICB9XG4gICBmdW5jdGlvbiBhZGRUYXNrdG9Qcm9qZWN0KHRhc2sscHJvamVjdD1hbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbcHJvamVjdFBvcy5wb3NpdGlvbl0ucHJvamVjdExpc3Qpe1xuXG4gICAgICAgIHByb2plY3RbcHJvamVjdC5sZW5ndGhdPXRhc2s7XG4gICAgICAgIC8vIGFsbE1hdGVyaWFscy5hbGxUYXNrc1thbGxNYXRlcmlhbHMuYWxsVGFza3MubGVuZ3RoXT10YXNrO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgfVxuZnVuY3Rpb24gYWRkaW5nVG9hbGxUYXNrcygpIHtcbmFsbE1hdGVyaWFscy5hbGxUYXNrcy5zcGxpY2UoMCxhbGxNYXRlcmlhbHMuYWxsVGFza3MubGVuZ3RoKVxuXG5cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaW5kZXhdLnByb2plY3RMaXN0Lmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaW5kZXhdLnByb2plY3RMaXN0LGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0cy5sZW5ndGgpXG4gICAgICAgICAgICBhbGxNYXRlcmlhbHMuYWxsVGFza3NbYWxsTWF0ZXJpYWxzLmFsbFRhc2tzLmxlbmd0aF09YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW2luZGV4XS5wcm9qZWN0TGlzdFt4XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbn1cblxuXG5yZXR1cm4ge2NyZWF0ZVRhc2ssZmluZGluZ1Rhc2ssYWRkVGFza3RvUHJvamVjdCxwcm9qZWN0UG9zLGFkZGluZ1RvYWxsVGFza3N9XG5cblxufSkoKVxuXG5cbi8vdGhlIGFycnlzIHNob3VsZCBoYXZlIGEgbmFtZSBhbmQgdGhlIHRhc2tzIHNob3VsZCBrbm93IHdoZXJlIHRoZXkgYmVsb25nIHRvXG5cbmZ1bmN0aW9uIHBsYWNlVGFza2luQWxsVGFza3MoKSB7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0cy5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDxhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbXCJwcm9qZWN0TGlzdFwiXS5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgYWxsTWF0ZXJpYWxzLmFsbFRhc2tzW2ldPWFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tcInByb2plY3RMaXN0XCJdW3hdXG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5leHBvcnQgbGV0IGFtb3VudG9mQ29tcGxldGVkVGFza3M9KCgpPT57XG5cbiAgICBmdW5jdGlvbiBjb3VudENvbXBsZXRlZFRhc2tzKCkge1xuICAgICAgICBsZXQgY291bnRlcj0wO1xuICAgICAgICBcbiAgICAgICAgIGFsbE1hdGVyaWFscy5hbGxUYXNrcy5mb3JFYWNoKHRhc2s9PntcblxuICAgICAgICAgICAgaWYodGFzay5zdGF0dXM9PVwiZG9uZVwiKXtcbiAgICAgICAgICAgICAgICBjb3VudGVyKytcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgfSkgXG4gICAgICAgICAgIFxuICAgICAgY29uc29sZS5sb2coXCJoZXJlXCIsYWxsTWF0ZXJpYWxzLmFsbFRhc2tzKSAgICAgIFxuICAgICAgICBcbiAgICAgcmV0dXJuIGNvdW50ZXI7ICAgXG4gICAgfVxuXG5cbnJldHVybiB7Y291bnRDb21wbGV0ZWRUYXNrc307XG59KSgpXG5cbmV4cG9ydCBsZXQgYXJyYW5nZURhdGVzPSgoKT0+e1xuXG4gICAgZnVuY3Rpb24gdG9kYXlEYXRlcygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxNYXRlcmlhbHMuYWxsVGFza3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBkYXRlT2Z0YXNrPW5ldyBEYXRlKCBhbGxNYXRlcmlhbHMuYWxsVGFza3NbaV0uZGF0ZSkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gICAgICAgICAgICBsZXQgdG9kYXkgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApXG5cbiAgICAgICAgICAgXG4gICAgICAgICAgICBpZihkYXRlT2Z0YXNrPT09dG9kYXkpe1xuICAgICAgICAgICAgICAgIG1vdmluZ1Rhc2tzLnRhc2tjYXJkcyhhbGxNYXRlcmlhbHMuYWxsVGFza3NbaV0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBUb21vcnJvd0RhdGVzKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbE1hdGVyaWFscy5hbGxUYXNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGRhdGVPZnRhc2s9bmV3IERhdGUoIGFsbE1hdGVyaWFscy5hbGxUYXNrc1tpXS5kYXRlKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgICAgIGxldCBUb21vcnJvdyA9IGFkZChuZXcgRGF0ZSgpLHtkYXlzOjF9KS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKVxuXG4gICAgICAgICAgIFxuICAgICAgICAgICAgaWYoZGF0ZU9mdGFzaz09PVRvbW9ycm93KXtcbiAgICAgICAgICAgICAgICBtb3ZpbmdUYXNrcy50YXNrY2FyZHMoYWxsTWF0ZXJpYWxzLmFsbFRhc2tzW2ldLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YXNrQm94VG9kYXknKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFEYXlhZnRlcigpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxNYXRlcmlhbHMuYWxsVGFza3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBkYXRlT2Z0YXNrPW5ldyBEYXRlKCBhbGxNYXRlcmlhbHMuYWxsVGFza3NbaV0uZGF0ZSkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gICAgICAgICAgICBsZXQgYURheWFmdGVyID0gYWRkKG5ldyBEYXRlKCkse2RheXM6Mn0pLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApXG5cbiAgICAgICAgICAgXG4gICAgICAgICAgICBpZihkYXRlT2Z0YXNrPT09YURheWFmdGVyKXtcbiAgICAgICAgICAgICAgICBtb3ZpbmdUYXNrcy50YXNrY2FyZHMoYWxsTWF0ZXJpYWxzLmFsbFRhc2tzW2ldLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YXNrQm94dG9tb3Jyb3cnKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG5cblxucmV0dXJuIHt0b2RheURhdGVzLFRvbW9ycm93RGF0ZXMsYURheWFmdGVyfVxuXG59KSgpXG5cblxuLy9jcmVhdGluZyBkZWZhdWx0IFxuZXhwb3J0IGxldCBzcGFjZVRyYXZlbHM9bmV3IFByb2plY3RNYW5hZ2VtZW50LmNyZWF0ZVByb2plY3QoXCJzcGFjZSB0cmlwXCIpO1xuUHJvamVjdE1hbmFnZW1lbnQuYWRkVG9BbGxQcm9qZWN0cyhzcGFjZVRyYXZlbHMpO1xuIiwiXG5pbXBvcnQgeyBhbGxNYXRlcmlhbHMgfSBmcm9tIFwiLi9hZGRcIjtcbmltcG9ydCB7IHNwYWNlVHJhdmVscyB9IGZyb20gXCIuL2FkZC5qc1wiO1xuaW1wb3J0IHsgUHJvamVjdE1hbmFnZW1lbnQgfSBmcm9tIFwiLi9hZGRcIjtcbmltcG9ydCB7IHN0eWxpbmdTbGVsZWN0ZWRCdXR0b25zIH0gZnJvbSBcIi4vRG9tLmpzXCI7XG5pbXBvcnQgeyBtb3Zpbmdmcm9tT25lcHJvamVjdHRvYW5vdGhlciB9IGZyb20gXCIuL0RvbS5qc1wiO1xuaW1wb3J0IHsgcHJvamVjdEJ1dHRvbkFjdGlvbnNUb2dpdmVUYXNrcyB9IGZyb20gXCIuL0RvbS5qc1wiO1xuaW1wb3J0IHsgVGFza01hbmFnZW1lbnQgfSBmcm9tIFwiLi9hZGRcIjtcbmltcG9ydCB7IG5vdEhvbWVzZWN0aW9uIH0gZnJvbSBcIi4vRG9tLmpzXCI7XG5pbXBvcnQgeyBjb21wbGV0ZVRhc2sgfSBmcm9tIFwiLi9Eb20uanNcIjtcbmltcG9ydCB7IHN0cmlrZU91dGVmZmVjdCB9IGZyb20gXCIuL0RvbS5qc1wiO1xuaW1wb3J0IHsgZGVsZXRlaW5nVGFza3NvZnByb2plY3QgfSBmcm9tIFwiLi9Eb20uanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNoaWZ0UHJvamVjdChwb3NpdGlvbil7XG4gICAgLy8gICBjb25zb2xlLmxvZyhwb3NpdGlvbik7ICBcbiAgICAgIFRhc2tNYW5hZ2VtZW50LnByb2plY3RQb3MucG9zaXRpb249cG9zaXRpb247XG59XG5cbmV4cG9ydCBjbGFzcyBUYXNraW5lYWNocHJvamVjdHtcblxuXG4gICAgY29uc3RydWN0b3IocHJvamVjdEJ1dHRvbixpbmRleCl7XG4gICAgICAgIHRoaXMucHJvamVjdEJ1dHRvbj1wcm9qZWN0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIG5vdEhvbWVzZWN0aW9uKCk7XG4gICAgICAgICAgIHNoaWZ0UHJvamVjdChpbmRleClcbiAgICAgICAgLy8gICAgc3RyaWtlT3V0ZWZmZWN0LnN0cmlrZW91dFdvcmRzKCk7XG4gICAgICAgICAgIHN0eWxpbmdTbGVsZWN0ZWRCdXR0b25zLnJldHVybkFsbGJ1dHRvbnN0bHllc1RvZGVmYXVsdCgpO1xuICAgICAgICAgICBzdHlsaW5nU2xlbGVjdGVkQnV0dG9ucy5tYWtpbmdUaGVCdXR0b25HbG93KHByb2plY3RCdXR0b24pO1xuICAgICAgICAgICBtb3Zpbmdmcm9tT25lcHJvamVjdHRvYW5vdGhlci5yZWZyZXNoVGFza0JveCgpO1xuICAgICAgICAgICBwcm9qZWN0QnV0dG9uQWN0aW9uc1RvZ2l2ZVRhc2tzLmNyZWF0ZVRhc2tCb3hmb3JQcm9qZWN0KCk7XG4gICAgICAgICAgIHByb2plY3RCdXR0b25BY3Rpb25zVG9naXZlVGFza3MubmF2aWdhdGluZ1RoZVByb2plY3RBbmRHaXZpbmdUYXNrcyhpbmRleCk7XG4gICAgICAgICAgIGNvbXBsZXRlVGFzay5tYW5hZ2VDaGVja2JveCgpO1xuICAgICAgICAgICBkZWxldGVpbmdUYXNrc29mcHJvamVjdC5idXR0b25NYW5hZ2VyKClcbiAgICAgICAgICAgXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICBcblxuXG4gICAgfVxuXG4gXG4gIFxufVxuXG4vL2ltcG9ydCBjbGFzcyBhbmQgbWFrZSBkZWZhdWx0IHRoYXRcblxuXG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJ2YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0T3B0aW9ucygpIHtcbiAgcmV0dXJuIGRlZmF1bHRPcHRpb25zO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHRPcHRpb25zKG5ld09wdGlvbnMpIHtcbiAgZGVmYXVsdE9wdGlvbnMgPSBuZXdPcHRpb25zO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkZmlyc3RXZWVrQ29uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmlyc3RXZWVrQ29uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmaXJzdFdlZWtDb24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMSk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgb3B0aW9ucyk7XG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwID8gJy0nIDogJyc7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCk7XG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufSIsImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIHkoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcblxuICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRva2VuID09PSAneXknID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0VVRDSG91cnMoKSAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIGgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiBtKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gUyhkYXRlLCB0b2tlbikge1xuICAgIHZhciBudW1iZXJPZkRpZ2l0cyA9IHRva2VuLmxlbmd0aDtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB2YXIgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kcyAqIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0cyAtIDMpKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuaW1wb3J0IGxpZ2h0Rm9ybWF0dGVycyBmcm9tIFwiLi4vbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbn07XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiBHKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIFkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHNpZ25lZFdlZWtZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICB2YXIgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjtcblxuICAgIC8vIFR3byBkaWdpdCB5ZWFyXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfVxuXG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUGFkZGluZ1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIFIoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTtcblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiB1KGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIFEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSAnUVEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gcShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiBMKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiB3KGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIEkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIEQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiBFKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gZShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiBjKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gaShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiBiKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiBCKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiBIKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIEsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiBrKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIHMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gWChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24geChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIE8oZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIHooZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIHQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gVChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpO1xuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpO1xuXG4gIC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJ2YXIgZGF0ZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG52YXIgdGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn07XG52YXIgZGF0ZVRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcbiAgaWYgKCF0aW1lUGF0dGVybikge1xuICAgIHJldHVybiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKTtcbiAgfVxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gZGF0ZVRpbWVGb3JtYXQucmVwbGFjZSgne3tkYXRlfX0nLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpLnJlcGxhY2UoJ3t7dGltZX19JywgdGltZUxvbmdGb3JtYXR0ZXIodGltZVBhdHRlcm4sIGZvcm1hdExvbmcpKTtcbn07XG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcIikpO1xuICB9XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xudmFyIGZvcm1hdFJlbGF0aXZlID0gZnVuY3Rpb24gZm9ybWF0UmVsYXRpdmUodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0UmVsYXRpdmU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eUluZGV4LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIF93aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDtcbiAgICAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanNcIjtcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddXG59O1xuXG4vLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIGFyZ3VtZW50Q2FsbGJhY2socXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUGF0dGVybnMgPSB3aWR0aCAmJiBhcmdzLnBhcnNlUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MucGFyc2VQYXR0ZXJuc1thcmdzLmRlZmF1bHRQYXJzZVdpZHRoXTtcbiAgICB2YXIga2V5ID0gQXJyYXkuaXNBcnJheShwYXJzZVBhdHRlcm5zKSA/IGZpbmRJbmRleChwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KSA6IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSk7XG4gICAgdmFyIHZhbHVlO1xuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKGtleSkgOiBrZXk7XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgYXJyYXkubGVuZ3RoOyBrZXkrKykge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2sodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayhpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gXCIuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gXCIuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gXCIuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanNcIjtcbmltcG9ydCBsb2NhbGl6ZSBmcm9tIFwiLi9fbGliL2xvY2FsaXplL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4vX2xpYi9tYXRjaC9pbmRleC5qc1wiO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMCAvKiBTdW5kYXkgKi8sXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uLy4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdExvY2FsZTsiLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xuXG4vLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG5cbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfb3B0aW9ucyRsb2NhbGUsIF9yZWYyLCBfcmVmMywgX3JlZjQsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlMiwgX29wdGlvbnMkbG9jYWxlMiRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIsIF9yZWY1LCBfcmVmNiwgX3JlZjcsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlMywgX29wdGlvbnMkbG9jYWxlMyRvcHRpLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0O1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBsb2NhbGUgPSAoX3JlZiA9IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRsb2NhbGUgIT09IHZvaWQgMCA/IF9vcHRpb25zJGxvY2FsZSA6IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYyID0gKF9yZWYzID0gKF9yZWY0ID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMiRvcHRpID0gX29wdGlvbnMkbG9jYWxlMi5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUyJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTIkb3B0aS5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWY0ICE9PSB2b2lkIDAgPyBfcmVmNCA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogMSk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH1cblxuICAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHZhciBtYXRjaGVkID0gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cCk7XG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IGlzRGF0ZSBmcm9tIFwiLi4vaXNEYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oTnVtYmVyKGRhdGUpKTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHwgX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCIvKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkge1xuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSwgZGF0ZS5nZXRIb3VycygpLCBkYXRlLmdldE1pbnV0ZXMoKSwgZGF0ZS5nZXRTZWNvbmRzKCksIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpKTtcbiAgdXRjRGF0ZS5zZXRVVENGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkpO1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgLSB1dGNEYXRlLmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IHsgVGFza01hbmFnZW1lbnQgfSBmcm9tIFwiLi9hZGQuanNcIjtcbmltcG9ydCB7IGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcyB9IGZyb20gXCIuL0RvbS5qc1wiO1xuaW1wb3J0IHsgYWxsTWF0ZXJpYWxzIH0gZnJvbSBcIi4vYWRkLmpzXCI7XG5pbXBvcnQgeyBzdHJpa2VPdXRlZmZlY3QgfSBmcm9tIFwiLi9Eb20uanNcIjtcbmltcG9ydCB7IHVwZGF0aW5nQ29tcGxldGVkVGFzayB9IGZyb20gXCIuL0RvbS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgY29tcGxldGVCdXR0b25mb3JFYWNoUHJvamVjdHtcblxuICAgIGNvbnN0cnVjdG9yKFRhc2tCdXR0b24saW5kZXgpe1xuXG4gICAgICAgIHRoaXMuVGFza0J1dHRvbj1UYXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsZnVuY3Rpb24oZSl7XG5cbiAgICAgICAgICAgIFxuICAgICAgICBpZih0aGlzLmNoZWNrZWQpeyBcbiAgICAgICAgICAgIGlmKGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uPT09XCJIb21lXCIpe1xuICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBwcm9qZWN0Qm94PVRhc2tNYW5hZ2VtZW50LmZpbmRpbmdUYXNrKGFsbE1hdGVyaWFscy5hbGxUYXNrc1tpbmRleF0pXG4gICAgICAgICAgIFxuICAgICAgICAgICAgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW3Byb2plY3RCb3guaV0ucHJvamVjdExpc3RbcHJvamVjdEJveC54XS5zdGF0dXM9XCJkb25lXCI7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgc3RyaWtlT3V0ZWZmZWN0LnN0cmlrZW91dFdvcmRzKGluZGV4KTtcbiAgICAgICAgICAgIHVwZGF0aW5nQ29tcGxldGVkVGFzaygpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0cylcbiAgICAgICAgICAgIGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tUYXNrTWFuYWdlbWVudC5wcm9qZWN0UG9zLnBvc2l0aW9uXS5wcm9qZWN0TGlzdFtpbmRleF0uc3RhdHVzPVwiZG9uZVwiXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbVGFza01hbmFnZW1lbnQucHJvamVjdFBvcy5wb3NpdGlvbl0ucHJvamVjdExpc3RbaW5kZXhdLnN0YXR1cylcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc3RyaWtlT3V0ZWZmZWN0LnN0cmlrZW91dFdvcmRzKGluZGV4KVxuICAgICAgICB9O31cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHN0cmlrZU91dGVmZmVjdC5zdHJpa2VvdXRXb3JkcyhpbmRleCxcIm5vbmVcIilcbiAgICAgICAgICAgIGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tUYXNrTWFuYWdlbWVudC5wcm9qZWN0UG9zLnBvc2l0aW9uXS5wcm9qZWN0TGlzdFtpbmRleF0uc3RhdHVzPVwidW5kb25lXCJcbiAgICAgICAgICAgIGlmKGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uPT09XCJIb21lXCIpe1xuXG4gICAgICAgICAgICAgICAgdXBkYXRpbmdDb21wbGV0ZWRUYXNrKCk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICBcbiAgICAgICAgICAgIFxuXG4gICAgICAgIH1cbiAgICAgICAgICAgXG4gICAgICAgIH0pXG4gICAgXG4gICAgfVxuXG5cblxuXG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0FmdGVyXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBmaXJzdCBkYXRlIGFmdGVyIHRoZSBzZWNvbmQgb25lP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGZpcnN0IGRhdGUgYWZ0ZXIgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRoYXQgc2hvdWxkIGJlIGFmdGVyIHRoZSBvdGhlciBvbmUgdG8gcmV0dXJuIHRydWVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVUb0NvbXBhcmUgLSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZmlyc3QgZGF0ZSBpcyBhZnRlciB0aGUgc2Vjb25kIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSXMgMTAgSnVseSAxOTg5IGFmdGVyIDExIEZlYnJ1YXJ5IDE5ODc/XG4gKiBjb25zdCByZXN1bHQgPSBpc0FmdGVyKG5ldyBEYXRlKDE5ODksIDYsIDEwKSwgbmV3IERhdGUoMTk4NywgMSwgMTEpKVxuICogLy89PiB0cnVlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWZ0ZXIoZGlydHlEYXRlLCBkaXJ0eURhdGVUb0NvbXBhcmUpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXRlVG9Db21wYXJlID0gdG9EYXRlKGRpcnR5RGF0ZVRvQ29tcGFyZSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSA+IGRhdGVUb0NvbXBhcmUuZ2V0VGltZSgpO1xufSIsImltcG9ydCB7IGFsbE1hdGVyaWFscyB9IGZyb20gXCIuL2FkZFwiO1xuaW1wb3J0IGlzQWZ0ZXIgZnJvbSBcImRhdGUtZm5zL2lzQWZ0ZXJcIjtcbmltcG9ydCB7IGlzQmVmb3JlIH0gZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgeyBkZWxldGVpbmdUYXNrc29mcHJvamVjdCB9IGZyb20gXCIuL0RvbVwiO1xuaW1wb3J0IHsga25vd1doaWNoc2VjdGlvbmRpYWxvZ2lzIH0gZnJvbSBcIi4vRG9tXCI7XG5pbXBvcnQgeyBUYXNrTWFuYWdlbWVudCB9IGZyb20gXCIuL2FkZFwiO1xuaW1wb3J0IHsgbW92aW5nVGFza3MgfSBmcm9tIFwiLi9Eb21cIjtcblxuXG5leHBvcnQgbGV0IGRlbGV0ZVRhc2tzPSgoKT0+e1xuXG4gICAgY2xhc3MgZGVsZXRlVGFza3tcbiAgICAgICAgY29uc3RydWN0b3IoYnV0dG9uLGluZGV4KXtcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uPWJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsZnVuY3Rpb24oZSl7XG5cbiAgICAgICAgICAgICAgICBkZWxldGluZ1NwZWNpZmljVGFzayhpbmRleCk7XG4gICAgICAgICAgICAgICAgVGFza01hbmFnZW1lbnQuYWRkaW5nVG9hbGxUYXNrcygpXG4gICAgICAgICAgICAgICAgbW92aW5nVGFza3MucGxhY2luZ1Rhc2tzKCk7XG4gICAgICAgICAgICAgICAgbW92aW5nVGFza3MudXBkYXRlQWxsdGFza3MoKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwieWVzIHdlIHdvcmtcIilcblxuICAgICAgICAgICAgfSlcblxuXG4gICAgICAgIH1cbiAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNsZWFyT3ZlcmR1ZSgpIHtcbiAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW2ldLnByb2plY3RMaXN0Lmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGlzQWZ0ZXIobmV3IERhdGUoKSxuZXcgRGF0ZShhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaV0ucHJvamVjdExpc3RbeF0uZGF0ZSkpKVxuICAgICAgICAgICAgICAgICAgICBpZihpc0FmdGVyKG5ldyBEYXRlKCksbmV3IERhdGUoYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW2ldLnByb2plY3RMaXN0W3hdLmRhdGUpKSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tpXS5wcm9qZWN0TGlzdC5zcGxpY2UoeCwxKVxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJZb3UgY2FuJ3QgY3JlYXRlIGEgZGF0ZSBpbiB0aGUgcGFzdFwiKVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZGVsZXRpbmdTcGVjaWZpY1Rhc2soaW5kZXgpIHtcblxuICAgICAgICAgICAgaWYoa25vd1doaWNoc2VjdGlvbmRpYWxvZ2lzLnNlY3Rpb249PT1cIkhvbWVcIil7XG5cbiAgICAgICAgICAgICAgICBcblxuXG5cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcblxuICAgICAgICAgICAgICAgIGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tUYXNrTWFuYWdlbWVudC5wcm9qZWN0UG9zLnBvc2l0aW9uXS5wcm9qZWN0TGlzdC5zcGxpY2UoaW5kZXgsMSlcblxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG5cblxuICAgICAgIHJldHVybiB7Y2xlYXJPdmVyZHVlLGRlbGV0aW5nU3BlY2lmaWNUYXNrLGRlbGV0ZVRhc2t9XG59KSgpIiwiLy9jcmVhdGluZyB0aGUgRE9NXG5cbmltcG9ydCAnLi9zdHlsZS5jc3MnXG5pbXBvcnQgeyBUYXNraW5lYWNocHJvamVjdCB9IGZyb20gJy4vcHJvamVjdC5qcydcbmltcG9ydCBIZWFkSW1hZ2UgZnJvbScuL2ljb25zL2xpbnV4SGVhZC5wbmcnXG5pbXBvcnQgSG9tZUljb24gZnJvbSAnLi9pY29ucy9Ib21lQnV0dG9ucy5zdmcnXG5pbXBvcnQgYWxsVGFza3NpY29uIGZyb20gJy4vaWNvbnMvVGFza3Muc3ZnJ1xuaW1wb3J0IGRhdGVJY29uIGZyb20gJy4vaWNvbnMvYXJyYW5nZURhdGVzLnN2ZydcbmltcG9ydCBjcmVhdGVQcm9qZWN0c2ljb24gZnJvbSAnLi9pY29ucy9jcmVhdGVQcm9qZWN0LnN2ZydcbmltcG9ydCBwcm9qZWN0c0ljb24gZnJvbSAnLi9pY29ucy9Qcm9qZWN0cy5zdmcnXG5pbXBvcnQgdG9wQm94SW1hZ2UgZnJvbSAnLi9pbWFnZXMvZ2lybC5zdmcnXG5pbXBvcnQgbXVzaWNpbWFnZSBmcm9tICcuL2ltYWdlcy9tdXNpYy5zdmcnXG5pbXBvcnQgYWRkVGFza0ltYWdlIGZyb20gJy4vaWNvbnMvY3JlYXRlQWRkLnN2ZydcbmltcG9ydCBib3lwYXBlcnMgZnJvbSAnLi9pbWFnZXMvY2FycnlpbmdwYXBlcnMuc3ZnJ1xuaW1wb3J0IHthZGQsIGZvcm1hdH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IHsgUHJvamVjdE1hbmFnZW1lbnQgfSBmcm9tICcuL2FkZC5qcydcbmltcG9ydCB7IGFsbE1hdGVyaWFscyB9IGZyb20gJy4vYWRkLmpzJ1xuaW1wb3J0IHsgc3BhY2VUcmF2ZWxzIH0gZnJvbSAnLi9hZGQuanMnXG5pbXBvcnQgeyBUYXNrTWFuYWdlbWVudCB9IGZyb20gJy4vYWRkLmpzJ1xuaW1wb3J0IGJyaWVmY2FzZVByb2plY3RzIGZyb20gJy4vaWNvbnMvYnJpZWZjYXNlLW91dGxpbmUuc3ZnJ1xuaW1wb3J0IG1lc3NhZ2VJY29uIGZyb20gJy4vaWNvbnMvbWVzc2FnZS1vdXRsaW5lLnN2ZydcbmltcG9ydCB7IHNoaWZ0UHJvamVjdCB9IGZyb20gJy4vcHJvamVjdC5qcydcbmltcG9ydCB7IGNvbXBsZXRlQnV0dG9uZm9yRWFjaFByb2plY3QgfSBmcm9tICcuL2NoZWNrLmpzJ1xuaW1wb3J0IHsgYW1vdW50b2ZDb21wbGV0ZWRUYXNrcyB9IGZyb20gJy4vYWRkLmpzJ1xuaW1wb3J0IGRlbGV0ZWljb24gZnJvbSAnLi9pY29ucy9kZWxldGVJY29ucy5zdmcnXG5pbXBvcnQgdG9kYXlJY29uIGZyb20gJy4vaWNvbnMvdG9kYXkuc3ZnJ1xuaW1wb3J0IHsgYXJyYW5nZURhdGVzIH0gZnJvbSAnLi9hZGQuanMnXG5cbmltcG9ydCB7IGRlbGV0ZVRhc2tzIH0gZnJvbSAnLi9kZWxldGUuanMnXG5cbmNsYXNzIGNyZWF0ZUVsZW1lbnR0b0RvbXtcblxuICBkb21FbGVtZW50Q3JlYXRvcih0eXBlLG5ld0lkLHBhcmVudEJveCxXb3Jkcz1cIlwiLHBsYWNlaG9sZGVyV29yZHM9XCJcIil7XG4gICAgbGV0IG5ld0VsZW1lbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKVxuICAgIG5ld0VsZW1lbnQuaWQ9bmV3SWQ7XG4gICAgbmV3RWxlbWVudC50ZXh0Q29udGVudD1Xb3Jkc1xuICAgIG5ld0VsZW1lbnQucGxhY2Vob2xkZXI9cGxhY2Vob2xkZXJXb3JkcztcbiAgICBwYXJlbnRCb3guYXBwZW5kQ2hpbGQobmV3RWxlbWVudCk7XG4gICAgXG4gICAgcmV0dXJuIG5ld0VsZW1lbnQ7XG4gICAgXG4gICAgfVxuICAgIEltYWdlTG9hZHRvRE9tKEljb24scGFyZW50Qm94LGlkTmFtZSkge1xuICAgIFxuICAgICAgbGV0IG15SWNvbiA9IG5ldyBJbWFnZSgpO1xuICAgICAgbXlJY29uLnNyYyA9IEljb247XG4gICAgICBteUljb24uaWQ9aWROYW1lO1xuICAgICAgcGFyZW50Qm94LmFwcGVuZENoaWxkKG15SWNvbik7XG4gICAgXG4gICAgICByZXR1cm4gbXlJY29uO1xuICAgICAgICBcbiAgICB9XG4gICAgXG5cblxufVxuXG5sZXQgZG9tRWxlbWVudE1ha2VyPW5ldyBjcmVhdGVFbGVtZW50dG9Eb20oKTtcblxuXG5cbmV4cG9ydCBsZXQgc2lkZWJhcj0oKCk9PntcblxubGV0IHNpZGVyYm94PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignZGl2JyxcInNpZGVib3hcIixkb2N1bWVudC5ib2R5KTtcblxubGV0IGFwcFRpdGxlSG9sZGVyPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignZGl2JyxcImFwcFRpdGxlSG9sZGVyXCIsc2lkZXJib3gpO1xuXG5sZXQgYXBwTG9nbz1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oSGVhZEltYWdlLGFwcFRpdGxlSG9sZGVyLFwiYXBwTG9nb1wiKVxuXG5sZXQgYXBwVGl0bGU9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdwJyxcImFwcFRpdGxlXCIsYXBwVGl0bGVIb2xkZXIsXCJVYnVudHUgVGFza3NcIik7XG5cblxuXG5cbmxldCBzZWN0aW9uPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignZGl2JyxcInNlY3Rpb25cIixzaWRlcmJveClcblxubGV0IGhvbWVCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiaG9tZURpdlwiLHNlY3Rpb24pO1xubGV0IGhvbWVpY29uPWRvbUVsZW1lbnRNYWtlci5JbWFnZUxvYWR0b0RPbShIb21lSWNvbixob21lQnV0dG9uLFwiaG9tZWljb25cIilcbmxldCBob21lVGV4dD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ3AnLFwiaG9tZXRleHRcIixob21lQnV0dG9uLFwiSG9tZVwiKTtcblxubGV0IFRvZGF5PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignYnV0dG9uJyxcInRvZGF5QnV0dG9uXCIsc2VjdGlvbilcbmxldCBUb2RheUljb249ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKHRvZGF5SWNvbixUb2RheSxcInRvZGF5SWNvblwiKTtcbmxldCBUb2RheVRleHQ9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdwJyxcIlRvZGF5VGV4dFwiLFRvZGF5LFwiVG9kYXlcIik7XG5cblxubGV0IERhdGVzQXJyYW5nZWRCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY2FsZW5kZXJcIixzZWN0aW9uKTtcbmxldCBEYXRlc2ljb249ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKGRhdGVJY29uLERhdGVzQXJyYW5nZWRCdXR0b24sXCJEYXRlc2ljb25cIilcbmxldCBEYXRlc1RleHQ9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdwJyxcImhvbWV0ZXh0XCIsRGF0ZXNBcnJhbmdlZEJ1dHRvbixcIkNhbGVuZGVyXCIpO1xuXG5sZXQgUHJvamVjdHNCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiUHJvamVjdHNcIixzZWN0aW9uKTtcbmxldCBQcm9qZWN0c0ljb249ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKHByb2plY3RzSWNvbixQcm9qZWN0c0J1dHRvbixcInByb2plY3RJY29uXCIpXG5sZXQgUHJvamVjdHNUZXh0PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigncCcsXCJQcm9qZWN0VGV4dFwiLFByb2plY3RzQnV0dG9uLFwiUHJvamVjdHNcIilcblxubGV0IGRpdlByb2plY3RzU2VjdGlvbj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJwcm9qZWN0c1NlY3Rpb25cIixzZWN0aW9uKVxuXG4gbGV0IGNyZWF0ZXByb2plY3RzQnV0dG9uPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignYnV0dG9uJyxcImNyZWF0ZXByb2plY3RzXCIsc2VjdGlvbik7XG5sZXQgY3JlYXRlUHJvamVjdHNJY29uPWRvbUVsZW1lbnRNYWtlci5JbWFnZUxvYWR0b0RPbShjcmVhdGVQcm9qZWN0c2ljb24sY3JlYXRlcHJvamVjdHNCdXR0b24sXCJjcmVhdGVwcm9qZWN0c2ljb25cIilcbmxldCBjcmVhdGVQcm9qZWN0PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigncCcsXCJwcm9qZWN0VGV4dFwiLGNyZWF0ZXByb2plY3RzQnV0dG9uLFwiQ3JlYXRlIFByb2plY3RzXCIpO1xuY3JlYXRlcHJvamVjdHNCdXR0b24udGl0bGU9XCJDcmVhdGUgUHJvamVjdFwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbnJldHVybiB7Y3JlYXRlcHJvamVjdHNCdXR0b24sc2lkZXJib3gsZGl2UHJvamVjdHNTZWN0aW9uLFRvZGF5fTtcblxufSkoKTtcblxuXG5cbmV4cG9ydCBsZXQgdG9wQmFyPSgoKT0+e1xuXG4gIGxldCB0b3BCb3g9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaXYnLCd0b3BCb3gnLGRvY3VtZW50LmJvZHkpO1xuIFxuICBsZXQgdG9wVGV4dD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ3AnLCd0b3BUZXh0Jyx0b3BCb3gsYEVuam95IHlvdXIgJHtmb3JtYXQobmV3IERhdGUoKSwgJ0VFRUUnKX1gKVxuICBsZXQgdG9wQm94aW1hZ2U9ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKHRvcEJveEltYWdlLHRvcEJveCwndG9wQm94aW1hZ2VnaXJsJyk7XG4gIGxldCBtdXNpY3BpYz1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20obXVzaWNpbWFnZSx0b3BCb3gsXCJtdXNpY2JveVwiKVxuICBsZXQgYm95d2l0aHBhcGVycz1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oYm95cGFwZXJzLHRvcEJveCxcImJveVdpdGhwYXBlcnNcIik7XG5cblxuXG4gIHJldHVybiB7dG9wQm94fTtcbn0pKCk7XG5cbmV4cG9ydCBsZXQgY3JlYXRlVGFza2ljb249KCgpPT57XG5cbiAgbGV0IGFkZFRhc2s9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiYWRkVGFza1wiLGRvY3VtZW50LmJvZHkpXG4gIGFkZFRhc2sudGl0bGU9XCJDcmVhdGUgbmV3IHRhc2tcIlxuXG4gIGxldCBhZGRUYXNrSWNvbj1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oYWRkVGFza0ltYWdlLGFkZFRhc2ssXCJhZGR0YXNraWNvblwiKVxuXG5cblxucmV0dXJuIHthZGRUYXNrfVxufSkoKVxuXG5leHBvcnQgbGV0IGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcz17XG5cbiAgc2VjdGlvbjpcIkhvbWVcIlxuXG5cbn1cblxubGV0IGlucHV0Qm94Y3JlYXRlUHJvamVjdHM9KCgpPT57XG4gIGxldCBkaWFsb2dCb3g9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaWFsb2cnLFwiZGlhbG9nQ3JlYXRlUHJvamVjdFwiLHNpZGViYXIuc2lkZXJib3gpO1xuICBsZXQgbWVzc2FnZUJveGRpdj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2Zvcm0nLFwibWVzc2FnZUJveGRpdlwiLGRpYWxvZ0JveClcbiAgbWVzc2FnZUJveGRpdi5zZXRBdHRyaWJ1dGUoXCJtZXRob2RcIixcImRpYWxvZ1wiKTtcbiAgbGV0IFByb2plY3ROYW1lbGFiZWw9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdsYWJlbCcsXCJwcm9qZWN0TmFtZVwiLG1lc3NhZ2VCb3hkaXYpXG4gIFByb2plY3ROYW1lbGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsXCJwcm9qZWN0TmFtZWlucHV0XCIpO1xuICBsZXQgcHJvamVjdE5hbWVpbnB1dD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2lucHV0JyxcInByb2plY3ROYW1laW5wdXRcIixtZXNzYWdlQm94ZGl2KVxuICBwcm9qZWN0TmFtZWlucHV0LnBsYWNlaG9sZGVyPVwiR28gdG8gdGhlIE1vb25cIjtcblxuICBsZXQgYnV0dG9uc2Rpdj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJidXR0b25kaXZcIixtZXNzYWdlQm94ZGl2KVxuXG4gIGxldCBjYW5jZWxCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY2FuY2VsQnV0dG9uXCIsYnV0dG9uc2RpdixcIkNhbmNlbFwiKVxuICBsZXQgZG9uZUJ1dHRvbj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2J1dHRvbicsXCJkb25lQnV0dG9uXCIsYnV0dG9uc2RpdixcIkNyZWF0ZVwiKVxuXG4gIFxucmV0dXJuIHtkaWFsb2dCb3gsY2FuY2VsQnV0dG9uLGRvbmVCdXR0b24scHJvamVjdE5hbWVpbnB1dH1cbn0pKClcbmZ1bmN0aW9uIGRpc2FibGVidXR0b24oYnV0dG9uKXtcbiAgYnV0dG9uLmRpc2FibGVkPXRydWU7XG4gIFxuICBcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZvcm1mb3Jwcm9qZWN0cyhidXR0b24pe1xuXG4gICAgaW5wdXRCb3hjcmVhdGVQcm9qZWN0cygpO1xuICAgIGRpc2FibGVidXR0b24oYnV0dG9uKVxuXG5cblxuICB9XG5cbnNpZGViYXIuY3JlYXRlcHJvamVjdHNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uKGUpeyBcbiAgaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5kaWFsb2dCb3guc2hvd01vZGFsKCk7XG59KTtcblxuZnVuY3Rpb24gY2xlYXJBbGxFbGVtZW50cyhzZWxlY3Rvcil7XG5cbmxldCBob2xkZXJDb250YWluZXI9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHtzZWxlY3Rvcn0+KmApO1xuaG9sZGVyQ29udGFpbmVyLmZvckVhY2goZWxlbWVudCA9PiB7XG4gIGVsZW1lbnQucmVtb3ZlKCk7XG59KTtcblxuXG5cbn1cblxuZnVuY3Rpb24gZnJvbURvbXRvQWxscHJvamVjdHMoKVxue1xuICBpZiAoaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5wcm9qZWN0TmFtZWlucHV0LnZhbHVlPT09XCJcIil7XG5cbiAgICByZXR1cm5cbiAgIH1cbiAgICBcbiAgICBcbiAgICBsZXQgbmV3UHJvamVjdD1uZXcgUHJvamVjdE1hbmFnZW1lbnQuY3JlYXRlUHJvamVjdChpbnB1dEJveGNyZWF0ZVByb2plY3RzLnByb2plY3ROYW1laW5wdXQudmFsdWUpO1xuICAgIFByb2plY3RNYW5hZ2VtZW50LmFkZFRvQWxsUHJvamVjdHMobmV3UHJvamVjdCk7XG5cblxufVxuXG5mdW5jdGlvbiBhZGRQcm9qZWN0KCl7XG5cbmZyb21Eb210b0FsbHByb2plY3RzKCk7XG5jcmVhdGVCdXR0b25zRnJvbUFsbFByb2plY3RzKCk7XG5cbn1cblxuZnVuY3Rpb24gYmFsYW5jaW5ncHJvamVjdHMoKXtcbiAgYWRkUHJvamVjdCgpO1xuICBVcGRhdGVOdW1iZXJPZlByb2plY3RzKCk7XG5cbn1cblxuaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5kb25lQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbiAoZSkge1xuICBcbiAgYmFsYW5jaW5ncHJvamVjdHMoKTtcbiAgcHJvamVjdEJ1dHRvbnMoKVxuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIFxuICBpbnB1dEJveGNyZWF0ZVByb2plY3RzLmRpYWxvZ0JveC5jbG9zZSgpO1xuICBcbiAgIFxuICBcbiBcbn0pO1xuXG5leHBvcnQgbGV0IHN0eWxpbmdTbGVsZWN0ZWRCdXR0b25zPSgoKT0+e1xuICBmdW5jdGlvbiBtYWtpbmdUaGVCdXR0b25HbG93KGJ1dHRvbil7XG5cbiAgIGJ1dHRvbi5zdHlsZS5zZXRQcm9wZXJ0eShcImNvbG9yXCIsXCJ3aGl0ZVwiKVxuICAgYnV0dG9uLnN0eWxlLnNldFByb3BlcnR5KFwiYmFja2dyb3VuZC1jb2xvclwiLFwiI0YzOUMxMlwiKVxuICAgYnV0dG9uLnN0eWxlLnNldFByb3BlcnR5KFwidGV4dC1hbGlnblwiLFwiY2VudGVyXCIpO1xuICAgXG4gICBcbiAgIH1cbiAgIFxuICBmdW5jdGlvbiByZXR1cm5BbGxidXR0b25zdGx5ZXNUb2RlZmF1bHQoKXtcbiAgIFxuICAgICBsZXQgYWxsQnV0dG9ucz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcHJvamVjdCcpO1xuICAgXG4gICBhbGxCdXR0b25zLmZvckVhY2goQnV0dG9uPT57XG4gICBcbiAgIEJ1dHRvbi5zdHlsZS5zZXRQcm9wZXJ0eShcImJhY2tncm91bmQtY29sb3JcIixcInRyYW5zcGFyZW50XCIpO1xuICAgQnV0dG9uLnN0eWxlLnNldFByb3BlcnR5KFwiY29sb3JcIixcIiM4Mjg0ODlcIik7XG4gICBCdXR0b24uc3R5bGUuc2V0UHJvcGVydHkoXCJ0ZXh0LWFsaWduXCIsXCJsZWZ0XCIpO1xuICAgXG4gICB9KVxuICAgXG4gICBcbiAgIFxuICAgfVxuXG5cblxuXG5cbnJldHVybntyZXR1cm5BbGxidXR0b25zdGx5ZXNUb2RlZmF1bHQsbWFraW5nVGhlQnV0dG9uR2xvd31cbn0pKCkgXG5cbmxldCBjcmVhdGVUYXNrRGlhbG9nPSgoKT0+e1xuIFxuICBsZXQgZGlhbG9nVGFzaz1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpYWxvZycsXCJkaWFsb2dUYXNrXCIsZG9jdW1lbnQuYm9keSk7XG4gIGxldCBSZXF1aXJlbWVudHNGb3JtPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignZm9ybScsXCJtZXNzYWdlQm94ZGl2XCIsZGlhbG9nVGFzaylcblxuICBsZXQgVGFza0xhYmVsPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignbGFiZWwnLCdEYXRlTGFiZWwnLFJlcXVpcmVtZW50c0Zvcm0sXCJUYXNrIE5hbWVcIik7XG4gIFRhc2tMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIixcIlRhc2tOYW1lXCIpXG4gIGxldCBUYXNrTmFtZT1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2lucHV0JyxcIlRhc2tOYW1lXCIsUmVxdWlyZW1lbnRzRm9ybSxudWxsLFwiVmVudXMgc3VtbWl0XCIpXG4gICAgXG4gIGxldCBEZXNjcmlwdGlvbkxhYmVsPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignbGFiZWwnLCdEYXRlTGFiZWwnLFJlcXVpcmVtZW50c0Zvcm0sXCJEZXNjcmlwdGlvblwiKTtcbiAgRGVzY3JpcHRpb25MYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIixcIlRhc2tEZXNjcmlwdGlvblwiKVxuICBsZXQgVGFza0Rlc2NyaXB0aW9uPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigndGV4dGFyZWEnLFwiVGFza0Rlc2NyaXB0aW9uXCIsUmVxdWlyZW1lbnRzRm9ybSxudWxsLFwiVGFrZSB0aGUgbWFycyByb3ZlciBhdCB1YnVudHUgc3RhdGlvbiBcIilcbiAgVGFza0Rlc2NyaXB0aW9uLnJvd3M9NDtcbiAgVGFza0Rlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZShcIm1heGxlbmd0aFwiLDQ1KTtcblxuICBsZXQgZGF0ZUxhYmVsPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignbGFiZWwnLCdEYXRlTGFiZWwnLFJlcXVpcmVtZW50c0Zvcm0sXCJEdWUgRGF0ZVwiKTtcbiAgZGF0ZUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLFwiRGF0ZVwiKVxuXG4gIGxldCBkYXRlPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignaW5wdXQnLCdEYXRlJyxSZXF1aXJlbWVudHNGb3JtLFwiRGF0ZVwiLFwiRHVlIERhdGVcIik7XG4gIGRhdGUudHlwZT1cImRhdGVcIjsgXG5cbiAgbGV0IFByaW9yaXR5TGFiZWw9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdsYWJlbCcsXCJQcmlvcml0eUxhYmVsXCIsUmVxdWlyZW1lbnRzRm9ybSxcIlByaW9yaXR5XCIpO1xuICBQcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLFwic2VsZWN0RHJvcERvd25cIilcbiAgbGV0IFByaW9yaXR5RHJvcGRvd249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdzZWxlY3QnLFwic2VsZWN0RHJvcERvd25cIixSZXF1aXJlbWVudHNGb3JtKVxuICBsZXQgT3B0aW9uSGlnaD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ29wdGlvbicsXCJvcHRpb25IaWdoXCIsUHJpb3JpdHlEcm9wZG93bixcIkhpZ2hcIik7XG4gIGxldCBPcHRpb25NZWRpdW09ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdvcHRpb24nLFwib3B0aW9uTWVkaXVtXCIsUHJpb3JpdHlEcm9wZG93bixcIk1lZGl1bVwiKVxuICBsZXQgT3B0aW9uTG93PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignb3B0aW9uJyxcIm9wdGlvbkxvd1wiLFByaW9yaXR5RHJvcGRvd24sXCJMb3dcIilcblxuICBPcHRpb25IaWdoLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJIaWdoXCIpO1xuICBPcHRpb25NZWRpdW0uc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIk1lZGl1bVwiKTtcbiAgT3B0aW9uTG93LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJMb3dcIik7XG4gIE9wdGlvbk1lZGl1bS5zZWxlY3RlZD10cnVlO1xuXG4gIFRhc2tOYW1lLnJlcXVpcmVkPXRydWU7XG4gIFByaW9yaXR5RHJvcGRvd24ucmVxdWlyZWQ9dHJ1ZTtcbiAgZGF0ZS5yZXF1aXJlZD10cnVlO1xuICBUYXNrRGVzY3JpcHRpb24ucmVxdWlyZWQ9dHJ1ZTtcbiAgXG4gIFxubGV0IGJ1dHRvbkhvbGRlcj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJidXR0b25Ib2xkZXJcIixkaWFsb2dUYXNrKVxubGV0IGNhbmNlbFRhc2s9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY2FuY2VsVGFza1wiLGJ1dHRvbkhvbGRlcixcIkNhbmNlbFwiKVxubGV0IGNyZWF0ZVRhc2s9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY3JlYXRlVGFza1wiLGJ1dHRvbkhvbGRlcixcIkNyZWF0ZVwiKVxuY3JlYXRlVGFzay50eXBlPVwiU3VibWl0XCI7XG5cblxuXG5yZXR1cm4ge2RpYWxvZ1Rhc2ssY2FuY2VsVGFzayxjcmVhdGVUYXNrLFRhc2tOYW1lLFRhc2tEZXNjcmlwdGlvbixQcmlvcml0eURyb3Bkb3duLGRhdGV9XG59KSgpO1xuXG5cbmNyZWF0ZVRhc2tpY29uLmFkZFRhc2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uIChlKSB7XG4gIGNyZWF0ZVRhc2tEaWFsb2cuZGlhbG9nVGFzay5zaG93TW9kYWwoKTtcbiAgXG59KVxuXG5mdW5jdGlvbiBjbG9zZVRhc2tkaWFsb2coKXtcblxuY3JlYXRlVGFza0RpYWxvZy5kaWFsb2dUYXNrLmNsb3NlKClcblxuXG59XG5cbmNyZWF0ZVRhc2tEaWFsb2cuY2FuY2VsVGFzay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsZnVuY3Rpb24gKGUpIHtcbiAgY2xvc2VUYXNrZGlhbG9nKCk7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbn0pXG5cbmZ1bmN0aW9uIGFkZFRhc2soKXtcblxuICBpZihjcmVhdGVUYXNrRGlhbG9nLlRhc2tOYW1lLnZhbHVlPT09XCJcInx8Y3JlYXRlVGFza0RpYWxvZy5UYXNrRGVzY3JpcHRpb24udmFsdWU9PT1cIlwifHxjcmVhdGVUYXNrRGlhbG9nLmRhdGUudmFsdWU9PT1cIlwiKXtcblxuICAgIHJldHVybiBcbiAgfVxubGV0IG5ld1Rhc2s9bmV3IFRhc2tNYW5hZ2VtZW50LmNyZWF0ZVRhc2soY3JlYXRlVGFza0RpYWxvZy5UYXNrTmFtZS52YWx1ZSxjcmVhdGVUYXNrRGlhbG9nLlRhc2tEZXNjcmlwdGlvbi52YWx1ZSxjcmVhdGVUYXNrRGlhbG9nLmRhdGUudmFsdWUsY3JlYXRlVGFza0RpYWxvZy5Qcmlvcml0eURyb3Bkb3duLnZhbHVlKVxubmV3VGFzay5Qcm9qZWN0PWFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tUYXNrTWFuYWdlbWVudC5wcm9qZWN0UG9zLnBvc2l0aW9uXS5wcm9qZWN0VGl0bGU7XG5UYXNrTWFuYWdlbWVudC5hZGRUYXNrdG9Qcm9qZWN0KG5ld1Rhc2spO1xuZGVsZXRlVGFza3MuY2xlYXJPdmVyZHVlKClcblRhc2tNYW5hZ2VtZW50LmFkZGluZ1RvYWxsVGFza3MoKTtcblxuXG5jcmVhdGVUYXNrRGlhbG9nLmRpYWxvZ1Rhc2suY2xvc2UoKTtcblxuXG59XG4vL21vdmUgdGhpcyB0byBhZGQuanNcbmV4cG9ydCBmdW5jdGlvbiBub3RIb21lc2VjdGlvbigpe1xuXG4gIGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uPVwibm90SG9tZVwiXG5cbn1cbmZ1bmN0aW9uIGtub3dzZWN0aW9uKCl7XG5cbiAgaWYoa25vd1doaWNoc2VjdGlvbmRpYWxvZ2lzLnNlY3Rpb249PT1cIkhvbWVcIil7XG4gICAgLy8gY29uc29sZS5sb2coXCJ3ZSBhciBpblwiLGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uKVxuICAgIHNldHRpbmdBbGx0YXNrc2luSG9tZSgpXG5cbiAgfVxuICBlbHNlIGlmKGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uPT09XCJUb2RheVwiKXtcbiAgICAgIHRvZGF5QnV0dG9uRnVuY3Rpb25hbGl0aWVzLnRvZGF5VGFzaygpO1xuXG4gIH1cblxufVxuZnVuY3Rpb24gZW50ZXJUYXNrKCkge1xuICBhZGRUYXNrKCk7XG4gIFxuICBtb3ZpbmdUYXNrcy5wbGFjaW5nVGFza3MoKTtcbiAgXG4gIG1vdmluZ1Rhc2tzLnVwZGF0ZUFsbHRhc2tzKClcbiAgXG4gIGtub3dzZWN0aW9uKCk7XG4gIGNvbXBsZXRlVGFzay5tYW5hZ2VDaGVja2JveCgpO1xuXG5cbiBcbiAgXG4gIFxufVxuXG5jcmVhdGVUYXNrRGlhbG9nLmNyZWF0ZVRhc2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uIChlKSB7XG5cbiAgZW50ZXJUYXNrKCk7XG5cbiAgXG59KVxuXG5cblxuaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5jYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uKGUpIHtcbiAgY3JlYXRlQnV0dG9uc0Zyb21BbGxQcm9qZWN0cygpO1xuICBcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBcbiAgaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5kaWFsb2dCb3guY2xvc2UoKTtcbiAgXG59KVxuXG5mdW5jdGlvbiByZWZyZXNoKCkge1xuICBsZXQgcHJvamVjdHM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3ROYW1lJyk7XG5cbiAgcHJvamVjdHMuZm9yRWFjaChwcm9qZWN0cz0+e1xuICAgIC8vIGNvbnNvbGUubG9nKHByb2plY3RzKTtcbiAgICBwcm9qZWN0cy5yZW1vdmUoKVxuXG4gIH0pXG4gIFxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25zRnJvbUFsbFByb2plY3RzKCl7XG5cbiAgcmVmcmVzaCgpO1xuXG4gIGxldCBhcnJheU9mcHJvamVjdHM9YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IGFycmF5T2Zwcm9qZWN0cy5sZW5ndGg7IGkrKykge1xuIGxldCBidXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwicHJvamVjdFwiLHNpZGViYXIuZGl2UHJvamVjdHNTZWN0aW9uLFwiPiBcIithcnJheU9mcHJvamVjdHNbaV0ucHJvamVjdFRpdGxlKVxuIGlmKGk9PT1UYXNrTWFuYWdlbWVudC5wcm9qZWN0UG9zLnBvc2l0aW9uKXtcbiAgICBzdHlsaW5nU2xlbGVjdGVkQnV0dG9ucy5tYWtpbmdUaGVCdXR0b25HbG93KGJ1dHRvbilcbiB9IFxuIGJ1dHRvbi5jbGFzc05hbWU9XCJwcm9qZWN0TmFtZVwiIDtcblxufVxuXG5cblxuXG5cbn1cbmNyZWF0ZUJ1dHRvbnNGcm9tQWxsUHJvamVjdHMoKTtcbmZ1bmN0aW9uIGNsb3NlQWRkdGFzaygpIHtcbiAgXG4gIFxufVxuXG5sZXQgY29udGVudFRvYmV1cGRhdGVkQ2hhbmdpbmdQcm9qZWN0cz0oKCk9PntcblxubGV0IGNvbnRlbnQ9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaXYnLCdjb250ZW50VG9iZVVwZGF0ZWQnLGRvY3VtZW50LmJvZHkpXG5cblxuXG5yZXR1cm4ge2NvbnRlbnR9O1xufSkoKVxuXG5cblxuXG4gIGZ1bmN0aW9uIGNvbnRlbnRCb3hlbGVtZW50TWFrZXIodHlwZSxuZXdJZCxwYXJlbnRCb3gsV29yZHM9XCJcIixwbGFjZWhvbGRlcldvcmRzPVwiXCIsY2xhc3NUaXRsZT1cImNvbnRlbnRUb1JlbW92ZVwiKXtcbiAgICBsZXQgZWxlbWVudD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IodHlwZSxuZXdJZCxwYXJlbnRCb3gsV29yZHMscGxhY2Vob2xkZXJXb3Jkcz1cIlwiKVxuICAgIGVsZW1lbnQuY2xhc3NOYW1lPWNsYXNzVGl0bGU7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG5cblxuXG5cblxuXG5cblxubGV0IHN0YXRpc3RpY3M9KCgpPT57XG5cbiAgZnVuY3Rpb24gbWFrZVN0YXRpc3RpY3MoKSB7XG4gICAgbGV0IHN0YXRpc3RpY3NIb2xkZXJib3g9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxcInN0YXRpc3RpY3NIb2xkZXJib3hcIixjb250ZW50VG9iZXVwZGF0ZWRDaGFuZ2luZ1Byb2plY3RzLmNvbnRlbnQpXG4gICAgbGV0IGNhcmROYW1lcz1bXCJDdXJyZW50IFByb2plY3RzXCIsXCJPdmVyYWxsIFRhc2tzXCIsXCJDb21wbGV0ZWQgVGFza3NcIl07XG4gICAgbGV0IG5hbWVzT2ZTdGF0cz1bXCJpbmZvcm1hdGlvbk9mUHJvamVjdHNIb2xkZXJcIixcImluZm9tYXRpb25PZlRhc2tzSG9sZGVyXCIsXCJpbmZvcm1hdGlvbk9mY29tcGxldGVkVGFza3NIb2xkZXJcIl1cbiAgICBsZXQgY2FyZERldGFpbHM9W1wicHJvamVjdE51bWJlclwiLFwiVGFza051bWJlclwiLFwiY29tcGxldGVkTnVtYmVyXCJdXG4gICAgbGV0IGljb25zPVticmllZmNhc2VQcm9qZWN0cyxtZXNzYWdlSWNvbixhbGxUYXNrc2ljb25dXG4gICAgbGV0IGlkTmFtZXM9W1wibnVtYmVyT2ZQcm9qZWN0c2RpdlwiLFwibnVtYmVyT2ZUYXNrc2RpdlwiLFwiY29tcGxldGVkVGFza3NcIl1cbiAgICBsZXQgc3RhdGljc09mY2FyZD1bYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aCxhbGxNYXRlcmlhbHMuYWxsVGFza3MubGVuZ3RoLDBdXG4gICAgbGV0IHNwZWNpZmljTmFtZWZvckVudHJ5PVtcInByb2plY3REZXRhaWxzXCIsXCJUYXNrRGV0YWlsc1wiLFwiY29tcGxldGVkVGFza1wiXTtcbiAgICBsZXQgYmFja2Ryb3BzPVtcInByb2plY3RzQmFja2Ryb3BcIixcInRhc2tzQmFja2Ryb3BcIixcImNvbXBsZXRlZEJhY2tkcm9wXCJdXG4gICAgXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2FyZE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNhcmRESVY9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxpZE5hbWVzW2ldLHN0YXRpc3RpY3NIb2xkZXJib3gpO1xuICAgIGxldCBpbmZvcm1hdGlvbkhvbGRlcj1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdkaXYnLG5hbWVzT2ZTdGF0c1tpXSxjYXJkRElWKTtcbiAgICBsZXQgaW5mb09mQ2FyZD1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdwJyxjYXJkRGV0YWlsc1tpXSxpbmZvcm1hdGlvbkhvbGRlcixzdGF0aWNzT2ZjYXJkW2ldKTtcbiAgICBsZXQgUHJvamVjdERldGFpbHM9Y29udGVudEJveGVsZW1lbnRNYWtlcigncCcsc3BlY2lmaWNOYW1lZm9yRW50cnlbaV0saW5mb3JtYXRpb25Ib2xkZXIsY2FyZE5hbWVzW2ldKTtcbiAgICBsZXQgSWNvbkRpdj1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdkaXYnLFwiaWNvbkRpdlwiLGNhcmRESVYpO1xuICAgIGxldCBpY29uSW1hZ2U9ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKGljb25zW2ldLEljb25EaXYsXCJpY29uU3RhdGljc1wiKTtcbiAgICBsZXQgaWNvbkltYWdlQmFja2Ryb3A9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaXYnLGJhY2tkcm9wc1tpXSxJY29uRGl2KVxuICB9XG4gIH1cbiAgbWFrZVN0YXRpc3RpY3MoKTtcbiAgXG4gIFxuXG4gIFxuICBcbiBcbiAgXG5yZXR1cm57bWFrZVN0YXRpc3RpY3N9XG59KSgpXG5cbmZ1bmN0aW9uIFVwZGF0ZU51bWJlck9mUHJvamVjdHMoKSB7XG4gIGlmKGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uPT09XCJIb21lXCIpe1xuICBsZXQgUHJvamVjdE51bWJlcj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdE51bWJlcicpXG4gIFByb2plY3ROdW1iZXIudGV4dENvbnRlbnQ9YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aDtcbiAgfVxufVxuZXhwb3J0IGxldCBtb3ZpbmdUYXNrcz0oKCk9PntcbiAgZnVuY3Rpb24gbWFrZVRhc2tib3goKSB7XG4gICAgXG4gIGxldCBUYXNrQm94PWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ2RpdicsXCJUYXNrQm94XCIsY29udGVudFRvYmV1cGRhdGVkQ2hhbmdpbmdQcm9qZWN0cy5jb250ZW50KVxuICByZXR1cm4gVGFza0JveFxuICB9XG4gICBcbmxldCB0YXNrY2FyZHM9KCh7dGl0bGUsZGVzY3JpcHRpb24sZGF0ZSxwcmlvcml0eSxzdGF0dXN9LFRhc2tCb3g9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI1Rhc2tCb3gnKSk9PntcblxuICAgIGxldCB0YXNrRGl2PWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ2RpdicsXCJUYXNrRGl2XCIsVGFza0JveClcbiAgICBcbiAgICBsZXQgZGF0ZURpdj1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdkaXYnLFwiZGF0ZURpdlwiLHRhc2tEaXYpXG5cbiAgICBcbiAgICBsZXQgRGF0ZT1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdwJyxcImRheXNSZW1haW5pbmdcIixkYXRlRGl2LGRhdGUpO1xuICAgIGxldCBkZWxldGVidXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiZGVsZXRlVGFza1wiLGRhdGVEaXYpXG4gICAgbGV0IGRlbGV0ZUljb249ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKGRlbGV0ZWljb24sZGVsZXRlYnV0dG9uLFwiZGVsZXRlSWNvblwiKTtcbiAgICBsZXQgdGFza1RpdGxlPWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ3AnLFwidGFza1RpdGxlXCIsdGFza0Rpdix0aXRsZSk7XG4gICAgbGV0IERlc2NyaXB0aW9uVGFzaz1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdwJyxcImV4cGxhaW5hdGlvblRhc2tcIix0YXNrRGl2LGRlc2NyaXB0aW9uKVxuICAgIGxldCBidXR0b25zTWFuaXB1bGF0aW9uRGl2PWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ2RpdicsXCJidXR0b25zTWFuaXB1bGF0aW9uRGl2XCIsdGFza0RpdilcbiAgICBsZXQgUHJpb3JpdHlUYWc9Y29udGVudEJveGVsZW1lbnRNYWtlcignYnV0dG9uJyxcIlByaW90cml0eVwiLGJ1dHRvbnNNYW5pcHVsYXRpb25EaXYscHJpb3JpdHkpXG4gICAgbGV0IGVkaXQ9Y29udGVudEJveGVsZW1lbnRNYWtlcignYnV0dG9uJyxcImVkaXRUYXNrXCIsYnV0dG9uc01hbmlwdWxhdGlvbkRpdixcImVkaXRcIik7XG4gICAgbGV0IGNvbXBsZXRlPWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ2lucHV0JyxcImNvbXBsZXRlVGFza1wiLGJ1dHRvbnNNYW5pcHVsYXRpb25EaXYsc3RhdHVzKTtcbiAgICAvL3JlLWZhY3RvciB0aGlzIG1ha2UgYSBmblxuICAgIGlmIChzdGF0dXM9PT1cImRvbmVcIil7XG5cbiAgICAgY29tcGxldGUuY2hlY2tlZD10cnVlO1xuICAgICB0YXNrVGl0bGUuc3R5bGUuc2V0UHJvcGVydHkoXCJ0ZXh0LWRlY29yYXRpb25cIixcImxpbmUtdGhyb3VnaFwiKVxuICAgICBEZXNjcmlwdGlvblRhc2suc3R5bGUuc2V0UHJvcGVydHkoXCJ0ZXh0LWRlY29yYXRpb25cIixcImxpbmUtdGhyb3VnaFwiKVxuICAgIH1cblxuICBcbiAgICBjb21wbGV0ZS50eXBlPVwiY2hlY2tib3hcIjtcbiAgICBjb21wbGV0ZS50aXRsZT1cInRvb2dsZSBjb21wbGV0ZVwiXG4gICAgdGFza0Rpdi5jbGFzc05hbWU9XCJ0YXNrXCI7XG4gICAgZGF0ZURpdi5jbGFzc05hbWU9XCJ0YXNrXCI7XG4gICAgRGF0ZS5jbGFzc05hbWU9XCJ0YXNrXCI7XG4gICAgdGFza1RpdGxlLmNsYXNzTmFtZT1cInRhc2tcIjtcbiAgICBEZXNjcmlwdGlvblRhc2suY2xhc3NOYW1lPVwidGFza1wiO1xuICAgIGJ1dHRvbnNNYW5pcHVsYXRpb25EaXYuY2xhc3NOYW1lPVwidGFza1wiO1xuICAgIFByaW9yaXR5VGFnLmNsYXNzTmFtZT1cInRhc2tcIjtcbiAgICBlZGl0LmNsYXNzTmFtZT1cInRhc2tcIjtcbiAgICBjb21wbGV0ZS5jbGFzc05hbWU9XCJ0YXNrXCI7XG4gIFxuICBcbiAgXG4gIFxuICBcbiAgfSk7XG4gIFxuICBmdW5jdGlvbiBwbGFjaW5nVGFza3MoKSB7XG4gICAgY2xlYXJUYXNrQm94KCk7XG4gIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW1Rhc2tNYW5hZ2VtZW50LnByb2plY3RQb3MucG9zaXRpb25dLnByb2plY3RMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdGFzaz1hbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbVGFza01hbmFnZW1lbnQucHJvamVjdFBvcy5wb3NpdGlvbl0ucHJvamVjdExpc3RbaV07XG4gICAgICAvLyBjb25zb2xlLmxvZyh0YXNrKVxuXG4gICAgICBcbiAgICAgdGFza2NhcmRzKHRhc2spO1xuICAgIFxuICAgICBcbiAgICAgXG4gICAgfVxuICAgICBkZWxldGVpbmdUYXNrc29mcHJvamVjdC5idXR0b25NYW5hZ2VyKCk7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGNsZWFyVGFza0JveCgpe1xuICBcbiAgICBsZXQgYWxsVGFza3NjYXJkcz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFzaycpO1xuICAgIGFsbFRhc2tzY2FyZHMuZm9yRWFjaChhbGxUYXNrc2NhcmRzPT57XG4gICAgICBhbGxUYXNrc2NhcmRzLnJlbW92ZSgpO1xuICAgIH0pXG4gIFxuICBcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVBbGx0YXNrcygpIHtcbiAgICBpZihrbm93V2hpY2hzZWN0aW9uZGlhbG9naXMuc2VjdGlvbj09PVwiSG9tZVwiKXtcbiAgICAgIGxldCBudW1iZXJPZnRhc2tzPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNUYXNrTnVtYmVyJylcbiAgICAgIG51bWJlck9mdGFza3MudGV4dENvbnRlbnQ9YWxsTWF0ZXJpYWxzLmFsbFRhc2tzLmxlbmd0aDtcblxuICAgIH1cbiAgIFxuICB9XG5cblxuXG5yZXR1cm57cGxhY2luZ1Rhc2tzLHVwZGF0ZUFsbHRhc2tzLG1ha2VUYXNrYm94LHRhc2tjYXJkc307XG59KSgpXG5sZXQgdGFza0JveHRva2VlcFRhc2tzPSgoKT0+e1xubGV0IFRhc2tCb3g9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxcIlRhc2tCb3hcIixjb250ZW50VG9iZXVwZGF0ZWRDaGFuZ2luZ1Byb2plY3RzLmNvbnRlbnQpO1xuXG5cbnJldHVybiB7VGFza0JveH07XG59KSgpXG5cblxuXG5leHBvcnQgbGV0IGRlZmF1bHRQcm9qZWN0QnV0dG9uPSgoKT0+e1xuICBsZXQgcHJvamVjdEJ1dHRvbj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcHJvamVjdCcpO1xuXG4gIGxldCBkZWZhdWx0UHJvamVjdD1wcm9qZWN0QnV0dG9uWzBdXG5cblxucmV0dXJue2RlZmF1bHRQcm9qZWN0fVxufSkoKVxuXG4gZnVuY3Rpb24gcHJvamVjdEJ1dHRvbnMoKXtcbiAgbGV0IGFsbHByb2plY3RCdXR0b25zPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNwcm9qZWN0Jyk7XG4gXG4gIGxldCBpbmRleD0wO1xuICBhbGxwcm9qZWN0QnV0dG9ucy5mb3JFYWNoKHByb2plY3RCdXR0b249PntcbiAgIFxuICAgIFxuICAgICAgbGV0IFRhc2tQbGFjaW5nPW5ldyBUYXNraW5lYWNocHJvamVjdChwcm9qZWN0QnV0dG9uLGluZGV4KVxuICAgICAgXG4gICAgIGluZGV4Kys7XG5cbiAgICBcblxuICAgIFxuXG5cbiAgfSlcblxuXG59XG5cbnByb2plY3RCdXR0b25zKCk7XG5cbmV4cG9ydCBsZXQgbW92aW5nZnJvbU9uZXByb2plY3R0b2Fub3RoZXI9KCgpPT57XG5cbiAgZnVuY3Rpb24gcmVmcmVzaFRhc2tCb3goKXtcbiAgICAgIGxldCBhbGxFbGVtZW50cz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29udGVudFRvUmVtb3ZlJyk7XG4gICAgICBhbGxFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQ9PntcblxuICAgICAgICBlbGVtZW50LnJlbW92ZSgpXG5cbiAgICAgIH0pXG4gICAgICBsZXQgYWxsdGFza3M9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhc2snKVxuICAgICAgYWxsdGFza3MuZm9yRWFjaChlbGVtZW50PT57XG5cbiAgICAgICAgZWxlbWVudC5yZW1vdmUoKVxuICAgICAgfSlcbiAgICAgIGZ1bmN0aW9uIFRhc2tCb3hjbGVhbnVwKCkge1xuICAgICAgICBsZXQgVGFza0JveD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjVGFza0JveCcpXG4gICAgICAgIFRhc2tCb3guZm9yRWFjaChUYXNrQm94PT57XG4gICAgICAgICAgVGFza0JveC5yZW1vdmUoKTtcbiAgICAgIFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICBUYXNrQm94Y2xlYW51cCgpO1xuICAgICAgXG5cblxuICB9XG5cblxuXG5yZXR1cm4ge3JlZnJlc2hUYXNrQm94LFRhc2tCb3hjbGVhbnVwfTtcbn0pKClcblxuXG5sZXQgSG9tZWJ1dHRvbj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaG9tZURpdicpO1xuXG5mdW5jdGlvbiBob21lQnV0dG9uUmVzZXQoKSB7XG4gIG1vdmluZ2Zyb21PbmVwcm9qZWN0dG9hbm90aGVyLnJlZnJlc2hUYXNrQm94KCk7XG4gICAgc3RhdGlzdGljcy5tYWtlU3RhdGlzdGljcygpO1xuICAgIG1vdmluZ1Rhc2tzLm1ha2VUYXNrYm94KCk7XG4gICAgVXBkYXRlTnVtYmVyT2ZQcm9qZWN0cygpXG5cbiAgICAvLyBtb3ZpbmdUYXNrcy5wbGFjaW5nVGFza3MoKTtcbiAgICAvLyBtb3ZpbmdUYXNrcy51cGRhdGVBbGx0YXNrcygpO1xuICAgIGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uPVwiSG9tZVwiO1xuICAgIGtub3dzZWN0aW9uKCk7XG4gICAgY29tcGxldGVUYXNrLm1hbmFnZUNoZWNrYm94KCk7XG4gICAgdXBkYXRpbmdDb21wbGV0ZWRUYXNrKClcbiAgICAvLyBzZXR0aW5nQWxsdGFza3NpbkhvbWUoKVxufVxuXG5Ib21lYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbihlKXtcblxuICBob21lQnV0dG9uUmVzZXQoKTtcblxufSlcblxuZXhwb3J0IGxldCBwcm9qZWN0QnV0dG9uQWN0aW9uc1RvZ2l2ZVRhc2tzPSgoKT0+e1xuXG5cbiAgZnVuY3Rpb24gY3JlYXRlVGFza0JveGZvclByb2plY3QoKXtcblxuICAgIGxldCBUYXNrQm94Zm9yUHJvamVjdD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJUYXNrQm94XCIsZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnRUb2JlVXBkYXRlZCcpKTtcbiAgICBUYXNrQm94Zm9yUHJvamVjdC5jbGFzc05hbWU9XCIuY29udGVudFRvUmVtb3ZlXCI7XG4gICAgXG4gICAgXG4gICAgLy8gcmV0dXJuIFRhc2tCb3hmb3JQcm9qZWN0a25vd1doaWNoc2VjdGlvbmRpYWxvZ2lzLnNlY3Rpb249XCJUb2RheVwiXG4gICAgfVxuXG4gIGZ1bmN0aW9uIG5hdmlnYXRpbmdUaGVQcm9qZWN0QW5kR2l2aW5nVGFza3MoaW5kZXgpe1xuICAgXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8ICBhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaW5kZXhdLnByb2plY3RMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBcbiAgICAgIG1vdmluZ1Rhc2tzLnRhc2tjYXJkcyhhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaW5kZXhdLnByb2plY3RMaXN0W2ldKVxuICAgICAgXG4gICAgfVxuXG5cblxuXG5cbiAgfVxuXG5cblxucmV0dXJuIHtjcmVhdGVUYXNrQm94Zm9yUHJvamVjdCxuYXZpZ2F0aW5nVGhlUHJvamVjdEFuZEdpdmluZ1Rhc2tzfVxufSkoKVxuZnVuY3Rpb24gVGFza0JveGNsZWFudXAoKSB7XG4gIGxldCBUYXNrQm94PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrJylcbiAgVGFza0JveC5mb3JFYWNoKFRhc2tCb3g9PntcbiAgICBUYXNrQm94LnJlbW92ZSgpO1xuXG4gIH0pXG59XG4vLyBtb3ZpbmdUYXNrcy5tYWtlVGFza2JveCgpO1xuZnVuY3Rpb24gc2V0dGluZ0FsbHRhc2tzaW5Ib21lKCkge1xuVGFza0JveGNsZWFudXAoKTtcbmNvbnNvbGUubG9nKFwiaGVsbG9cIik7XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgYWxsTWF0ZXJpYWxzLmFsbFRhc2tzLmxlbmd0aDsgaSsrKSB7XG4gIC8vIGNvbnNvbGUubG9nKGFsbE1hdGVyaWFscy5hbGxUYXNrc1tpXSk7XG4gbW92aW5nVGFza3MudGFza2NhcmRzKGFsbE1hdGVyaWFscy5hbGxUYXNrc1tpXSlcbiAgXG59XG5cblxuICBcbn1cblxuc2V0dGluZ0FsbHRhc2tzaW5Ib21lKCk7XG5cbmV4cG9ydCBsZXQgY29tcGxldGVUYXNrPSgoKT0+e1xuXG4gIGZ1bmN0aW9uIG1hbmFnZUNoZWNrYm94KCkge1xuICAgIGxldCBpbmRleD0wO1xubGV0IGNoZWNrYm94T2Zjb21wbGV0ZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjY29tcGxldGVUYXNrJyk7XG5cbmNoZWNrYm94T2Zjb21wbGV0ZS5mb3JFYWNoKGNoZWNrYm94PT57XG5cbiAgbGV0IGNvbXBsZXRlPW5ldyBjb21wbGV0ZUJ1dHRvbmZvckVhY2hQcm9qZWN0KGNoZWNrYm94LGluZGV4KVxuICBpbmRleCsrO1xufSlcbiAgICBcbiAgfVxuXG5cblxuXG5cbnJldHVybiB7bWFuYWdlQ2hlY2tib3h9XG5cbn0pKClcblxuZXhwb3J0IGxldCBzdHJpa2VPdXRlZmZlY3Q9KCgpPT57XG5cbiAgZnVuY3Rpb24gc3RyaWtlb3V0V29yZHMocG9zaXRpb24sY2hvc2VuU3R5bGU9XCJsaW5lLXRocm91Z2hcIikge1xuICAgIGxldCBhbGxUYXNrdGl0bGVzPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN0YXNrVGl0bGUnKVxuICAgIGxldCBleHBsYWluYXRpb25UYXNrPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNleHBsYWluYXRpb25UYXNrJylcblxuICAgIGFsbFRhc2t0aXRsZXNbcG9zaXRpb25dLnN0eWxlLnNldFByb3BlcnR5KFwidGV4dC1kZWNvcmF0aW9uXCIsY2hvc2VuU3R5bGUpO1xuICAgIGV4cGxhaW5hdGlvblRhc2tbcG9zaXRpb25dLnN0eWxlLnNldFByb3BlcnR5KFwidGV4dC1kZWNvcmF0aW9uXCIsY2hvc2VuU3R5bGUpO1xuICB9XG4gIFxuXG5cblxucmV0dXJuIHtzdHJpa2VvdXRXb3Jkc31cbn0pKClcblxuXG5mdW5jdGlvbiBrZWVwaW5nU3RyaWtlT3V0KHtzdGF0dXN9LCkge1xuICBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0aW5nQ29tcGxldGVkVGFzaygpIHtcbiAgbGV0IHVwZGF0ZVRhc2s9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbXBsZXRlZE51bWJlcicpO1xuICBsZXQgbnVtYmVycz1hbW91bnRvZkNvbXBsZXRlZFRhc2tzLmNvdW50Q29tcGxldGVkVGFza3MoKVxuICB1cGRhdGVUYXNrLnRleHRDb250ZW50PW51bWJlcnM7XG4gIC8vIGNvbnNvbGUubG9nKGFtb3VudG9mQ29tcGxldGVkVGFza3MuY291bnRDb21wbGV0ZWRUYXNrcygpKTtcbn1cblxudXBkYXRpbmdDb21wbGV0ZWRUYXNrKCk7XG5cbmxldCB0b2RheUJ1dHRvbkZ1bmN0aW9uYWxpdGllcz0oKCk9PntcblxuICAgIGxldCB0b2RheUJ1dHRvbj1zaWRlYmFyLlRvZGF5O1xuXG4gICAgZnVuY3Rpb24gdG9kYXlUYXNrKCkge1xuICAgICAgbW92aW5nZnJvbU9uZXByb2plY3R0b2Fub3RoZXIucmVmcmVzaFRhc2tCb3goKTtcbiAgICAgIG1vdmluZ1Rhc2tzLm1ha2VUYXNrYm94KCk7XG4gICAgICBcbiAgICAgIGFycmFuZ2VEYXRlcy50b2RheURhdGVzKClcbiAgICAgIFxuICAgICAgXG4gICAgfVxuICAgIHRvZGF5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbihlKXtcbiAgICAgIFxuICAgICAga25vd1doaWNoc2VjdGlvbmRpYWxvZ2lzLnNlY3Rpb249XCJUb2RheVwiXG4gICAgICB0b2RheVRhc2soKVxuICAgIH0pXG5cblxuXG5yZXR1cm4ge3RvZGF5VGFza31cbn0pKClcblxuXG5sZXQgb3JkZXJUYXNrcz0oKCk9PntcblxuICBsZXQgY2FsZW5kZXI9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhbGVuZGVyJyk7XG4gIGZ1bmN0aW9uIGFycmFuZ2VUYXNrKCkge1xuICAgIG1vdmluZ2Zyb21PbmVwcm9qZWN0dG9hbm90aGVyLnJlZnJlc2hUYXNrQm94KCk7XG4gICAgXG4gIH1cbiAgZnVuY3Rpb24gbWFrZVRoZWJveGVzRm9yRWFjaGRheSgpIHtcbiAgICBsZXQgSG9sZGVyZm9yRGF0ZXM9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxcImhvbGRlcmZvckRhdGVzXCIsZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnRUb2JlVXBkYXRlZCcpKVxuICAgIGxldCBUb2RheUJveD1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdkaXYnLFwiVG9kYXlCb3hcIixIb2xkZXJmb3JEYXRlcylcbiAgICBsZXQgVG9kYXloZWFkaW5nPWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ3AnLFwiaGVhZGluZ1wiLFRvZGF5Qm94LFwiVG9tb3Jyb3dcIilcbiAgICBsZXQgdGFza2JveFRvZGF5PWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ2RpdicsXCJ0YXNrQm94VG9kYXlcIixUb2RheUJveClcbiAgICBsZXQgdG9tb3Jyb3dCb3g9Y29udGVudEJveGVsZW1lbnRNYWtlciAoJ2RpdicsXCJ0b21vcnJvd0JveFwiLEhvbGRlcmZvckRhdGVzKTtcbiAgIFxuICAgIGxldCB0b21vcnJvd0hlYWRpbmc9Y29udGVudEJveGVsZW1lbnRNYWtlcigncCcsXCJ0b21vcnJvd0hlYWRpbmdcIix0b21vcnJvd0JveCxhZGQobmV3IERhdGUoKSx7ZGF5czoyfSkudG9Mb2NhbGVTdHJpbmcoJ2VuLXVzJyx7ZGF5OidudW1lcmljJyxtb250aDonbG9uZyd9KSlcbiAgICBsZXQgdGFza1RvbW9ycm93Ym94PWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ2RpdicsXCJ0YXNrQm94dG9tb3Jyb3dcIix0b21vcnJvd0JveClcbiAgICBcbiAgfVxuXG5jYWxlbmRlci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsZnVuY3Rpb24gKGUpIHtcblxuICBhcnJhbmdlVGFzaygpO1xuICBtYWtlVGhlYm94ZXNGb3JFYWNoZGF5KClcbiAgYXJyYW5nZURhdGVzLlRvbW9ycm93RGF0ZXMoKTtcbiAgYXJyYW5nZURhdGVzLmFEYXlhZnRlcigpXG59KVxuXG5cblxuXG59KSgpXG4vLyBkZWxldGVpbmdUYXNrcy5jbGVhck92ZXJkdWUoKVxuXG5leHBvcnQgbGV0IGRlbGV0ZWluZ1Rhc2tzb2Zwcm9qZWN0PSgoKT0+e1xuXG5cbiAgZnVuY3Rpb24gYnV0dG9uTWFuYWdlcigpIHtcbiAgICBsZXQgYWxsRGVsZXRpbmdCdXR0b249ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI2RlbGV0ZVRhc2snKTtcbiAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsRGVsZXRpbmdCdXR0b24ubGVuZ3RoOyBpKyspIHtcbiAgICAgIFxuICAgICAgbGV0IGJ1dHRvbk1hbmFnZW1lbnQ9bmV3IGRlbGV0ZVRhc2tzLmRlbGV0ZVRhc2soYWxsRGVsZXRpbmdCdXR0b25baV0saSk7XG4gICAgICBcbiAgICAgIFxuICAgIH1cblxuICAgICAgICAgICAgICAgIFxuXG4gICAgXG4gIH1cblxuXG5idXR0b25NYW5hZ2VyKCk7XG5cbnJldHVybiB7YnV0dG9uTWFuYWdlcn1cbn0pKCkiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsInRvSW50ZWdlciIsImRpcnR5TnVtYmVyIiwiTmFOIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNOYU4iLCJNYXRoIiwiY2VpbCIsImZsb29yIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwiVHlwZUVycm9yIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmd1bWVudHMiLCJhcmdTdHIiLCJPYmplY3QiLCJjYWxsIiwiRGF0ZSIsImdldFRpbWUiLCJjb25zb2xlIiwid2FybiIsInN0YWNrIiwiYWRkIiwiZGlydHlEYXRlIiwiZHVyYXRpb24iLCJ5ZWFycyIsIm1vbnRocyIsIndlZWtzIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJkYXRlIiwiZGF0ZVdpdGhNb250aHMiLCJkaXJ0eUFtb3VudCIsImFtb3VudCIsImRheU9mTW9udGgiLCJnZXREYXRlIiwiZW5kT2ZEZXNpcmVkTW9udGgiLCJzZXRNb250aCIsImdldE1vbnRoIiwic2V0RnVsbFllYXIiLCJnZXRGdWxsWWVhciIsImFkZE1vbnRocyIsImRhdGVXaXRoRGF5cyIsInNldERhdGUiLCJhZGREYXlzIiwibXNUb0FkZCIsImxvY2FscyIsImFsbE1hdGVyaWFscyIsImFsbFByb2plY3RzIiwiYWxsVGFza3MiLCJQcm9qZWN0TWFuYWdlbWVudCIsInByb2plY3RUaXRsZSIsInByb2plY3RMaXN0IiwiTmV3UHJvamVjdCIsIlRhc2tNYW5hZ2VtZW50IiwicHJvamVjdFBvcyIsInBvc2l0aW9uIiwiY3JlYXRlVGFzayIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJwcmlvcml0eSIsInN0YXR1cyIsInByb2plY3RCZWxvbmciLCJQcm9qZWN0IiwiZmluZGluZ1Rhc2siLCJ4IiwibG9nIiwiYWRkVGFza3RvUHJvamVjdCIsInRhc2siLCJwcm9qZWN0IiwiYWRkaW5nVG9hbGxUYXNrcyIsImFtb3VudG9mQ29tcGxldGVkVGFza3MiLCJjb3VudENvbXBsZXRlZFRhc2tzIiwiY291bnRlciIsImZvckVhY2giLCJhcnJhbmdlRGF0ZXMiLCJ0b0lTT1N0cmluZyIsIm1vdmluZ1Rhc2tzIiwidGFza2NhcmRzIiwic3BhY2VUcmF2ZWxzIiwiVGFza2luZWFjaHByb2plY3QiLCJwcm9qZWN0QnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm5vdEhvbWVzZWN0aW9uIiwic3R5bGluZ1NsZWxlY3RlZEJ1dHRvbnMiLCJyZXR1cm5BbGxidXR0b25zdGx5ZXNUb2RlZmF1bHQiLCJtYWtpbmdUaGVCdXR0b25HbG93IiwibW92aW5nZnJvbU9uZXByb2plY3R0b2Fub3RoZXIiLCJyZWZyZXNoVGFza0JveCIsInByb2plY3RCdXR0b25BY3Rpb25zVG9naXZlVGFza3MiLCJjcmVhdGVUYXNrQm94Zm9yUHJvamVjdCIsIm5hdmlnYXRpbmdUaGVQcm9qZWN0QW5kR2l2aW5nVGFza3MiLCJjb21wbGV0ZVRhc2siLCJtYW5hZ2VDaGVja2JveCIsImRlbGV0ZWluZ1Rhc2tzb2Zwcm9qZWN0IiwiYnV0dG9uTWFuYWdlciIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZGF5IiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRVVENGdWxsWWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJkZWZhdWx0T3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwic3RhcnRPZlVUQ1dlZWsiLCJfcmVmIiwiX3JlZjIiLCJfcmVmMyIsIl9vcHRpb25zJHdlZWtTdGFydHNPbiIsIl9vcHRpb25zJGxvY2FsZSIsIl9vcHRpb25zJGxvY2FsZSRvcHRpbyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbCIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDIiLCJ3ZWVrU3RhcnRzT24iLCJsb2NhbGUiLCJSYW5nZUVycm9yIiwiZ2V0VVRDV2Vla1llYXIiLCJfb3B0aW9ucyRmaXJzdFdlZWtDb24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ24iLCJvdXRwdXQiLCJhYnMiLCJ0b2tlbiIsInNpZ25lZFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicG93IiwiRyIsImxvY2FsaXplIiwiZXJhIiwid2lkdGgiLCJ5Iiwib3JkaW5hbE51bWJlciIsInVuaXQiLCJsaWdodEZvcm1hdHRlcnMiLCJZIiwic2lnbmVkV2Vla1llYXIiLCJ3ZWVrWWVhciIsIlIiLCJ1IiwiUSIsInF1YXJ0ZXIiLCJjb250ZXh0IiwicSIsIk0iLCJMIiwidyIsIndlZWsiLCJmaXJzdFdlZWsiLCJzdGFydE9mVVRDV2Vla1llYXIiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImZvdXJ0aE9mSmFudWFyeSIsInN0YXJ0T2ZVVENJU09XZWVrWWVhciIsImdldFVUQ0lTT1dlZWsiLCJkIiwiRCIsImRheU9mWWVhciIsInRpbWVzdGFtcCIsInNldFVUQ01vbnRoIiwiZGlmZmVyZW5jZSIsImdldFVUQ0RheU9mWWVhciIsIkUiLCJkYXlPZldlZWsiLCJsb2NhbERheU9mV2VlayIsImMiLCJpc29EYXlPZldlZWsiLCJhIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZGF5UGVyaW9kIiwidG9Mb3dlckNhc2UiLCJiIiwiQiIsImgiLCJIIiwiSyIsIm0iLCJzIiwiUyIsIlgiLCJfbG9jYWxpemUiLCJ0aW1lem9uZU9mZnNldCIsIl9vcmlnaW5hbERhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsImZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyIsImZvcm1hdFRpbWV6b25lIiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsImRlbGltaXRlciIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsImZvcm1hdExvbmciLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsInRpbWUiLCJwIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZSIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImZvcm1hdCIsImlucHV0IiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0cyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsInZhbHVlc0FycmF5IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsIl9vcHRpb25zIiwicmVtMTAwIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJ2YWx1ZSIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJhcnJheSIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsIm9iamVjdCIsImhhc093blByb3BlcnR5IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0IiwicGFyc2VQYXR0ZXJuIiwicGFyc2VJbnQiLCJwYXJzZVJlc3VsdCIsImFueSIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsInRva2VuVmFsdWUiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZGlydHlGb3JtYXRTdHIiLCJfcmVmNCIsIl9vcHRpb25zJGxvY2FsZTIiLCJfb3B0aW9ucyRsb2NhbGUyJG9wdGkiLCJfcmVmNSIsIl9yZWY2IiwiX3JlZjciLCJfb3B0aW9ucyRsb2NhbGUzIiwiX29wdGlvbnMkbG9jYWxlMyRvcHRpIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDQiLCJmb3JtYXRTdHIiLCJkZWZhdWx0TG9jYWxlIiwiaXNEYXRlIiwiaXNWYWxpZCIsInV0Y0RhdGUiLCJVVEMiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsImFkZE1pbGxpc2Vjb25kcyIsInN1Yk1pbGxpc2Vjb25kcyIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJtYXRjaGVkIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwiaW5kZXhPZiIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiY29tcGxldGVCdXR0b25mb3JFYWNoUHJvamVjdCIsIlRhc2tCdXR0b24iLCJjaGVja2VkIiwia25vd1doaWNoc2VjdGlvbmRpYWxvZ2lzIiwic2VjdGlvbiIsInByb2plY3RCb3giLCJzdHJpa2VPdXRlZmZlY3QiLCJzdHJpa2VvdXRXb3JkcyIsInVwZGF0aW5nQ29tcGxldGVkVGFzayIsImlzQWZ0ZXIiLCJkaXJ0eURhdGVUb0NvbXBhcmUiLCJkYXRlVG9Db21wYXJlIiwiZGVsZXRlVGFza3MiLCJkZWxldGluZ1NwZWNpZmljVGFzayIsImNsZWFyT3ZlcmR1ZSIsImFsZXJ0IiwiZGVsZXRlVGFzayIsImJ1dHRvbiIsInBsYWNpbmdUYXNrcyIsInVwZGF0ZUFsbHRhc2tzIiwiZG9tRWxlbWVudE1ha2VyIiwiZG9tRWxlbWVudENyZWF0b3IiLCJ0eXBlIiwibmV3SWQiLCJwYXJlbnRCb3giLCJXb3JkcyIsInBsYWNlaG9sZGVyV29yZHMiLCJuZXdFbGVtZW50IiwidGV4dENvbnRlbnQiLCJwbGFjZWhvbGRlciIsIkltYWdlTG9hZHRvRE9tIiwiSWNvbiIsImlkTmFtZSIsIm15SWNvbiIsIkltYWdlIiwic3JjIiwic2lkZWJhciIsInNpZGVyYm94IiwiYm9keSIsImFwcFRpdGxlSG9sZGVyIiwiaG9tZUJ1dHRvbiIsIlRvZGF5IiwiRGF0ZXNBcnJhbmdlZEJ1dHRvbiIsIlByb2plY3RzQnV0dG9uIiwiZGl2UHJvamVjdHNTZWN0aW9uIiwiY3JlYXRlcHJvamVjdHNCdXR0b24iLCJjcmVhdGVUYXNraWNvbiIsInRvcEJveCIsImFkZFRhc2siLCJpbnB1dEJveGNyZWF0ZVByb2plY3RzIiwiZGlhbG9nQm94IiwibWVzc2FnZUJveGRpdiIsInByb2plY3ROYW1laW5wdXQiLCJidXR0b25zZGl2IiwiY2FuY2VsQnV0dG9uIiwiZG9uZUJ1dHRvbiIsInNob3dNb2RhbCIsIm5ld1Byb2plY3QiLCJmcm9tRG9tdG9BbGxwcm9qZWN0cyIsImNyZWF0ZUJ1dHRvbnNGcm9tQWxsUHJvamVjdHMiLCJVcGRhdGVOdW1iZXJPZlByb2plY3RzIiwicHJvamVjdEJ1dHRvbnMiLCJwcmV2ZW50RGVmYXVsdCIsImNsb3NlIiwicXVlcnlTZWxlY3RvckFsbCIsIkJ1dHRvbiIsInNldFByb3BlcnR5IiwiY3JlYXRlVGFza0RpYWxvZyIsImRpYWxvZ1Rhc2siLCJSZXF1aXJlbWVudHNGb3JtIiwiVGFza05hbWUiLCJUYXNrRGVzY3JpcHRpb24iLCJyb3dzIiwiUHJpb3JpdHlEcm9wZG93biIsIk9wdGlvbkhpZ2giLCJPcHRpb25NZWRpdW0iLCJPcHRpb25Mb3ciLCJzZWxlY3RlZCIsImJ1dHRvbkhvbGRlciIsImNhbmNlbFRhc2siLCJrbm93c2VjdGlvbiIsInNldHRpbmdBbGx0YXNrc2luSG9tZSIsInRvZGF5QnV0dG9uRnVuY3Rpb25hbGl0aWVzIiwidG9kYXlUYXNrIiwicHJvamVjdHMiLCJhcnJheU9mcHJvamVjdHMiLCJjbGFzc05hbWUiLCJuZXdUYXNrIiwiY29udGVudFRvYmV1cGRhdGVkQ2hhbmdpbmdQcm9qZWN0cyIsImNvbnRlbnRCb3hlbGVtZW50TWFrZXIiLCJjbGFzc1RpdGxlIiwic3RhdGlzdGljcyIsIm1ha2VTdGF0aXN0aWNzIiwic3RhdGlzdGljc0hvbGRlcmJveCIsImNhcmROYW1lcyIsIm5hbWVzT2ZTdGF0cyIsImNhcmREZXRhaWxzIiwiaWNvbnMiLCJpZE5hbWVzIiwic3RhdGljc09mY2FyZCIsInNwZWNpZmljTmFtZWZvckVudHJ5IiwiYmFja2Ryb3BzIiwiY2FyZERJViIsImluZm9ybWF0aW9uSG9sZGVyIiwiSWNvbkRpdiIsIlRhc2tCb3giLCJ0YXNrRGl2IiwiZGF0ZURpdiIsImRlbGV0ZWJ1dHRvbiIsInRhc2tUaXRsZSIsIkRlc2NyaXB0aW9uVGFzayIsImJ1dHRvbnNNYW5pcHVsYXRpb25EaXYiLCJQcmlvcml0eVRhZyIsImVkaXQiLCJjb21wbGV0ZSIsImFsbFRhc2tzY2FyZHMiLCJtYWtlVGFza2JveCIsImFsbHByb2plY3RCdXR0b25zIiwiVGFza0JveGNsZWFudXAiLCJjaGVja2JveCIsImNob3NlblN0eWxlIiwiYWxsVGFza3RpdGxlcyIsImV4cGxhaW5hdGlvblRhc2siLCJ1cGRhdGVUYXNrIiwibnVtYmVycyIsIkhvbGRlcmZvckRhdGVzIiwiVG9kYXlCb3giLCJ0b21vcnJvd0JveCIsInRvTG9jYWxlU3RyaW5nIiwibWFrZVRoZWJveGVzRm9yRWFjaGRheSIsImFsbERlbGV0aW5nQnV0dG9uIl0sInNvdXJjZVJvb3QiOiIifQ==