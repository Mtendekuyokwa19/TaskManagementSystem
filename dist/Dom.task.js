(self.webpackChunktaskmanagementsystem=self.webpackChunktaskmanagementsystem||[]).push([[92],{426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>A});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),l=t(667),s=t.n(l),d=new URL(t(250),t.b),c=i()(r());c.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap);"]);var u=s()(d);c.push([n.id,`\n\n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(${u});\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 159px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#3754DB;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\n\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button:first-child{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:first-child:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    display: flex;\n    flex-direction: column;\n    overflow: auto;\n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n#TaskBox{\n  margin-top:12px;\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(3,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\n  flex-grow: 1;\n  padding: 0px 37px;\n  gap: 12px;\n  overflow: auto;\n}\n#TaskDiv{\n\n  background-color:#161a23 ;\n padding: 12px;\n display: flex;\n flex-direction: column;\n gap: 4px;\n border-radius: 12px;\n\n}\n\n#daysRemaining{\n\n  font-size: 12px;\n  color: #666666;\n  letter-spacing: 1px;\n  width: 73px;\n\n\n}\n\n#TaskTitle{\n\nfont-weight: bold;\n\n\n}\n\n#explainationTask{\n\nfont-style: italic;\nfont-size: 14px;\nfont-weight: 100;\ncolor: #666666;\n\n\n}\n\n#buttonsManipulationDiv{\n\ndisplay: flex;\ngap:6px;\njustify-content: flex-end;\n\n}\n#buttonsManipulationDiv button{\n\n  width: 71px;\n  height: 27px;\n  text-decoration: none;\n\n}\n\n#buttonsManipulationDiv button:first-child{\n\n  background-color: transparent;\n  color: #F39C12;\n  border: solid 2px #F39C12;\n  border-radius: 34px;\n  text-decoration: none;\n\n\n}\n#buttonsManipulationDiv button:nth-child(2){\n\n  background-color:#3754DB;\n  color: white;\n  border: none;\n  outline: none;\n  text-decoration: none;\n\n\n\n}\n#buttonsManipulationDiv button:nth-child(3){\nbackground-color: rgb(102, 33, 33);\ncolor: white;\nborder: none;\noutline: none;\n\n}\n\ninput[type="checkbox"]{\n\n  width: 28px;\n  height: 28px;\n\n  /* background:  */\n  appearance: none;\n  background-color: none;\n  border: 2px #ced4da solid;\n  border-radius: 8px;\n \n}\ninput[type="checkbox"]:checked{\n\n  background-color: #27AE60;\n  border: none;\n  \n\n\n}\n#dateDiv{\n\n  display: flex;\n  gap: 387px;\n  font-weight: bold;\n\n}\n\n#dateDiv button{\n\n  background-color: transparent;\n  \n  border: none;\n\n}\n#holderforDates{\n\n  \n  flex-grow: 1;\n  /* border: 2px solid red; */\n  display: flex;\n  flex-direction: column;\n\n\n}\n\n#holderforDates>div{\n\n  flex-grow: 1;\n\n  /* border: solid blue 2px; */\n  overflow: auto;\n\n\n}\n#TodayBox,#tomorrowBox{\n\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n\n\n}\n#TodayBox>div,#tomorrowBox>div{\n\n  /* border: 2px solid yellow; */\nflex-grow: 1;\n\n}\n\n#TodayBox>p,#tomorrowBox>p{\nfont-weight: bold;\n  \n}\n#taskBoxToday,#taskBoxtomorrow{\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(2,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\npadding: 13px;\ngap: 12px;\npadding: 0px 37px;\nmargin-top: 16px;\n\n\n}\n\n#projectDiv{\n\n\n  display: flex;\n  gap: 8px;\n\n}\n\n#close{\n\n  background-color: transparent;\n  border: none;\n \n  color:#828489;\n font-weight: bold;\n font-style: normal;\n \n  font-size: 14px;\n  text-align: center;\n\n\n\n}\n\n#close:hover{\n\n  color:rgb(185, 13, 13);\n\n}\n\n\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["\n\n  @import url('https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap');\n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(./icons/linuxHead.png);\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 159px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#3754DB;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\n\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button:first-child{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:first-child:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    display: flex;\n    flex-direction: column;\n    overflow: auto;\n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n#TaskBox{\n  margin-top:12px;\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(3,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\n  flex-grow: 1;\n  padding: 0px 37px;\n  gap: 12px;\n  overflow: auto;\n}\n#TaskDiv{\n\n  background-color:#161a23 ;\n padding: 12px;\n display: flex;\n flex-direction: column;\n gap: 4px;\n border-radius: 12px;\n\n}\n\n#daysRemaining{\n\n  font-size: 12px;\n  color: #666666;\n  letter-spacing: 1px;\n  width: 73px;\n\n\n}\n\n#TaskTitle{\n\nfont-weight: bold;\n\n\n}\n\n#explainationTask{\n\nfont-style: italic;\nfont-size: 14px;\nfont-weight: 100;\ncolor: #666666;\n\n\n}\n\n#buttonsManipulationDiv{\n\ndisplay: flex;\ngap:6px;\njustify-content: flex-end;\n\n}\n#buttonsManipulationDiv button{\n\n  width: 71px;\n  height: 27px;\n  text-decoration: none;\n\n}\n\n#buttonsManipulationDiv button:first-child{\n\n  background-color: transparent;\n  color: #F39C12;\n  border: solid 2px #F39C12;\n  border-radius: 34px;\n  text-decoration: none;\n\n\n}\n#buttonsManipulationDiv button:nth-child(2){\n\n  background-color:#3754DB;\n  color: white;\n  border: none;\n  outline: none;\n  text-decoration: none;\n\n\n\n}\n#buttonsManipulationDiv button:nth-child(3){\nbackground-color: rgb(102, 33, 33);\ncolor: white;\nborder: none;\noutline: none;\n\n}\n\ninput[type=\"checkbox\"]{\n\n  width: 28px;\n  height: 28px;\n\n  /* background:  */\n  appearance: none;\n  background-color: none;\n  border: 2px #ced4da solid;\n  border-radius: 8px;\n \n}\ninput[type=\"checkbox\"]:checked{\n\n  background-color: #27AE60;\n  border: none;\n  \n\n\n}\n#dateDiv{\n\n  display: flex;\n  gap: 387px;\n  font-weight: bold;\n\n}\n\n#dateDiv button{\n\n  background-color: transparent;\n  \n  border: none;\n\n}\n#holderforDates{\n\n  \n  flex-grow: 1;\n  /* border: 2px solid red; */\n  display: flex;\n  flex-direction: column;\n\n\n}\n\n#holderforDates>div{\n\n  flex-grow: 1;\n\n  /* border: solid blue 2px; */\n  overflow: auto;\n\n\n}\n#TodayBox,#tomorrowBox{\n\n  display: flex;\n  flex-direction: column;\n  padding: 12px;\n\n\n}\n#TodayBox>div,#tomorrowBox>div{\n\n  /* border: 2px solid yellow; */\nflex-grow: 1;\n\n}\n\n#TodayBox>p,#tomorrowBox>p{\nfont-weight: bold;\n  \n}\n#taskBoxToday,#taskBoxtomorrow{\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(2,120px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:120px;\npadding: 13px;\ngap: 12px;\npadding: 0px 37px;\nmargin-top: 16px;\n\n\n}\n\n#projectDiv{\n\n\n  display: flex;\n  gap: 8px;\n\n}\n\n#close{\n\n  background-color: transparent;\n  border: none;\n \n  color:#828489;\n font-weight: bold;\n font-style: normal;\n \n  font-size: 14px;\n  text-align: center;\n\n\n\n}\n\n#close:hover{\n\n  color:rgb(185, 13, 13);\n\n}\n\n\n"],sourceRoot:""}]);const A=c},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},667:n=>{"use strict";n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},729:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getDefaultOptions=function(){return t},e.setDefaultOptions=function(n){t=n};var t={}},734:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")},n.exports=e.default},84:(n,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)},n.exports=e.default},276:(n,e,t)=>{"use strict";var o=t(836).default;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n,e,t){(0,a.default)(2,arguments);var o=(0,r.default)(n,t),i=(0,r.default)(e,t);return o.getTime()===i.getTime()};var r=o(t(466)),a=o(t(734));n.exports=e.default},609:(n,e,t)=>{"use strict";var o=t(836).default;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n,e){return(0,a.default)(1,arguments),(0,r.default)(n,Date.now(),e)};var r=o(t(276)),a=o(t(734));n.exports=e.default},466:(n,e,t)=>{"use strict";var o=t(836).default;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n,e){var t,o,s,d,c,u,A,p;(0,i.default)(1,arguments);var f=(0,l.getDefaultOptions)(),m=(0,a.default)(null!==(t=null!==(o=null!==(s=null!==(d=null==e?void 0:e.weekStartsOn)&&void 0!==d?d:null==e||null===(c=e.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:f.weekStartsOn)&&void 0!==o?o:null===(A=f.locale)||void 0===A||null===(p=A.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==t?t:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=(0,r.default)(n),h=g.getDay(),b=(h<m?7:0)+h-m;return g.setDate(g.getDate()-b),g.setHours(0,0,0,0),g};var r=o(t(171)),a=o(t(84)),i=o(t(734)),l=t(729);n.exports=e.default},171:(n,e,t)=>{"use strict";var o=t(836).default;Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(n){(0,a.default)(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===(0,r.default)(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))};var r=o(t(698)),a=o(t(734));n.exports=e.default},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],l=0;l<n.length;l++){var s=n[l],d=o.base?s[0]+o.base:s[0],c=a[d]||0,u="".concat(d," ").concat(c);a[d]=c+1;var A=t(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var f=r(p,o);o.byIndex=l,e.splice(l,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var l=t(a[i]);e[l].references--}for(var s=o(n,r),d=0;d<a.length;d++){var c=t(a[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=s}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},38:(n,e,t)=>{"use strict";t.d(e,{Wl:()=>te,Ib:()=>ie,u:()=>Un,FY:()=>Jn,nr:()=>Kn,R2:()=>zn,s$:()=>$n,$t:()=>oe,kQ:()=>qn,p2:()=>re});var o=t(379),r=t.n(o),a=t(795),i=t.n(a),l=t(569),s=t.n(l),d=t(565),c=t.n(d),u=t(216),A=t.n(u),p=t(589),f=t.n(p),m=t(426),g={};function h(n){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},h(n)}function b(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function x(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function C(n){x(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===h(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function v(n,e){x(2,arguments);var t=C(n),o=b(e);return isNaN(o)?new Date(NaN):o?(t.setDate(t.getDate()+o),t):t}g.styleTagTransform=f(),g.setAttributes=c(),g.insert=s().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=A(),r()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals,t(609);let B={allProjects:[],allTasks:[]},y=function(n){for(let e=0;e<B.allProjects.length;e++)if(n===B.allProjects[e].projectTitle)return e},k=class{constructor(n){this.projectTitle=n,this.projectList=[]}},w=function(n){B.allProjects[B.allProjects.length]=n},E=(()=>{let n={position:0};return{createTask:class{constructor(n,e,t,o,r="undone",a=""){this.title=n,this.description=e,this.date=t,this.priority=o,this.status=r,this.Project=a}},findingTask:function({title:n,description:e}){for(let t=0;t<B.allProjects.length;t++)for(let o=0;o<B.allProjects[t].projectList.length;o++)if(n===B.allProjects[t].projectList[o].title&&e===B.allProjects[t].projectList[o].description)return console.log("found",o,t,B.allProjects[t].projectList[o].title),{i:t,x:o}},addTasktoProject:function(e,t=B.allProjects[n.position].projectList){t[t.length]=e},projectPos:n,addingToallTasks:function(){for(let n=0;n<B.allProjects.length;n++)for(let e=0;e<B.allProjects[n].projectList.length;e++)B.allTasks[B.allTasks.length]=B.allProjects[n].projectList[e]}}})(),T={countCompletedTasks:function(){let n=0;return B.allTasks.forEach((e=>{"done"==e.status&&n++})),console.log("here",B.allTasks),n}},j={todayDates:function(){for(let n=0;n<B.allTasks.length;n++)new Date(B.allTasks[n].date).toISOString().slice(0,10)===(new Date).toISOString().slice(0,10)&&Jn.taskcards(B.allTasks[n])},TomorrowDates,aDayafter},D=new k("Default Project");w(D);class I{constructor(n,e){this.projectButton=n.addEventListener("click",(function(t){var o;zn(),o=e,E.projectPos.position=o,qn.returnAllbuttonstlyesTodefault(),qn.makingTheButtonGlow(n),Kn.refreshTaskBox(),$n.createTaskBoxforProject(),$n.navigatingTheProjectAndGivingTasks(e),te.manageCheckbox(),ie.buttonManager()}))}}var P=t(250);const Y=t.p+"c8fd1bb6b4dfd455da79.svg",S=t.p+"04e1a7df197a2de1e626.svg",M=t.p+"79e6b39a5dedd0689ad7.svg",N=t.p+"03b02e98500c669ef571.svg",O=t.p+"819817edadaa5c76bccf.svg",W=t.p+"1213764b91350a02bb2c.svg",L=t.p+"2ac2511792bf6add08e5.svg",U=t.p+"0794abbf4bbe4158f856.svg",H=t.p+"cbf897ee25afe1cbd2d5.svg";function q(n){x(1,arguments);var e=C(n),t=e.getUTCDay(),o=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function G(n){x(1,arguments);var e=C(n),t=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(t+1,0,4),o.setUTCHours(0,0,0,0);var r=q(o),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=q(a);return e.getTime()>=r.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}var z={};function Z(){return z}function F(n,e){var t,o,r,a,i,l,s,d;x(1,arguments);var c=Z(),u=b(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:c.weekStartsOn)&&void 0!==o?o:null===(s=c.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=C(n),p=A.getUTCDay(),f=(p<u?7:0)+p-u;return A.setUTCDate(A.getUTCDate()-f),A.setUTCHours(0,0,0,0),A}function Q(n,e){var t,o,r,a,i,l,s,d;x(1,arguments);var c=C(n),u=c.getUTCFullYear(),A=Z(),p=b(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:A.firstWeekContainsDate)&&void 0!==o?o:null===(s=A.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(u+1,0,p),f.setUTCHours(0,0,0,0);var m=F(f,e),g=new Date(0);g.setUTCFullYear(u,0,p),g.setUTCHours(0,0,0,0);var h=F(g,e);return c.getTime()>=m.getTime()?u+1:c.getTime()>=h.getTime()?u:u-1}function R(n,e){for(var t=n<0?"-":"",o=Math.abs(n).toString();o.length<e;)o="0"+o;return t+o}const _=function(n,e){var t=n.getUTCFullYear(),o=t>0?t:1-t;return R("yy"===e?o%100:o,e.length)},X=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):R(t+1,2)},J=function(n,e){return R(n.getUTCDate(),e.length)},V=function(n,e){return R(n.getUTCHours()%12||12,e.length)},K=function(n,e){return R(n.getUTCHours(),e.length)},$=function(n,e){return R(n.getUTCMinutes(),e.length)},nn=function(n,e){return R(n.getUTCSeconds(),e.length)},en=function(n,e){var t=e.length,o=n.getUTCMilliseconds();return R(Math.floor(o*Math.pow(10,t-3)),e.length)};var tn={G:function(n,e,t){var o=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var o=n.getUTCFullYear(),r=o>0?o:1-o;return t.ordinalNumber(r,{unit:"year"})}return _(n,e)},Y:function(n,e,t,o){var r=Q(n,o),a=r>0?r:1-r;return"YY"===e?R(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):R(a,e.length)},R:function(n,e){return R(G(n),e.length)},u:function(n,e){return R(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return R(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return R(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,e,t){var o=n.getUTCMonth();switch(e){case"M":case"MM":return X(n,e);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(n,e,t){var o=n.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return R(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(n,e,t,o){var r=function(n,e){x(1,arguments);var t=C(n),o=F(t,e).getTime()-function(n,e){var t,o,r,a,i,l,s,d;x(1,arguments);var c=Z(),u=b(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:c.firstWeekContainsDate)&&void 0!==o?o:null===(s=c.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1),A=Q(n,e),p=new Date(0);return p.setUTCFullYear(A,0,u),p.setUTCHours(0,0,0,0),F(p,e)}(t,e).getTime();return Math.round(o/6048e5)+1}(n,o);return"wo"===e?t.ordinalNumber(r,{unit:"week"}):R(r,e.length)},I:function(n,e,t){var o=function(n){x(1,arguments);var e=C(n),t=q(e).getTime()-function(n){x(1,arguments);var e=G(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),q(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(o,{unit:"week"}):R(o,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):J(n,e)},D:function(n,e,t){var o=function(n){x(1,arguments);var e=C(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=t-e.getTime();return Math.floor(o/864e5)+1}(n);return"Do"===e?t.ordinalNumber(o,{unit:"dayOfYear"}):R(o,e.length)},E:function(n,e,t){var o=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return R(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return R(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var o=n.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return R(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(n,e,t){var o=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,e,t){var o,r=n.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,e,t){var o,r=n.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var o=n.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return V(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):K(n,e)},K:function(n,e,t){var o=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(o,{unit:"hour"}):R(o,e.length)},k:function(n,e,t){var o=n.getUTCHours();return 0===o&&(o=24),"ko"===e?t.ordinalNumber(o,{unit:"hour"}):R(o,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):$(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):nn(n,e)},S:function(n,e){return en(n,e)},X:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return rn(r);case"XXXX":case"XX":return an(r);default:return an(r,":")}},x:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"x":return rn(r);case"xxxx":case"xx":return an(r);default:return an(r,":")}},O:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+on(r,":");default:return"GMT"+an(r,":")}},z:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+on(r,":");default:return"GMT"+an(r,":")}},t:function(n,e,t,o){var r=o._originalDate||n;return R(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,o){return R((o._originalDate||n).getTime(),e.length)}};function on(n,e){var t=n>0?"-":"+",o=Math.abs(n),r=Math.floor(o/60),a=o%60;if(0===a)return t+String(r);var i=e||"";return t+String(r)+i+R(a,2)}function rn(n,e){return n%60==0?(n>0?"-":"+")+R(Math.abs(n)/60,2):an(n,e)}function an(n,e){var t=e||"",o=n>0?"-":"+",r=Math.abs(n);return o+R(Math.floor(r/60),2)+t+R(r%60,2)}const ln=tn;var sn=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},dn=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const cn={p:dn,P:function(n,e){var t,o=n.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return sn(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",sn(r,e)).replace("{{time}}",dn(a,e))}};var un=["D","DD"],An=["YY","YYYY"];function pn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var fn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function mn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const gn={date:mn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:mn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:mn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var hn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function bn(n){return function(e,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var i=n.defaultWidth,l=null!=t&&t.width?String(t.width):n.defaultWidth;o=n.values[l]||n.values[i]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const xn={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:bn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:bn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:bn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:bn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:bn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Cn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,l=a[0],s=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(s)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(l))return t}(s):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(l))return t}(s);return i=n.valueCallback?n.valueCallback(d):d,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(l.length)}}}var vn,Bn={ordinalNumber:(vn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(vn.matchPattern);if(!t)return null;var o=t[0],r=n.match(vn.parsePattern);if(!r)return null;var a=vn.valueCallback?vn.valueCallback(r[0]):r[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(o.length)}}),era:Cn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Cn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Cn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Cn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Cn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const yn={code:"en-US",formatDistance:function(n,e,t){var o,r=fn[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:gn,formatRelative:function(n,e,t,o){return hn[n]},localize:xn,match:Bn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var kn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,wn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,En=/^'([^]*?)'?$/,Tn=/''/g,jn=/[a-zA-Z]/;function Dn(n,e,t){var o,r,a,i,l,s,d,c,u,A,p,f,m,g,v,B,y,k;x(2,arguments);var w=String(e),E=Z(),T=null!==(o=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:E.locale)&&void 0!==o?o:yn,j=b(null!==(a=null!==(i=null!==(l=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(d=t.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==l?l:E.firstWeekContainsDate)&&void 0!==i?i:null===(u=E.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(j>=1&&j<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=b(null!==(p=null!==(f=null!==(m=null!==(g=null==t?void 0:t.weekStartsOn)&&void 0!==g?g:null==t||null===(v=t.locale)||void 0===v||null===(B=v.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==m?m:E.weekStartsOn)&&void 0!==f?f:null===(y=E.locale)||void 0===y||null===(k=y.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==p?p:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var I=C(n);if(!function(n){if(x(1,arguments),!function(n){return x(1,arguments),n instanceof Date||"object"===h(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=C(n);return!isNaN(Number(e))}(I))throw new RangeError("Invalid time value");var P=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(I),Y=function(n,e){return x(2,arguments),function(n,e){x(2,arguments);var t=C(n).getTime(),o=b(e);return new Date(t+o)}(n,-b(e))}(I,P),S={firstWeekContainsDate:j,weekStartsOn:D,locale:T,_originalDate:I};return w.match(wn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,cn[e])(n,T.formatLong):n})).join("").match(kn).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(En))?a[1].replace(Tn,"'"):r;var l,s=ln[i];if(s)return null!=t&&t.useAdditionalWeekYearTokens||(l=o,-1===An.indexOf(l))||pn(o,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==un.indexOf(n)}(o)||pn(o,e,String(n)),s(Y,o,T.localize,S);if(i.match(jn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}const In=t.p+"819e1e40c3fcf14e1116.svg",Pn=t.p+"eabb3514fa0376368ae9.svg";class Yn{constructor(n,e){this.TaskButton=n.addEventListener("change",(function(n){if(this.checked)if("Home"===Un.section){let n=E.findingTask(B.allTasks[e]);B.allProjects[n.i].projectList[n.x].status="done",oe.strikeoutWords(e),re()}else B.allProjects[E.projectPos.position].projectList[e].status="done",oe.strikeoutWords(e);else oe.strikeoutWords(e,"none"),B.allProjects[E.projectPos.position].projectList[e].status="undone","Home"===Un.section&&re()}))}}const Sn=t.p+"5add4d4dee2471347aed.svg",Mn=t.p+"706624a5af14d5157aa8.svg";let Nn=(()=>{function n(n){if("Home"===Un.section){let e=y(B.allTasks[n].Project);console.log(B.allTasks[0].Project),console.log("johnson"),console.log(B.allTasks[n].Project,y(B.allTasks[n].Project));for(let t=0;t<B.allProjects[e].projectList.length;t++)B.allTasks[n].title===B.allProjects[e].projectList[t].title&&(console.log(B.allProjects[e].projectList[t]),B.allProjects[e].projectList.splice(t,1)),E.addingToallTasks(),Jn.placingTasks(),Jn.updateAlltasks()}else"calender"===Un.section&&(y(B.allTasks[n].Project),console.log("this week"))}return{clearOverdue:function(){for(let n=0;n<B.allProjects.length;n++)for(let e=0;e<B.allProjects[n].projectList.length;e++)(new Date).setHours(0,0,0,0)>new Date(B.allProjects[n].projectList[e].date).setHours(0,0,0,0)&&(B.allProjects[n].projectList.splice(e,1),console.log(new Date,new Date))},deletingSpecificTask:n,deleteTask:class{constructor(e,t){this.button=e.addEventListener("click",(function(e){n(t),E.addingToallTasks(),Jn.placingTasks(),Jn.updateAlltasks(),console.log("yes we work")}))}}}})(),On=new class{domElementCreator(n,e,t,o="",r=""){let a=document.createElement(n);return a.id=e,a.textContent=o,a.placeholder=r,t.appendChild(a),a}ImageLoadtoDOm(n,e,t){let o=new Image;return o.src=n,o.id=t,e.appendChild(o),o}},Wn=(()=>{let n=On.domElementCreator("div","sidebox",document.body),e=On.domElementCreator("div","appTitleHolder",n),t=(On.ImageLoadtoDOm(P,e,"appLogo"),On.domElementCreator("p","appTitle",e,"Ubuntu Tasks"),On.domElementCreator("div","section",n)),o=On.domElementCreator("button","homeDiv",t),r=(On.ImageLoadtoDOm(Y,o,"homeicon"),On.domElementCreator("p","hometext",o,"Home"),On.domElementCreator("button","todayButton",t)),a=(On.ImageLoadtoDOm(Mn,r,"todayIcon"),On.domElementCreator("p","TodayText",r,"Today"),On.domElementCreator("button","calender",t)),i=(On.ImageLoadtoDOm(M,a,"Datesicon"),On.domElementCreator("p","hometext",a,"Calender"),On.domElementCreator("button","Projects",t)),l=(On.ImageLoadtoDOm(O,i,"projectIcon"),On.domElementCreator("p","ProjectText",i,"Projects"),On.domElementCreator("div","projectsSection",t)),s=On.domElementCreator("button","createprojects",t);return On.ImageLoadtoDOm(N,s,"createprojectsicon"),On.domElementCreator("p","projectText",s,"Create Projects"),s.title="Create Project",{createprojectsButton:s,siderbox:n,divProjectsSection:l,Today:r}})(),Ln=((()=>{let n=On.domElementCreator("div","topBox",document.body);On.domElementCreator("p","topText",n,`Enjoy your ${Dn(new Date,"EEEE")}`),On.ImageLoadtoDOm(W,n,"topBoximagegirl"),On.ImageLoadtoDOm(L,n,"musicboy"),On.ImageLoadtoDOm(H,n,"boyWithpapers")})(),(()=>{let n=On.domElementCreator("button","addTask",document.body);return n.title="Create new task",On.ImageLoadtoDOm(U,n,"addtaskicon"),{addTask:n}})()),Un={section:"Home"},Hn=(()=>{let n=On.domElementCreator("dialog","dialogCreateProject",Wn.siderbox),e=On.domElementCreator("form","messageBoxdiv",n);e.setAttribute("method","dialog"),On.domElementCreator("label","projectName",e).setAttribute("for","projectNameinput");let t=On.domElementCreator("input","projectNameinput",e);t.placeholder="Go to the Moon";let o=On.domElementCreator("div","buttondiv",e);return{dialogBox:n,cancelButton:On.domElementCreator("button","cancelButton",o,"Cancel"),doneButton:On.domElementCreator("button","doneButton",o,"Create"),projectNameinput:t}})();Wn.createprojectsButton.addEventListener("click",(function(n){Hn.dialogBox.showModal()})),Hn.doneButton.addEventListener("click",(function(n){!function(){if(""===Hn.projectNameinput.value)return;let n=new k(Hn.projectNameinput.value);w(n)}(),Fn(),Xn(),Vn(),n.preventDefault(),deletingProjectDom.deleteTheseletedProject(),Hn.dialogBox.close()}));let qn={returnAllbuttonstlyesTodefault:function(){document.querySelectorAll("#project").forEach((n=>{n.style.setProperty("background-color","transparent"),n.style.setProperty("color","#828489"),n.style.setProperty("text-align","left")}))},makingTheButtonGlow:function(n){n.style.setProperty("color","white"),n.style.setProperty("background-color","#F39C12"),n.style.setProperty("text-align","center")}},Gn=(()=>{let n=On.domElementCreator("dialog","dialogTask",document.body),e=On.domElementCreator("form","messageBoxdiv",n);On.domElementCreator("label","DateLabel",e,"Task Name").setAttribute("for","TaskName");let t=On.domElementCreator("input","TaskName",e,null,"Venus summit");On.domElementCreator("label","DateLabel",e,"Description").setAttribute("for","TaskDescription");let o=On.domElementCreator("textarea","TaskDescription",e,null,"Take the mars rover at ubuntu station ");o.rows=4,o.setAttribute("maxlength",45),On.domElementCreator("label","DateLabel",e,"Due Date").setAttribute("for","Date");let r=On.domElementCreator("input","Date",e,"Date","Due Date");r.type="date",On.domElementCreator("label","PriorityLabel",e,"Priority").setAttribute("for","selectDropDown");let a=On.domElementCreator("select","selectDropDown",e),i=On.domElementCreator("option","optionHigh",a,"High"),l=On.domElementCreator("option","optionMedium",a,"Medium"),s=On.domElementCreator("option","optionLow",a,"Low");i.setAttribute("value","High"),l.setAttribute("value","Medium"),s.setAttribute("value","Low"),l.selected=!0,t.required=!0,a.required=!0,r.required=!0,o.required=!0;let d=On.domElementCreator("div","buttonHolder",n),c=On.domElementCreator("button","cancelTask",d,"Cancel"),u=On.domElementCreator("button","createTask",d,"Create");return u.type="Submit",{dialogTask:n,cancelTask:c,createTask:u,TaskName:t,TaskDescription:o,PriorityDropdown:a,date:r}})();function zn(){Un.section="notHome"}function Zn(){"Home"===Un.section?ee():"Today"===Un.section&&ae.todayTask()}function Fn(){document.querySelectorAll(".projectName").forEach((n=>{n.remove()}));let n=B.allProjects;for(let e=0;e<n.length;e++){let t=On.domElementCreator("button","project",Wn.divProjectsSection,"> "+n[e].projectTitle);e===E.projectPos.position&&qn.makingTheButtonGlow(t),projectDiv.className="projectName",closeDiv.className="projectName",t.className="projectName"}}Ln.addTask.addEventListener("click",(function(n){Gn.dialogTask.showModal()})),Gn.cancelTask.addEventListener("click",(function(n){Gn.dialogTask.close(),n.preventDefault()})),Gn.createTask.addEventListener("click",(function(n){!function(){if(""===Gn.TaskName.value||""===Gn.TaskDescription.value||""===Gn.date.value)return;let n=new E.createTask(Gn.TaskName.value,Gn.TaskDescription.value,Gn.date.value,Gn.PriorityDropdown.value);n.Project=B.allProjects[E.projectPos.position].projectTitle,"calender"===Un.section?E.addTasktoProject(n,B.allProjects[0]):E.addTasktoProject(n),Nn.clearOverdue(),E.addingToallTasks(),Gn.dialogTask.close()}(),Jn.placingTasks(),Jn.updateAlltasks(),Zn(),te.manageCheckbox(),ie.buttonManager()})),Hn.cancelButton.addEventListener("click",(function(n){Fn(),n.preventDefault(),Hn.dialogBox.close()})),Fn();let Qn={content:On.domElementCreator("div","contentTobeUpdated",document.body)};function Rn(n,e,t,o="",r="",a="contentToRemove"){let i=On.domElementCreator(n,e,t,o,"");return i.className=a,i}let _n=(()=>{function n(){let n=Rn("div","statisticsHolderbox",Qn.content),e=["Current Projects","Overall Tasks","Completed Tasks"],t=["informationOfProjectsHolder","infomationOfTasksHolder","informationOfcompletedTasksHolder"],o=["projectNumber","TaskNumber","completedNumber"],r=[In,Pn,S],a=["numberOfProjectsdiv","numberOfTasksdiv","completedTasks"],i=[B.allProjects.length-1,B.allTasks.length,0],l=["projectDetails","TaskDetails","completedTask"],s=["projectsBackdrop","tasksBackdrop","completedBackdrop"];for(let d=0;d<e.length;d++){let c=Rn("div",a[d],n),u=Rn("div",t[d],c),A=(Rn("p",o[d],u,i[d]),Rn("p",l[d],u,e[d]),Rn("div","iconDiv",c));On.ImageLoadtoDOm(r[d],A,"iconStatics"),On.domElementCreator("div",s[d],A)}}return n(),{makeStatistics:n}})();function Xn(){"Home"===Un.section&&(document.querySelector("#projectNumber").textContent=B.allProjects.length-1)}let Jn=(()=>{let n=({title:n,description:e,date:t,priority:o,status:r,Project:a},i=document.querySelector("#TaskBox"))=>{let l=Rn("div","TaskDiv",i),s=Rn("div","dateDiv",l),d=Rn("p","daysRemaining",s,t),c=On.domElementCreator("button","deleteTask",s),u=(On.ImageLoadtoDOm(Sn,c,"deleteIcon"),Rn("p","taskTitle",l,n)),A=Rn("p","explainationTask",l,e),p=Rn("div","buttonsManipulationDiv",l),f=Rn("button","Priotrity",p,o),m=Rn("button","editTask",p,"edit"),g=Rn("input","completeTask",p,r);"done"===r&&(g.checked=!0,u.style.setProperty("text-decoration","line-through"),A.style.setProperty("text-decoration","line-through")),g.type="checkbox",g.title="toogle complete",l.className="task",s.className="task",d.className="task",u.className="task",A.className="task",p.className="task",f.className="task",m.className="task",g.className="task"};return{placingTasks:function(){if(document.querySelectorAll(".task").forEach((n=>{n.remove()})),"calender"===Un.section)for(let e=0;e<B.allProjects[E.projectPos.position].projectList.length;e++){let t=B.allProjects[E.projectPos.position].projectList[e];new Date(t.date).setHours(0,0,0,0)===v(new Date,1).setHours(0,0,0,0)?n(t,document.querySelector("#taskBoxToday")):new Date(t.date).setHours(0,0,0,0)===v(new Date,2).setHours(0,0,0,0)&&n(t,document.querySelector("#taskBoxtomorrow"))}else for(let n=0;n<B.allProjects[E.projectPos.position].projectList.length;n++)B.allProjects[E.projectPos.position].projectList[n];ie.buttonManager()},updateAlltasks:function(){"Home"===Un.section&&(document.querySelector("#TaskNumber").textContent=B.allTasks.length)},makeTaskbox:function(){return Rn("div","TaskBox",Qn.content)},taskcards:n}})();function Vn(){let n=document.querySelectorAll("#project"),e=0;n.forEach((n=>{new I(n,e),e++}))}Rn("div","TaskBox",Qn.content),document.querySelectorAll("#project")[0],Vn();let Kn={refreshTaskBox:function(){document.querySelectorAll(".contentToRemove").forEach((n=>{n.remove()})),document.querySelectorAll(".task").forEach((n=>{n.remove()})),document.querySelectorAll("#TaskBox").forEach((n=>{n.remove()}))},TaskBoxcleanup:ne};document.querySelector("#homeDiv").addEventListener("click",(function(n){Kn.refreshTaskBox(),_n.makeStatistics(),Jn.makeTaskbox(),Xn(),Un.section="Home",Zn(),te.manageCheckbox(),re(),ie.buttonManager(),E.projectPos.position=0}));let $n={createTaskBoxforProject:function(){On.domElementCreator("div","TaskBox",document.querySelector("#contentTobeUpdated")).className=".contentToRemove"},navigatingTheProjectAndGivingTasks:function(n){for(let e=0;e<B.allProjects[n].projectList.length;e++)Jn.taskcards(B.allProjects[n].projectList[e])}};function ne(){document.querySelectorAll(".task").forEach((n=>{n.remove()}))}function ee(){ne(),console.log("hello");for(let n=0;n<B.allTasks.length;n++)Jn.taskcards(B.allTasks[n])}ee();let te={manageCheckbox:function(){let n=0;document.querySelectorAll("#completeTask").forEach((e=>{new Yn(e,n),n++}))}},oe={strikeoutWords:function(n,e="line-through"){let t=document.querySelectorAll("#taskTitle"),o=document.querySelectorAll("#explainationTask");t[n].style.setProperty("text-decoration",e),o[n].style.setProperty("text-decoration",e)}};function re(){let n=document.querySelector("#completedNumber"),e=T.countCompletedTasks();n.textContent=e}re();let ae=(()=>{function n(){Kn.refreshTaskBox(),Jn.makeTaskbox(),j.todayDates()}return Wn.Today.addEventListener("click",(function(e){Un.section="Today",E.projectPos.position=0,n()})),{todayTask:n}})(),ie=(document.querySelector("#calender").addEventListener("click",(function(n){Kn.refreshTaskBox(),Jn.makeTaskbox(),j.thisWeek(),j.TomorrowDates(),j.aDayafter(),Un.section="calender",Kn.refreshTaskBox(),Jn.makeTaskbox(),j.ThisWeek(),ie.buttonManager()})),(()=>{function n(){let n=document.querySelectorAll("#deleteTask");for(let e=0;e<n.length;e++)new Nn.deleteTask(n[e],e)}return n(),{buttonManager:n}})())},250:(n,e,t)=>{"use strict";n.exports=t.p+"0ae69d2eae7e39bfe725.png"},836:n=>{n.exports=function(n){return n&&n.__esModule?n:{default:n}},n.exports.__esModule=!0,n.exports.default=n.exports},698:n=>{function e(t){return n.exports=e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},n.exports.__esModule=!0,n.exports.default=n.exports,e(t)}n.exports=e,n.exports.__esModule=!0,n.exports.default=n.exports}},n=>{n.O(0,[712],(()=>(38,n(n.s=38)))),n.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,