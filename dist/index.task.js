"use strict";(self.webpackChunktaskmanagementsystem=self.webpackChunktaskmanagementsystem||[]).push([[826,40],{426:(n,e,t)=>{t.d(e,{Z:()=>A});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),d=t(667),l=t.n(d),s=new URL(t(250),t.b),c=i()(r());c.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap);"]);var u=l()(s);c.push([n.id,`\n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(${u});\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 150px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#333333;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:";EAIE;;IAEE,YAAY;IACZ,WAAW;IACX,sBAAsB;IACtB,oCAAoC;;IAEpC,qBAAqB;;;;;;AAMzB;AACA;AACA,yBAAyB;;AAEzB,aAAa;AACb,0CAA0C;AAC1C,iCAAiC;AACjC,aAAa;AACb,YAAY;;;AAGZ;;AAEA;;;IAGI,gBAAgB;IAChB,cAAc;IACd,yBAAyB;;;;;;AAM7B;;AAEA;;;AAGA,aAAa;;AAEb,mBAAmB;;AAEnB,yBAAyB;;AAEzB,mCAAmC;;;AAGnC,aAAa;AACb,aAAa;;;;;AAKb;AACA;;AAEA,eAAe;AACf,iBAAiB;;AAEjB;AACA;;IAEI,mDAAsC;IACtC,WAAW;IACX,YAAY;AAChB;;AAEA;;IAEI,eAAe;IACf,0BAA0B;;;;;AAK9B;AACA;;IAEI,cAAc;;IAEd,aAAa;IACb,sBAAsB;;IAEtB,SAAS;IACT,gBAAgB;;AAEpB;AACA;;IAEI,uBAAuB;IACvB,cAAc;IACd,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,YAAY;IACZ,aAAa;IACb,SAAS;IACT,iBAAiB;IACjB,kBAAkB;IAClB,iBAAiB;IACjB,mBAAmB;;;AAGvB;;AAEA;;AAEA,wBAAwB;AACxB,mBAAmB;AACnB,YAAY;AACZ,WAAW;AACX,YAAY;;AAEZ,iBAAiB;;AAEjB;AACA;;IAEI,yBAAyB;IACzB,YAAY;;;AAGhB;;AAEA;;IAEI,wBAAwB;IACxB,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ;AACJ;;;AAGA,aAAa;;;;;;AAMb;AACA;;IAEI,kBAAkB;AACtB;;;AAGA;;AAEA,oBAAoB;AACpB,kBAAkB;AAClB,yBAAyB;AACzB,aAAa;AACb,QAAQ;AACR,aAAa;;;;;AAKb;AACA;;EAEE,+BAA+B;AACjC,kBAAkB;AAClB,eAAe;AACf,iBAAiB;AACjB,YAAY;AACZ;AACA;;AAEA,WAAW;AACX,YAAY;AACZ,kBAAkB;AAClB,SAAS;AACT,WAAW;AACX,yBAAyB;;AAEzB,YAAY;AACZ,mBAAmB;;;AAGnB;;AAEA;;IAEI,UAAU;;;;;AAKd;;AAEA;IACI,yBAAyB;;;AAG7B;AACA;;IAEI,YAAY;IACZ,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;AAChB,aAAa;AACb,iBAAiB;;AAEjB;AACA;;IAEI,aAAa;;IAEb,sBAAsB;IACtB,aAAa;IACb,OAAO;;;AAGX;;AAEA;;IAEI,WAAW;IACX,YAAY;AAChB,YAAY;AACZ,YAAY;AACZ,WAAW;;AAEX;;AAEA;;IAEI,yBAAyB;AAC7B;;AAEA;;IAEI,yBAAyB;AAC7B;;AAEA;;IAEI,iBAAiB;IACjB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,yBAAyB;;AAE7B;AACA;IACI,YAAY;IACZ,aAAa;AACjB;AACA;;IAEI,aAAa;IACb,OAAO;;;AAGX;;;;AAIA;IACI,YAAY;EACd;CACD;;IAEG,kBAAkB;IAClB,OAAO;IACP,QAAQ;IACR,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,aAAa;GACd,mBAAmB;GACnB,yBAAyB;GACzB;;CAEF;CACA;;IAEG,yBAAyB;CAC5B;;EAEC;IACE,0BAA0B;EAC5B;EACA;;AAEF,aAAa;AACb,QAAQ;AACR,oBAAoB;AACpB,YAAY;AACZ,iBAAiB;EACf;;EAEA;;IAEE,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,YAAY;;EAEd;;EAEA;;IAEE,yBAAyB;;;EAG3B;;EAEA;;IAEE,yBAAyB;;EAE3B;;EAEA;;;IAGE,6BAA6B;IAC7B,yBAAyB;;;EAG3B;;;;EAIA;;IAEE,aAAa;IACb,sBAAsB;;;IAGtB,gBAAgB;IAChB,gBAAgB;;;;EAIlB;EACA;;IAEE,6BAA6B;IAC7B,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,aAAa;GACd,iBAAiB;GACjB,kBAAkB;IACjB,kBAAkB;IAClB,eAAe;IACf,gBAAgB;;EAElB;EACA;IACE,yBAAyB;;;;EAI3B;EACA;;IAEE,2BAA2B;;IAE3B,iBAAiB;IACjB,cAAc;;;;EAIhB;EACA;;;IAGE,aAAa;IACb,yBAAyB;IACzB,aAAa;IACb,SAAS;IACT,uBAAuB;;EAEzB;;EAEA;;IAEE,aAAa;IACb,sBAAsB;;;;;EAKxB;EACA;;IAEE,eAAe;;;EAGjB;EACA;;AAEF,aAAa;;AAEb,YAAY;AACZ,eAAe;AACf,aAAa;AACb,kBAAkB;AAClB,6BAA6B;AAC7B,yBAAyB;;;CAGxB;CACA;;AAED,YAAY;AACZ,mBAAmB;AACnB,WAAW;AACX,YAAY;;;;;;;CAOX;CACA;EACC,yBAAyB;;;CAG1B;CACA;EACC,yBAAyB;CAC1B;;CAEA;;EAEC,yBAAyB;;CAE1B;;CAEA;;AAED,aAAa;AACb,uBAAuB;;;CAGtB;CACA;EACC,UAAU;EACV,WAAW;EACX,kBAAkB;AACpB,UAAU;AACV;CACC",sourcesContent:["\n  @import url('https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap');\n\n  \n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(./icons/linuxHead.png);\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 150px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#333333;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n"],sourceRoot:""}]);const A=c},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var l=this[d][0];null!=l&&(i[l]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],d=0;d<n.length;d++){var l=n[d],s=o.base?l[0]+o.base:l[0],c=a[s]||0,u="".concat(s," ").concat(c);a[s]=c+1;var A=t(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var m=r(p,o);o.byIndex=d,e.splice(d,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var d=t(a[i]);e[d].references--}for(var l=o(n,r),s=0;s<a.length;s++){var c=t(a[s]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},241:(n,e,t)=>{t.d(e,{DJ:()=>r,eV:()=>a,t5:()=>o});let o={allProjects:[],allTasks:[]},r={FindProject:function(n){for(let e=0;e<allProjects.length;e++)if(n===o.allProjects[e].projectName)return allProjects[e].projectList},createProject:class{constructor(n){this.projectTitle=n,this.projectList=[],console.log(n)}},addToAllProjects:function(n){o.allProjects[o.allProjects.length]=n}},a={createTask:class{constructor(n,e,t,o){this.title=n,this.description=e,this.date=t,this.priority=o}},addingTask:function(n,e=i){o.allTasks[o.allTasks.length]=n,FindProject(e)[FindProject(e).length]=n},findingTask:function(n){for(let e=0;e<allProjects.length;e++)for(let t=0;t<allProjects[e].projectList.length;t++)if(n===allProjects[e].projectList[t].title)return console.log("found",t,e,allProjects[e].projectList[t].title),{x:t,i:e}}},i=new r.createProject("space trip");r.addToAllProjects(i)},403:(n,e,t)=>{var o=t(379),r=t.n(o),a=t(795),i=t.n(a),d=t(569),l=t.n(d),s=t(565),c=t.n(s),u=t(216),A=t.n(u),p=t(589),m=t.n(p),f=t(426),g={};g.styleTagTransform=m(),g.setAttributes=c(),g.insert=l().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=A(),r()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;var h=t(250);const b=t.p+"94a91679767b1d7d2034.svg",v=t.p+"04e1a7df197a2de1e626.svg",C=t.p+"746bdb99c1ae84513f9b.svg",x=t.p+"03b02e98500c669ef571.svg",w=t.p+"819817edadaa5c76bccf.svg",B=t.p+"1213764b91350a02bb2c.svg",y=t.p+"2ac2511792bf6add08e5.svg",k=t.p+"0794abbf4bbe4158f856.svg",E=t.p+"cbf897ee25afe1cbd2d5.svg";function T(n){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},T(n)}function I(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function D(n){I(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===T(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function j(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function Y(n){I(1,arguments);var e=D(n),t=e.getUTCDay(),o=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function P(n){I(1,arguments);var e=D(n),t=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(t+1,0,4),o.setUTCHours(0,0,0,0);var r=Y(o),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=Y(a);return e.getTime()>=r.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}var M={};function S(){return M}function U(n,e){var t,o,r,a,i,d,l,s;I(1,arguments);var c=S(),u=j(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==r?r:c.weekStartsOn)&&void 0!==o?o:null===(l=c.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=D(n),p=A.getUTCDay(),m=(p<u?7:0)+p-u;return A.setUTCDate(A.getUTCDate()-m),A.setUTCHours(0,0,0,0),A}function W(n,e){var t,o,r,a,i,d,l,s;I(1,arguments);var c=D(n),u=c.getUTCFullYear(),A=S(),p=j(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:A.firstWeekContainsDate)&&void 0!==o?o:null===(l=A.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==t?t:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(u+1,0,p),m.setUTCHours(0,0,0,0);var f=U(m,e),g=new Date(0);g.setUTCFullYear(u,0,p),g.setUTCHours(0,0,0,0);var h=U(g,e);return c.getTime()>=f.getTime()?u+1:c.getTime()>=h.getTime()?u:u-1}function O(n,e){for(var t=n<0?"-":"",o=Math.abs(n).toString();o.length<e;)o="0"+o;return t+o}const N=function(n,e){var t=n.getUTCFullYear(),o=t>0?t:1-t;return O("yy"===e?o%100:o,e.length)},H=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):O(t+1,2)},L=function(n,e){return O(n.getUTCDate(),e.length)},z=function(n,e){return O(n.getUTCHours()%12||12,e.length)},G=function(n,e){return O(n.getUTCHours(),e.length)},F=function(n,e){return O(n.getUTCMinutes(),e.length)},q=function(n,e){return O(n.getUTCSeconds(),e.length)},Z=function(n,e){var t=e.length,o=n.getUTCMilliseconds();return O(Math.floor(o*Math.pow(10,t-3)),e.length)};var Q={G:function(n,e,t){var o=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var o=n.getUTCFullYear(),r=o>0?o:1-o;return t.ordinalNumber(r,{unit:"year"})}return N(n,e)},Y:function(n,e,t,o){var r=W(n,o),a=r>0?r:1-r;return"YY"===e?O(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):O(a,e.length)},R:function(n,e){return O(P(n),e.length)},u:function(n,e){return O(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return O(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return O(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,e,t){var o=n.getUTCMonth();switch(e){case"M":case"MM":return H(n,e);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(n,e,t){var o=n.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return O(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(n,e,t,o){var r=function(n,e){I(1,arguments);var t=D(n),o=U(t,e).getTime()-function(n,e){var t,o,r,a,i,d,l,s;I(1,arguments);var c=S(),u=j(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:c.firstWeekContainsDate)&&void 0!==o?o:null===(l=c.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==t?t:1),A=W(n,e),p=new Date(0);return p.setUTCFullYear(A,0,u),p.setUTCHours(0,0,0,0),U(p,e)}(t,e).getTime();return Math.round(o/6048e5)+1}(n,o);return"wo"===e?t.ordinalNumber(r,{unit:"week"}):O(r,e.length)},I:function(n,e,t){var o=function(n){I(1,arguments);var e=D(n),t=Y(e).getTime()-function(n){I(1,arguments);var e=P(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),Y(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(o,{unit:"week"}):O(o,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):L(n,e)},D:function(n,e,t){var o=function(n){I(1,arguments);var e=D(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=t-e.getTime();return Math.floor(o/864e5)+1}(n);return"Do"===e?t.ordinalNumber(o,{unit:"dayOfYear"}):O(o,e.length)},E:function(n,e,t){var o=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return O(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return O(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var o=n.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return O(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(n,e,t){var o=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,e,t){var o,r=n.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,e,t){var o,r=n.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var o=n.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return z(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):G(n,e)},K:function(n,e,t){var o=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(o,{unit:"hour"}):O(o,e.length)},k:function(n,e,t){var o=n.getUTCHours();return 0===o&&(o=24),"ko"===e?t.ordinalNumber(o,{unit:"hour"}):O(o,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):F(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):q(n,e)},S:function(n,e){return Z(n,e)},X:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return R(r);case"XXXX":case"XX":return J(r);default:return J(r,":")}},x:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"x":return R(r);case"xxxx":case"xx":return J(r);default:return J(r,":")}},O:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+X(r,":");default:return"GMT"+J(r,":")}},z:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+X(r,":");default:return"GMT"+J(r,":")}},t:function(n,e,t,o){var r=o._originalDate||n;return O(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,o){return O((o._originalDate||n).getTime(),e.length)}};function X(n,e){var t=n>0?"-":"+",o=Math.abs(n),r=Math.floor(o/60),a=o%60;if(0===a)return t+String(r);var i=e||"";return t+String(r)+i+O(a,2)}function R(n,e){return n%60==0?(n>0?"-":"+")+O(Math.abs(n)/60,2):J(n,e)}function J(n,e){var t=e||"",o=n>0?"-":"+",r=Math.abs(n);return o+O(Math.floor(r/60),2)+t+O(r%60,2)}const V=Q;var _=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},K=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const $={p:K,P:function(n,e){var t,o=n.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return _(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",_(r,e)).replace("{{time}}",K(a,e))}};var nn=["D","DD"],en=["YY","YYYY"];function tn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var on={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function rn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const an={date:rn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:rn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:rn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var dn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ln(n){return function(e,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var i=n.defaultWidth,d=null!=t&&t.width?String(t.width):n.defaultWidth;o=n.values[d]||n.values[i]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const sn={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:ln({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ln({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:ln({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ln({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ln({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function cn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,d=a[0],l=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],s=Array.isArray(l)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(d))return t}(l):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(d))return t}(l);return i=n.valueCallback?n.valueCallback(s):s,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(d.length)}}}var un,An={ordinalNumber:(un={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(un.matchPattern);if(!t)return null;var o=t[0],r=n.match(un.parsePattern);if(!r)return null;var a=un.valueCallback?un.valueCallback(r[0]):r[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(o.length)}}),era:cn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:cn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:cn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:cn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:cn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const pn={code:"en-US",formatDistance:function(n,e,t){var o,r=on[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:an,formatRelative:function(n,e,t,o){return dn[n]},localize:sn,match:An,options:{weekStartsOn:0,firstWeekContainsDate:1}};var mn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,fn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,gn=/^'([^]*?)'?$/,hn=/''/g,bn=/[a-zA-Z]/;function vn(n,e,t){var o,r,a,i,d,l,s,c,u,A,p,m,f,g,h,b,v,C;I(2,arguments);var x=String(e),w=S(),B=null!==(o=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:w.locale)&&void 0!==o?o:pn,y=j(null!==(a=null!==(i=null!==(d=null!==(l=null==t?void 0:t.firstWeekContainsDate)&&void 0!==l?l:null==t||null===(s=t.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==d?d:w.firstWeekContainsDate)&&void 0!==i?i:null===(u=w.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(y>=1&&y<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var k=j(null!==(p=null!==(m=null!==(f=null!==(g=null==t?void 0:t.weekStartsOn)&&void 0!==g?g:null==t||null===(h=t.locale)||void 0===h||null===(b=h.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==f?f:w.weekStartsOn)&&void 0!==m?m:null===(v=w.locale)||void 0===v||null===(C=v.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==p?p:0);if(!(k>=0&&k<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!B.localize)throw new RangeError("locale must contain localize property");if(!B.formatLong)throw new RangeError("locale must contain formatLong property");var E=D(n);if(!function(n){if(I(1,arguments),!function(n){return I(1,arguments),n instanceof Date||"object"===T(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=D(n);return!isNaN(Number(e))}(E))throw new RangeError("Invalid time value");var Y=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(E),P=function(n,e){return I(2,arguments),function(n,e){I(2,arguments);var t=D(n).getTime(),o=j(e);return new Date(t+o)}(n,-j(e))}(E,Y),M={firstWeekContainsDate:y,weekStartsOn:k,locale:B,_originalDate:E};return x.match(fn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,$[e])(n,B.formatLong):n})).join("").match(mn).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(gn))?a[1].replace(hn,"'"):r;var d,l=V[i];if(l)return null!=t&&t.useAdditionalWeekYearTokens||(d=o,-1===en.indexOf(d))||tn(o,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==nn.indexOf(n)}(o)||tn(o,e,String(n)),l(P,o,B.localize,M);if(i.match(bn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}var Cn=t(241);const xn=t.p+"819e1e40c3fcf14e1116.svg",wn=t.p+"eabb3514fa0376368ae9.svg";let Bn=new class{domElementCreator(n,e,t,o="",r=""){let a=document.createElement(n);return a.id=e,a.textContent=o,a.placeholder=r,t.appendChild(a),a}ImageLoadtoDOm(n,e,t){let o=new Image;return o.src=n,o.id=t,e.appendChild(o),o}},yn=(()=>{let n=Bn.domElementCreator("div","sidebox",document.body),e=Bn.domElementCreator("div","appTitleHolder",n),t=(Bn.ImageLoadtoDOm(h,e,"appLogo"),Bn.domElementCreator("p","appTitle",e,"Ubuntu Tasks"),Bn.domElementCreator("div","section",n)),o=Bn.domElementCreator("button","homeDiv",t),r=(Bn.ImageLoadtoDOm(b,o,"homeicon"),Bn.domElementCreator("p","hometext",o,"Home"),Bn.domElementCreator("button","calender",t)),a=(Bn.ImageLoadtoDOm(C,r,"Datesicon"),Bn.domElementCreator("p","hometext",r,"Calender"),Bn.domElementCreator("button","Projects",t)),i=(Bn.ImageLoadtoDOm(w,a,"projectIcon"),Bn.domElementCreator("p","ProjectText",a,"Projects"),Bn.domElementCreator("div","projectsSection",t)),d=Bn.domElementCreator("button","createprojects",t);return Bn.ImageLoadtoDOm(x,d,"createprojectsicon"),Bn.domElementCreator("p","projectText",d,"Create Projects"),d.title="Create Project",{createprojectsButton:d,siderbox:n,divProjectsSection:i}})(),kn=((()=>{let n=Bn.domElementCreator("div","topBox",document.body);Bn.domElementCreator("p","topText",n,`Enjoy your ${vn(new Date,"EEEE")}`),Bn.ImageLoadtoDOm(B,n,"topBoximagegirl"),Bn.ImageLoadtoDOm(y,n,"musicboy"),Bn.ImageLoadtoDOm(E,n,"boyWithpapers")})(),(()=>{let n=Bn.domElementCreator("button","addTask",document.body);return n.title="Create new task",Bn.ImageLoadtoDOm(k,n,"addtaskicon"),{addTask:n}})()),En=(()=>{let n=Bn.domElementCreator("dialog","dialogCreateProject",yn.siderbox),e=Bn.domElementCreator("form","messageBoxdiv",n);Bn.domElementCreator("label","projectName",e).setAttribute("for","projectNameinput");let t=Bn.domElementCreator("input","projectNameinput",e);t.placeholder="Go to the Moon";let o=Bn.domElementCreator("div","buttondiv",e);return{dialogBox:n,cancelButton:Bn.domElementCreator("button","cancelButton",o,"Cancel"),doneButton:Bn.domElementCreator("button","doneButton",o,"Create"),projectNameinput:t}})();function Tn(){!function(){if(""===En.projectNameinput.value)return;let n=new Cn.DJ.createProject(En.projectNameinput.value);Cn.DJ.addToAllProjects(n)}(),Dn(),document.querySelector("#projectNumber").textContent=Cn.t5.allProjects.length}yn.createprojectsButton.addEventListener("click",(function(n){En.dialogBox.showModal()})),En.doneButton.addEventListener("click",(function(n){Tn(),n.preventDefault(),En.dialogBox.close()}));let In=(()=>{let n=Bn.domElementCreator("dialog","dialogTask",document.body),e=Bn.domElementCreator("form","messageBoxdiv",n);Bn.domElementCreator("label","DateLabel",e,"Task Name").setAttribute("for","TaskName");let t=Bn.domElementCreator("input","TaskName",e,null,"Venus summit");Bn.domElementCreator("label","DateLabel",e,"Description").setAttribute("for","TaskDescription");let o=Bn.domElementCreator("textarea","TaskDescription",e,null,"Take the mars rover at ubuntu station ");o.rows=4,Bn.domElementCreator("label","DateLabel",e,"Due Date").setAttribute("for","Date");let r=Bn.domElementCreator("input","Date",e,"Date","Due Date");r.type="date",Bn.domElementCreator("label","PriorityLabel",e,"Priority").setAttribute("for","selectDropDown");let a=Bn.domElementCreator("select","selectDropDown",e),i=Bn.domElementCreator("option","optionHigh",a,"High"),d=Bn.domElementCreator("option","optionMedium",a,"Medium"),l=Bn.domElementCreator("option","optionLow",a,"Low");i.setAttribute("value","High"),d.setAttribute("value","Medium"),l.setAttribute("value","Low"),d.selected=!0,t.required=!0,a.required=!0,r.required=!0,o.required=!0;let s=Bn.domElementCreator("div","buttonHolder",n),c=Bn.domElementCreator("button","cancelTask",s,"Cancel"),u=Bn.domElementCreator("button","createTask",s,"Create");return u.type="Submit",{dialogTask:n,cancelTask:c,createTask:u,TaskName:t,TaskDescription:o,PriorityDropdown:a,date:r}})();function Dn(){document.querySelectorAll(".projectName").forEach((n=>{console.log(n),n.remove()}));let n=Cn.t5.allProjects;for(let e=0;e<n.length;e++)Bn.domElementCreator("button","project"+e+" ",yn.divProjectsSection,"> "+n[e].projectTitle).className="projectName"}kn.addTask.addEventListener("click",(function(n){In.dialogTask.showModal()})),In.cancelTask.addEventListener("click",(function(n){In.dialogTask.close()})),In.createTask.addEventListener("click",(function(n){!function(){if(""===In.TaskName.value||""===In.TaskDescription.value||""===In.date.value)return;let n=new Cn.eV.createTask(In.TaskName.value,In.TaskDescription.value,In.date.value,In.PriorityDropdown.value);Cn.eV.addingTask(n),console.log(Cn.t5.allTasks),In.dialogTask.close()}()})),En.cancelButton.addEventListener("click",(function(n){Dn(),n.preventDefault(),En.dialogBox.close()})),Dn();let jn={content:Bn.domElementCreator("div","contentTobeUpdated",document.body)};function Yn(n,e,t,o="",r="",a="contentToRemove"){let i=Bn.domElementCreator(n,e,t,o,"");return i.className=a,i}(()=>{let n=Yn("div","statisticsHolderbox",jn.content),e=["Current Projects","Current Tasks","Completed Tasks"],t=["informationOfProjectsHolder","infomationOfTasksHolder","informationOfcompletedTasksHolder"],o=["projectNumber","TaskNumber","completedNumber"],r=[xn,wn,v],a=["numberOfProjectsdiv","numberOfTasksdiv","completedTasks"],i=[Cn.t5.allProjects.length,Cn.t5.allTasks.length,0],d=["projectDetails","TaskDetails","completedTask"],l=["projectsBackdrop","tasksBackdrop","completedBackdrop"];for(let s=0;s<e.length;s++){let c=Yn("div",a[s],n),u=Yn("div",t[s],c),A=(Yn("p",o[s],u,i[s]),Yn("p",d[s],u,e[s]),Yn("div","iconDiv",c));Bn.ImageLoadtoDOm(r[s],A,"iconStatics"),Bn.domElementCreator("div",l[s],A)}})()},250:(n,e,t)=>{n.exports=t.p+"0ae69d2eae7e39bfe725.png"}},n=>{n.O(0,[712],(()=>(403,n(n.s=403)))),n.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixjQUFjLGlCQUNyREMsRUFBVSxDQUFDLG1CQUFtQixnQkFBZ0IscUJBRXBELElBQUssSUFBSTNlLEVBQUksRUFBR0EsRUFBSW9lLEVBQVV0ZSxPQUFRRSxJQUFLLENBQ3pDLElBQUk0ZSxFQUFRWCxHQUF1QixNQUFNTyxFQUFReGUsR0FBR21lLEdBQ2hEVSxFQUFrQlosR0FBdUIsTUFBTUksRUFBYXJlLEdBQUc0ZSxHQUcvREUsR0FGV2IsR0FBdUIsSUFBSUssRUFBWXRlLEdBQUc2ZSxFQUFrQkosRUFBY3plLElBQ3RFaWUsR0FBdUIsSUFBSVMsRUFBcUIxZSxHQUFHNmUsRUFBa0JULEVBQVVwZSxJQUN0RmllLEdBQXVCLE1BQU0sVUFBVVcsSUFDckN6RSxHQUFnQlUsZUFBZTBELEVBQU12ZSxHQUFHOGUsRUFBUSxlQUN4QzNFLEdBQWdCQyxrQkFBa0IsTUFBTXVFLEVBQVUzZSxHQUFHOGUsRUFDN0UsQ0FTQyxFQTdCYyxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vc3JjL2FkZC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4vaWNvbnMvbGludXhIZWFkLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW5kaWUrRmxvd2VyJmZhbWlseT1RdWlja3NhbmQ6d2dodEA1MDAmZmFtaWx5PVNhdGlzZnkmZGlzcGxheT1zd2FwKTtcIl0pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgXG4gICp7XG5cbiAgICBwYWRkaW5nOiAwcHg7XG4gICAgbWFyZ2luOiAwcHg7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBmb250LWZhbWlseTogJ1F1aWNrc2FuZCcsIHNhbnMtc2VyaWY7XG5cbiAgICBsZXR0ZXItc3BhY2luZzogMC44cHg7XG5cbiAgICBcblxuXG5cbn1cbmJvZHl7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjMGYwZTEzO1xuXG5kaXNwbGF5OiBncmlkO1xuZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyNTBweCByZXBlYXQoNCwxZnIpO1xuZ3JpZC10ZW1wbGF0ZS1yb3dzOnJlcGVhdCg3LDFmcikgO1xuaGVpZ2h0OiAxMDB2aDtcbmNvbG9yOiB3aGl0ZTtcblxuXG59XG5cbiNzaWRlYm94e1xuXG4gIFxuICAgIGdyaWQtY29sdW1uOiAxLzE7XG4gICAgZ3JpZC1yb3c6IDEvLTE7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE2MWEyMztcbiAgXG4gXG5cblxuXG59XG5cbiNhcHBUaXRsZUhvbGRlcntcblxuXG5kaXNwbGF5OiBmbGV4O1xuXG5hbGlnbi1pdGVtczogY2VudGVyO1xuXG5iYWNrZ3JvdW5kLWNvbG9yOiAjMTYxYTIzO1xuXG5ib3JkZXItYm90dG9tOiBzb2xpZCAwLjVweCAgIzQwNDg1YTtcblxuXG5wYWRkaW5nOiAyMnB4O1xuaGVpZ2h0OiAxMDBweDtcblxuXG5cblxufVxuI2FwcFRpdGxle1xuXG5mb250LXNpemU6IDE4cHg7XG5mb250LXdlaWdodDogYm9sZDtcblxufVxuI2FwcExvZ297XG4gIFxuICAgIGJhY2tncm91bmQ6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX199KTtcbiAgICB3aWR0aDogNjBweDtcbiAgICBoZWlnaHQ6IDYwcHg7XG59XG5cbiNzZWN0aW9uVGl0bGV7XG5cbiAgICBmb250LXNpemU6IDEycHg7XG4gICAgbWFyZ2luOiAgMTJweCAwcHggMHB4IDM5cHg7XG4gICBcbiAgICBcblxuXG59XG4jc2VjdGlvbntcblxuICAgIGNvbG9yOiAjNDg0YjUyO1xuXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgXG4gICAgZ2FwOiAxMnB4O1xuICAgIG1hcmdpbi10b3A6IDEycHg7XG5cbn1cbiNzZWN0aW9uPmJ1dHRvbntcblxuICAgIGJhY2tncm91bmQ6dHJhbnNwYXJlbnQgO1xuICAgIGNvbG9yOiAjOWQ5ZmE1O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICB3aWR0aDogMTUwcHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgcGFkZGluZzogMTJweDtcbiAgICBnYXA6IDE0cHg7XG4gICAgZm9udC1zaXplOiAxNS41cHg7XG4gICAgcGFkZGluZy1sZWZ0OiAyNnB4O1xuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICBcbiAgIFxufVxuXG4jc2VjdGlvbj5idXR0b246bGFzdC1jaGlsZHtcblxuYmFja2dyb3VuZC1jb2xvcjojMzMzMzMzO1xuYm9yZGVyLXJhZGl1czogMTJweDtcbmhlaWdodDogNTBweDtcbmNvbG9yOndoaXRlO1xud2lkdGg6IDIwMHB4O1xuXG5tYXJnaW4tbGVmdDogMjFweDtcblxufVxuI3NlY3Rpb24+YnV0dG9uOmhvdmVye1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJEMkYzOTtcbiAgICB3aWR0aDogMjUwcHg7XG5cblxufSAgICBcblxuI3NlY3Rpb24+YnV0dG9uOmxhc3QtY2hpbGQ6aG92ZXJ7XG5cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiMzNzU0REI7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGJvcmRlci1yYWRpdXM6IDBweDtcbiAgICB3aWR0aDogMjAwcHg7XG4gICAgfVxuI3RvcEJveGltYWdlZ2lybCwjbXVzaWNib3ksI2JveVdpdGhwYXBlcnN7XG5cblxuaGVpZ2h0OiAxMDBweDtcblxuXG5cblxuXG59XG4jdG9wQm94aW1hZ2VnaXJse1xuXG4gICAgbWFyZ2luLWxlZnQ6MTExcHggO1xufVxuXG5cbiN0b3BCb3h7XG5cbmdyaWQtY29sdW1uLXN0YXJ0OiAyO1xuZ3JpZC1jb2x1bW4tZW5kOiA2O1xuYmFja2dyb3VuZC1jb2xvcjogIzM3NTREQjtcbmRpc3BsYXk6IGZsZXg7XG5nYXA6MTBweDtcbmhlaWdodDoxMDBweCA7XG5cblxuXG5cbn1cbiN0b3BUZXh0e1xuICBcbiAgZm9udC1mYW1pbHk6ICdTYXRpc2Z5JywgY3Vyc2l2ZTtcbmFsaWduLXNlbGY6IGNlbnRlcjtcbmZvbnQtc2l6ZTogNTBweDtcbmZvbnQtd2VpZ2h0OiBib2xkO1xubWFyZ2luOiAxMnB4O1xufVxuI2FkZFRhc2t7XG5cbndpZHRoOiA3MHB4O1xuaGVpZ2h0OiA3MHB4O1xucG9zaXRpb246IGFic29sdXRlO1xudG9wOjQ0MHB4O1xubGVmdDoxMTc4cHg7XG5iYWNrZ3JvdW5kLWNvbG9yOiAjMzc1NERCO1xuXG5ib3JkZXI6IG5vbmU7XG5ib3JkZXItcmFkaXVzOiAxMDAlO1xuXG5cbn1cblxuI2FkZHRhc2tpY29ue1xuXG4gICAgZmlsbDp3aGl0ZTtcbiAgIFxuXG5cblxufVxuXG4jYWRkVGFzazpob3ZlcntcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY1Njc4O1xuXG5cbn1cbiNkaWFsb2dDcmVhdGVQcm9qZWN0e1xuXG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyNjJjMzY7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICB3aWR0aDogMjUxcHg7XG5wYWRkaW5nOiAyMHB4O1xubWFyZ2luLXRvcDogMzc5cHg7XG5cbn1cbiNtZXNzYWdlQm94ZGl2e1xuXG4gICAgZGlzcGxheTogZmxleDtcblxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgcGFkZGluZzogMTVweDtcbiAgICBnYXA6NnB4O1xuICAgIFxuICAgXG59XG5cbiNtZXNzYWdlQm94ZGl2IGJ1dHRvbntcblxuICAgIHdpZHRoOiA3OHB4O1xuICAgIGhlaWdodDogMjZweDtcbmJvcmRlcjogbm9uZTtcbm91dGxpbmU6bm9uZTtcbmNvbG9yOndoaXRlO1xuXG59XG5cbiNtZXNzYWdlQm94ZGl2IGJ1dHRvbjpmaXJzdC1jaGlsZHtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNTNiMzA7XG59XG5cbiNtZXNzYWdlQm94ZGl2IGJ1dHRvbjpsYXN0LWNoaWxke1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJhYTMxZjtcbn1cblxuI21lc3NhZ2VCb3hkaXYgaW5wdXR7XG5cbiAgICBwYWRkaW5nOiA0cHggMTJweDtcbiAgICBib3JkZXItcmFkaXVzOjRweCA7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0UzRTNFMztcblxufVxuI21lc3NhZ2VCb3hkaXYgaW5wdXQ6YWN0aXZle1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBvdXRsaW5lOiBub25lO1xufVxuI21lc3NhZ2VCb3hkaXYgZGl2e1xuXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBnYXA6OHB4O1xuXG5cbn1cblxuXG4gIFxudGV4dGFyZWEge1xuICAgIHJlc2l6ZTogbm9uZTtcbiAgfVxuICNkaWFsb2dUYXNre1xuXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDoyNyU7XG4gICAgbGVmdDo0MCU7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6bm9uZTtcbiAgICB3aWR0aDogMjkxcHg7XG4gICAgaGVpZ2h0OiAzNTVweDtcbiAgICBwYWRkaW5nOiAxM3B4O1xuICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgIGJhY2tncm91bmQtY29sb3I6ICMyNjJjMzY7XG4gICBjb2xvcjp3aGl0ZVxuXG4gfVxuICNkaWFsb2dUYXNrIGlucHV0LCAjZGlhbG9nVGFzayB0ZXh0YXJlYXtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiOGMwY2M7XG4gfSBcblxuICBkaWFsb2c6OmJhY2tkcm9wIHtcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTtcbiAgfVxuICAjYnV0dG9uSG9sZGVye1xuXG5kaXNwbGF5OiBmbGV4O1xuZ2FwOiA4cHg7XG5qdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcbmhlaWdodDogMzBweDtcbnBhZGRpbmc6IDBweCAxMHB4O1xuICB9XG5cbiAgI2J1dHRvbkhvbGRlciBidXR0b257XG5cbiAgICB3aWR0aDogMTMwcHg7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6bm9uZTtcbiAgICBjb2xvcjogd2hpdGU7XG5cbiAgfVxuXG4gICNidXR0b25Ib2xkZXIgYnV0dG9uOmxhc3QtY2hpbGR7XG5cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmFhMzFmO1xuICAgIFxuXG4gIH1cblxuICAjYnV0dG9uSG9sZGVyIGJ1dHRvbjpmaXJzdC1jaGlsZHtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGNTNiMzA7XG5cbiAgfVxuXG4gICNidXR0b25Ib2xkZXIgYnV0dG9uOmhvdmVyLCNtZXNzYWdlQm94ZGl2IGJ1dHRvbjpob3ZlcntcblxuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyOiAycHggc29saWQgI2I4YzBjYztcblxuXG4gIH1cblxuICBcblxuICAjcHJvamVjdHNTZWN0aW9ue1xuXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBcbiAgICBcbiAgICBtYXJnaW4tdG9wOi0xNHB4O1xuICAgIG1hcmdpbi1sZWZ0OiAyMCU7XG4gICAgXG5cblxuICB9XG4gICNwcm9qZWN0c1NlY3Rpb24gYnV0dG9ue1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIHdpZHRoOiAxNTBweDtcbiAgICBoZWlnaHQ6IDMwcHg7XG4gICAgY29sb3I6IzgyODQ4OTtcbiAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgIGJvcmRlci1yYWRpdXM6IDdweDtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcblxuICB9XG4gICNwcm9qZWN0c1NlY3Rpb24gYnV0dG9uOmhvdmVye1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyZDJmMzk7XG5cblxuXG4gIH1cbiAgI2NvbnRlbnRUb2JlVXBkYXRlZHtcblxuICAgIC8qIGJvcmRlcjogc29saWQgM3B4IHJlZDsgKi9cbiAgIFxuICAgIGdyaWQtY29sdW1uOiAyLy0xO1xuICAgIGdyaWQtcm93OiAyLy0xO1xuXG5cblxuICB9XG4gICNzdGF0aXN0aWNzSG9sZGVyYm94e1xuXG4gICAgXG4gICAgaGVpZ2h0OiAxMDBweDtcbiAgICBtYXJnaW46IDIwcHggMHB4IDBweCAxMHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ2FwOiA3NnB4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG4gIH1cblxuICAjaW5mb3JtYXRpb25PZlByb2plY3RzSG9sZGVye1xuXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXG5cblxuXG4gIH1cbiAgI2luZm9ybWF0aW9uT2ZQcm9qZWN0c0hvbGRlciBwOmZpcnN0LWNoaWxkLCNUYXNrTnVtYmVyLCNjb21wbGV0ZWROdW1iZXJ7XG5cbiAgICBmb250LXNpemU6IDM0cHg7XG5cblxuICB9XG4gICNzdGF0aXN0aWNzSG9sZGVyYm94PmRpdntcblxuZGlzcGxheTogZmxleDtcblxud2lkdGg6IDMwMHB4O1xuaGVpZ2h0OiBpbmhlcml0O1xucGFkZGluZzogMTVweDtcbmJvcmRlci1yYWRpdXM6IDhweDtcbmp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xuYmFja2dyb3VuZC1jb2xvcjogIzE2MWEyMztcblxuXG4gfVxuICNwcm9qZWN0c0JhY2tkcm9wLCN0YXNrc0JhY2tkcm9wLCNjb21wbGV0ZWRCYWNrZHJvcHtcblxub3BhY2l0eTogMTUlO1xuYm9yZGVyLXJhZGl1czoxMDAlIDtcbndpZHRoOiA2MHB4O1xuaGVpZ2h0OiA2MHB4O1xuXG5cblxuXG5cblxuIH1cbiAjcHJvamVjdHNCYWNrZHJvcHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2E4MDNlNDtcblxuXG4gfVxuICN0YXNrc0JhY2tkcm9we1xuICBiYWNrZ3JvdW5kLWNvbG9yOiNGMzlDMTIgO1xuIH1cblxuICNjb21wbGV0ZWRCYWNrZHJvcHtcblxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjdBRTYwO1xuXG4gfVxuIFxuICNpY29uRGl2e1xuXG5kaXNwbGF5OiBmbGV4O1xuanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cblxuIH1cbiAjaWNvbkRpdiBpbWd7XG4gIHdpZHRoOjMycHg7XG4gIGhlaWdodDozMHB4OyBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xubGVmdDogNDZweDtcbnRvcDoxNXB4XG4gfVxuXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtFQUlFOztJQUVFLFlBQVk7SUFDWixXQUFXO0lBQ1gsc0JBQXNCO0lBQ3RCLG9DQUFvQzs7SUFFcEMscUJBQXFCOzs7Ozs7QUFNekI7QUFDQTtBQUNBLHlCQUF5Qjs7QUFFekIsYUFBYTtBQUNiLDBDQUEwQztBQUMxQyxpQ0FBaUM7QUFDakMsYUFBYTtBQUNiLFlBQVk7OztBQUdaOztBQUVBOzs7SUFHSSxnQkFBZ0I7SUFDaEIsY0FBYztJQUNk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YUFBYTtJQUNiLHNCQUFzQjs7O0lBR3RCLGdCQUFnQjtJQUNoQixnQkFBZ0I7Ozs7RUFJbEI7RUFDQTs7SUFFRSw2QkFBNkI7SUFDN0IsWUFBWTtJQUNaLFlBQVk7SUFDWixZQUFZO0lBQ1osYUFBYTtHQUNkLGlCQUFpQjtHQUNqQixrQkFBa0I7SUFDakIsa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixnQkFBZ0I7O0VBRWxCO0VBQ0E7SUFDRSx5QkFBeUI7Ozs7RUFJM0I7RUFDQTs7SUFFRSwyQkFBMkI7O0lBRTNCLGlCQUFpQjtJQUNqQixjQUFjOzs7O0VBSWhCO0VBQ0E7OztJQUdFLGFBQWE7SUFDYix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLFNBQVM7SUFDVCx1QkFBdUI7O0VBRXpCOztFQUVBOztJQUVFLGFBQWE7SUFDYixzQkFBc0I7Ozs7O0VBS3hCO0VBQ0E7O0lBRUUsZUFBZTs7O0VBR2pCO0VBQ0E7O0FBRUYsYUFBYTs7QUFFYixZQUFZO0FBQ1osZUFBZTtBQUNmLGFBQWE7QUFDYixrQkFBa0I7QUFDbEIsNkJBQTZCO0FBQzdCLHlCQUF5Qjs7O0NBR3hCO0NBQ0E7O0FBRUQsWUFBWTtBQUNaLG1CQUFtQjtBQUNuQixXQUFXO0FBQ1gsWUFBWTs7Ozs7OztDQU9YO0NBQ0E7RUFDQyx5QkFBeUI7OztDQUcxQjtDQUNBO0VBQ0MseUJBQXlCO0NBQzFCOztDQUVBOztFQUVDLHlCQUF5Qjs7Q0FFMUI7O0NBRUE7O0FBRUQsYUFBYTtBQUNiLHVCQUF1Qjs7O0NBR3RCO0NBQ0E7RUFDQyxVQUFVO0VBQ1YsV0FBVztFQUNYLGtCQUFrQjtBQUNwQixVQUFVO0FBQ1Y7Q0FDQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG4gIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUluZGllK0Zsb3dlciZmYW1pbHk9UXVpY2tzYW5kOndnaHRANTAwJmZhbWlseT1TYXRpc2Z5JmRpc3BsYXk9c3dhcCcpO1xcblxcbiAgXFxuICAqe1xcblxcbiAgICBwYWRkaW5nOiAwcHg7XFxuICAgIG1hcmdpbjogMHB4O1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBmb250LWZhbWlseTogJ1F1aWNrc2FuZCcsIHNhbnMtc2VyaWY7XFxuXFxuICAgIGxldHRlci1zcGFjaW5nOiAwLjhweDtcXG5cXG4gICAgXFxuXFxuXFxuXFxufVxcbmJvZHl7XFxuYmFja2dyb3VuZC1jb2xvcjogIzBmMGUxMztcXG5cXG5kaXNwbGF5OiBncmlkO1xcbmdyaWQtdGVtcGxhdGUtY29sdW1uczogMjUwcHggcmVwZWF0KDQsMWZyKTtcXG5ncmlkLXRlbXBsYXRlLXJvd3M6cmVwZWF0KDcsMWZyKSA7XFxuaGVpZ2h0OiAxMDB2aDtcXG5jb2xvcjogd2hpdGU7XFxuXFxuXFxufVxcblxcbiNzaWRlYm94e1xcblxcbiAgXFxuICAgIGdyaWQtY29sdW1uOiAxLzE7XFxuICAgIGdyaWQtcm93OiAxLy0xO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTYxYTIzO1xcbiAgXFxuIFxcblxcblxcblxcbn1cXG5cXG4jYXBwVGl0bGVIb2xkZXJ7XFxuXFxuXFxuZGlzcGxheTogZmxleDtcXG5cXG5hbGlnbi1pdGVtczogY2VudGVyO1xcblxcbmJhY2tncm91bmQtY29sb3I6ICMxNjFhMjM7XFxuXFxuYm9yZGVyLWJvdHRvbTogc29saWQgMC41cHggICM0MDQ4NWE7XFxuXFxuXFxucGFkZGluZzogMjJweDtcXG5oZWlnaHQ6IDEwMHB4O1xcblxcblxcblxcblxcbn1cXG4jYXBwVGl0bGV7XFxuXFxuZm9udC1zaXplOiAxOHB4O1xcbmZvbnQtd2VpZ2h0OiBib2xkO1xcblxcbn1cXG4jYXBwTG9nb3tcXG4gIFxcbiAgICBiYWNrZ3JvdW5kOiB1cmwoLi9pY29ucy9saW51eEhlYWQucG5nKTtcXG4gICAgd2lkdGg6IDYwcHg7XFxuICAgIGhlaWdodDogNjBweDtcXG59XFxuXFxuI3NlY3Rpb25UaXRsZXtcXG5cXG4gICAgZm9udC1zaXplOiAxMnB4O1xcbiAgICBtYXJnaW46ICAxMnB4IDBweCAwcHggMzlweDtcXG4gICBcXG4gICAgXFxuXFxuXFxufVxcbiNzZWN0aW9ue1xcblxcbiAgICBjb2xvcjogIzQ4NGI1MjtcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICBcXG4gICAgZ2FwOiAxMnB4O1xcbiAgICBtYXJnaW4tdG9wOiAxMnB4O1xcblxcbn1cXG4jc2VjdGlvbj5idXR0b257XFxuXFxuICAgIGJhY2tncm91bmQ6dHJhbnNwYXJlbnQgO1xcbiAgICBjb2xvcjogIzlkOWZhNTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICB3aWR0aDogMTUwcHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGhlaWdodDogNDBweDtcXG4gICAgcGFkZGluZzogMTJweDtcXG4gICAgZ2FwOiAxNHB4O1xcbiAgICBmb250LXNpemU6IDE1LjVweDtcXG4gICAgcGFkZGluZy1sZWZ0OiAyNnB4O1xcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICBcXG4gICBcXG59XFxuXFxuI3NlY3Rpb24+YnV0dG9uOmxhc3QtY2hpbGR7XFxuXFxuYmFja2dyb3VuZC1jb2xvcjojMzMzMzMzO1xcbmJvcmRlci1yYWRpdXM6IDEycHg7XFxuaGVpZ2h0OiA1MHB4O1xcbmNvbG9yOndoaXRlO1xcbndpZHRoOiAyMDBweDtcXG5cXG5tYXJnaW4tbGVmdDogMjFweDtcXG5cXG59XFxuI3NlY3Rpb24+YnV0dG9uOmhvdmVye1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMkQyRjM5O1xcbiAgICB3aWR0aDogMjUwcHg7XFxuXFxuXFxufSAgICBcXG5cXG4jc2VjdGlvbj5idXR0b246bGFzdC1jaGlsZDpob3ZlcntcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjojMzc1NERCO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDBweDtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbiAgICB9XFxuI3RvcEJveGltYWdlZ2lybCwjbXVzaWNib3ksI2JveVdpdGhwYXBlcnN7XFxuXFxuXFxuaGVpZ2h0OiAxMDBweDtcXG5cXG5cXG5cXG5cXG5cXG59XFxuI3RvcEJveGltYWdlZ2lybHtcXG5cXG4gICAgbWFyZ2luLWxlZnQ6MTExcHggO1xcbn1cXG5cXG5cXG4jdG9wQm94e1xcblxcbmdyaWQtY29sdW1uLXN0YXJ0OiAyO1xcbmdyaWQtY29sdW1uLWVuZDogNjtcXG5iYWNrZ3JvdW5kLWNvbG9yOiAjMzc1NERCO1xcbmRpc3BsYXk6IGZsZXg7XFxuZ2FwOjEwcHg7XFxuaGVpZ2h0OjEwMHB4IDtcXG5cXG5cXG5cXG5cXG59XFxuI3RvcFRleHR7XFxuICBcXG4gIGZvbnQtZmFtaWx5OiAnU2F0aXNmeScsIGN1cnNpdmU7XFxuYWxpZ24tc2VsZjogY2VudGVyO1xcbmZvbnQtc2l6ZTogNTBweDtcXG5mb250LXdlaWdodDogYm9sZDtcXG5tYXJnaW46IDEycHg7XFxufVxcbiNhZGRUYXNre1xcblxcbndpZHRoOiA3MHB4O1xcbmhlaWdodDogNzBweDtcXG5wb3NpdGlvbjogYWJzb2x1dGU7XFxudG9wOjQ0MHB4O1xcbmxlZnQ6MTE3OHB4O1xcbmJhY2tncm91bmQtY29sb3I6ICMzNzU0REI7XFxuXFxuYm9yZGVyOiBub25lO1xcbmJvcmRlci1yYWRpdXM6IDEwMCU7XFxuXFxuXFxufVxcblxcbiNhZGR0YXNraWNvbntcXG5cXG4gICAgZmlsbDp3aGl0ZTtcXG4gICBcXG5cXG5cXG5cXG59XFxuXFxuI2FkZFRhc2s6aG92ZXJ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjU2Nzg7XFxuXFxuXFxufVxcbiNkaWFsb2dDcmVhdGVQcm9qZWN0e1xcblxcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyNjJjMzY7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICAgIHdpZHRoOiAyNTFweDtcXG5wYWRkaW5nOiAyMHB4O1xcbm1hcmdpbi10b3A6IDM3OXB4O1xcblxcbn1cXG4jbWVzc2FnZUJveGRpdntcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG5cXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgcGFkZGluZzogMTVweDtcXG4gICAgZ2FwOjZweDtcXG4gICAgXFxuICAgXFxufVxcblxcbiNtZXNzYWdlQm94ZGl2IGJ1dHRvbntcXG5cXG4gICAgd2lkdGg6IDc4cHg7XFxuICAgIGhlaWdodDogMjZweDtcXG5ib3JkZXI6IG5vbmU7XFxub3V0bGluZTpub25lO1xcbmNvbG9yOndoaXRlO1xcblxcbn1cXG5cXG4jbWVzc2FnZUJveGRpdiBidXR0b246Zmlyc3QtY2hpbGR7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNTNiMzA7XFxufVxcblxcbiNtZXNzYWdlQm94ZGl2IGJ1dHRvbjpsYXN0LWNoaWxke1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmFhMzFmO1xcbn1cXG5cXG4jbWVzc2FnZUJveGRpdiBpbnB1dHtcXG5cXG4gICAgcGFkZGluZzogNHB4IDEycHg7XFxuICAgIGJvcmRlci1yYWRpdXM6NHB4IDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBvdXRsaW5lOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTNFM0UzO1xcblxcbn1cXG4jbWVzc2FnZUJveGRpdiBpbnB1dDphY3RpdmV7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgb3V0bGluZTogbm9uZTtcXG59XFxuI21lc3NhZ2VCb3hkaXYgZGl2e1xcblxcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6OHB4O1xcblxcblxcbn1cXG5cXG5cXG4gIFxcbnRleHRhcmVhIHtcXG4gICAgcmVzaXplOiBub25lO1xcbiAgfVxcbiAjZGlhbG9nVGFza3tcXG5cXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB0b3A6MjclO1xcbiAgICBsZWZ0OjQwJTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBvdXRsaW5lOm5vbmU7XFxuICAgIHdpZHRoOiAyOTFweDtcXG4gICAgaGVpZ2h0OiAzNTVweDtcXG4gICAgcGFkZGluZzogMTNweDtcXG4gICBib3JkZXItcmFkaXVzOiAxMnB4O1xcbiAgIGJhY2tncm91bmQtY29sb3I6ICMyNjJjMzY7XFxuICAgY29sb3I6d2hpdGVcXG5cXG4gfVxcbiAjZGlhbG9nVGFzayBpbnB1dCwgI2RpYWxvZ1Rhc2sgdGV4dGFyZWF7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiOGMwY2M7XFxuIH0gXFxuXFxuICBkaWFsb2c6OmJhY2tkcm9wIHtcXG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDVweCk7XFxuICB9XFxuICAjYnV0dG9uSG9sZGVye1xcblxcbmRpc3BsYXk6IGZsZXg7XFxuZ2FwOiA4cHg7XFxuanVzdGlmeS1jb250ZW50OiBlbmQ7XFxuaGVpZ2h0OiAzMHB4O1xcbnBhZGRpbmc6IDBweCAxMHB4O1xcbiAgfVxcblxcbiAgI2J1dHRvbkhvbGRlciBidXR0b257XFxuXFxuICAgIHdpZHRoOiAxMzBweDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBvdXRsaW5lOm5vbmU7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG5cXG4gIH1cXG5cXG4gICNidXR0b25Ib2xkZXIgYnV0dG9uOmxhc3QtY2hpbGR7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyYWEzMWY7XFxuICAgIFxcblxcbiAgfVxcblxcbiAgI2J1dHRvbkhvbGRlciBidXR0b246Zmlyc3QtY2hpbGR7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGNTNiMzA7XFxuXFxuICB9XFxuXFxuICAjYnV0dG9uSG9sZGVyIGJ1dHRvbjpob3ZlciwjbWVzc2FnZUJveGRpdiBidXR0b246aG92ZXJ7XFxuXFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjYjhjMGNjO1xcblxcblxcbiAgfVxcblxcbiAgXFxuXFxuICAjcHJvamVjdHNTZWN0aW9ue1xcblxcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgXFxuICAgIFxcbiAgICBtYXJnaW4tdG9wOi0xNHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xcbiAgICBcXG5cXG5cXG4gIH1cXG4gICNwcm9qZWN0c1NlY3Rpb24gYnV0dG9ue1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICB3aWR0aDogMTUwcHg7XFxuICAgIGhlaWdodDogMzBweDtcXG4gICAgY29sb3I6IzgyODQ4OTtcXG4gICBmb250LXdlaWdodDogYm9sZDtcXG4gICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICAgIGJvcmRlci1yYWRpdXM6IDdweDtcXG4gICAgZm9udC1zaXplOiAxNHB4O1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcblxcbiAgfVxcbiAgI3Byb2plY3RzU2VjdGlvbiBidXR0b246aG92ZXJ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyZDJmMzk7XFxuXFxuXFxuXFxuICB9XFxuICAjY29udGVudFRvYmVVcGRhdGVke1xcblxcbiAgICAvKiBib3JkZXI6IHNvbGlkIDNweCByZWQ7ICovXFxuICAgXFxuICAgIGdyaWQtY29sdW1uOiAyLy0xO1xcbiAgICBncmlkLXJvdzogMi8tMTtcXG5cXG5cXG5cXG4gIH1cXG4gICNzdGF0aXN0aWNzSG9sZGVyYm94e1xcblxcbiAgICBcXG4gICAgaGVpZ2h0OiAxMDBweDtcXG4gICAgbWFyZ2luOiAyMHB4IDBweCAwcHggMTBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOiA3NnB4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG5cXG4gIH1cXG5cXG4gICNpbmZvcm1hdGlvbk9mUHJvamVjdHNIb2xkZXJ7XFxuXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFxuXFxuXFxuXFxuICB9XFxuICAjaW5mb3JtYXRpb25PZlByb2plY3RzSG9sZGVyIHA6Zmlyc3QtY2hpbGQsI1Rhc2tOdW1iZXIsI2NvbXBsZXRlZE51bWJlcntcXG5cXG4gICAgZm9udC1zaXplOiAzNHB4O1xcblxcblxcbiAgfVxcbiAgI3N0YXRpc3RpY3NIb2xkZXJib3g+ZGl2e1xcblxcbmRpc3BsYXk6IGZsZXg7XFxuXFxud2lkdGg6IDMwMHB4O1xcbmhlaWdodDogaW5oZXJpdDtcXG5wYWRkaW5nOiAxNXB4O1xcbmJvcmRlci1yYWRpdXM6IDhweDtcXG5qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG5iYWNrZ3JvdW5kLWNvbG9yOiAjMTYxYTIzO1xcblxcblxcbiB9XFxuICNwcm9qZWN0c0JhY2tkcm9wLCN0YXNrc0JhY2tkcm9wLCNjb21wbGV0ZWRCYWNrZHJvcHtcXG5cXG5vcGFjaXR5OiAxNSU7XFxuYm9yZGVyLXJhZGl1czoxMDAlIDtcXG53aWR0aDogNjBweDtcXG5oZWlnaHQ6IDYwcHg7XFxuXFxuXFxuXFxuXFxuXFxuXFxuIH1cXG4gI3Byb2plY3RzQmFja2Ryb3B7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTgwM2U0O1xcblxcblxcbiB9XFxuICN0YXNrc0JhY2tkcm9we1xcbiAgYmFja2dyb3VuZC1jb2xvcjojRjM5QzEyIDtcXG4gfVxcblxcbiAjY29tcGxldGVkQmFja2Ryb3B7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjdBRTYwO1xcblxcbiB9XFxuIFxcbiAjaWNvbkRpdntcXG5cXG5kaXNwbGF5OiBmbGV4O1xcbmp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcblxcbiB9XFxuICNpY29uRGl2IGltZ3tcXG4gIHdpZHRoOjMycHg7XFxuICBoZWlnaHQ6MzBweDsgXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxubGVmdDogNDZweDtcXG50b3A6MTVweFxcbiB9XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJcblxuZXhwb3J0IGxldCBhbGxNYXRlcmlhbHM9KCgpPT57XG5cbiAgICBsZXQgYWxsUHJvamVjdHM9W107XG4gICAgbGV0IGFsbFRhc2tzPVtdO1xuXG5cbnJldHVybiB7YWxsUHJvamVjdHMsYWxsVGFza3N9XG5cbn0pKClcblxuXG5leHBvcnQgbGV0IFByb2plY3RNYW5hZ2VtZW50PSgoKT0+e1xuXG4gICAgY2xhc3MgY3JlYXRlUHJvamVjdHtcblxuICAgICAgICBjb25zdHJ1Y3Rvcihwcm9qZWN0VGl0bGUpe1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0VGl0bGU9cHJvamVjdFRpdGxlO1xuICAgICAgICAgICAgdGhpcy5wcm9qZWN0TGlzdD1bXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb2plY3RUaXRsZSk7XG4gICAgXG4gICAgXG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUb0FsbFByb2plY3RzKE5ld1Byb2plY3QpIHtcbiAgICAgICAgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW2FsbE1hdGVyaWFscy5hbGxQcm9qZWN0cy5sZW5ndGhdPU5ld1Byb2plY3Q7XG4gICAgICAgIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIEZpbmRQcm9qZWN0KFByb2plY3ROYW1lKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsUHJvamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgXG4gICAgICAgIGlmKFByb2plY3ROYW1lPT09YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW2ldLnByb2plY3ROYW1lKVxuICAgICBcbiAgICAgIFxuICAgICAgICAgICAgIFxuICAgICAgICAgICAgIHJldHVybiBhbGxQcm9qZWN0c1tpXS5wcm9qZWN0TGlzdDtcbiAgICAgICAgfVxuICAgICAgICAgXG4gICAgIH1cblxuXG5cbnJldHVybntGaW5kUHJvamVjdCxjcmVhdGVQcm9qZWN0LGFkZFRvQWxsUHJvamVjdHN9XG5cblxufSkoKSBcblxuXG5leHBvcnQgbGV0IFRhc2tNYW5hZ2VtZW50PSgoKT0+e1xuXG4gICAgY2xhc3MgY3JlYXRlVGFza3tcblxuXG4gICAgICAgIGNvbnN0cnVjdG9yKHRpdGxlLGRlc2NyaXB0aW9uLGRhdGUscHJpb3JpdHkpe1xuICAgIFxuICAgICAgICAgICAgdGhpcy50aXRsZT10aXRsZTtcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb249ZGVzY3JpcHRpb247XG4gICAgICAgICAgICB0aGlzLmRhdGU9ZGF0ZTtcbiAgICAgICAgICAgIHRoaXMucHJpb3JpdHk9cHJpb3JpdHk7XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRpbmdUYXNrKG5ld1Rhc2sscHJvamVjdD1zcGFjZVRyYXZlbHMpe1xuXG4gICAgICAgIFxuICAgICAgICBhbGxNYXRlcmlhbHMuYWxsVGFza3NbYWxsTWF0ZXJpYWxzLmFsbFRhc2tzLmxlbmd0aF09bmV3VGFza1xuICAgICAgICAvLyBwcm9qZWN0LnByb2plY3RMaXN0W3Byb2plY3QucHJvamVjdExpc3QubGVuZ3RoXT1uZXdUYXNrO1xuICAgICAgICBGaW5kUHJvamVjdChwcm9qZWN0KVsgRmluZFByb2plY3QocHJvamVjdCkubGVuZ3RoXT1uZXdUYXNrO1xuICAgIFxuICAgIFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmRpbmdUYXNrKFRhc2tOYW1lKXtcblxuICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsUHJvamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICBcbiAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGFsbFByb2plY3RzW2ldW1wicHJvamVjdExpc3RcIl0ubGVuZ3RoOyB4KyspIHtcbiAgICBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICBpZihUYXNrTmFtZT09PWFsbFByb2plY3RzW2ldW1wicHJvamVjdExpc3RcIl1beF1bXCJ0aXRsZVwiXSl7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmb3VuZFwiLHgsaSxhbGxQcm9qZWN0c1tpXVtcInByb2plY3RMaXN0XCJdW3hdW1widGl0bGVcIl0pO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybnt4LGl9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgfVxuXG5cblxuXG5yZXR1cm4ge2NyZWF0ZVRhc2ssYWRkaW5nVGFzayxmaW5kaW5nVGFza31cblxuXG59KSgpXG5cblxuLy90aGUgYXJyeXMgc2hvdWxkIGhhdmUgYSBuYW1lIGFuZCB0aGUgdGFza3Mgc2hvdWxkIGtub3cgd2hlcmUgdGhleSBiZWxvbmcgdG9cblxuZnVuY3Rpb24gcGxhY2VUYXNraW5BbGxUYXNrcygpIHtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tcInByb2plY3RMaXN0XCJdLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICBhbGxNYXRlcmlhbHMuYWxsVGFza3NbaV09YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW1wicHJvamVjdExpc3RcIl1beF1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cblxuXG5cblxuXG5cblxuXG5cbi8vY3JlYXRpbmcgZGVmYXVsdCBcbmxldCBzcGFjZVRyYXZlbHM9bmV3IFByb2plY3RNYW5hZ2VtZW50LmNyZWF0ZVByb2plY3QoXCJzcGFjZSB0cmlwXCIpO1xuUHJvamVjdE1hbmFnZW1lbnQuYWRkVG9BbGxQcm9qZWN0cyhzcGFjZVRyYXZlbHMpO1xuXG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTtcblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YoYXJndW1lbnQpID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjc3RyaW5nLWFyZ3VtZW50c1wiKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwidmFyIGRlZmF1bHRPcHRpb25zID0ge307XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gIGRlZmF1bHRPcHRpb25zID0gbmV3T3B0aW9ucztcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMCk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCJpbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICovXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG5cbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiBNKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiBkKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0RhdGUoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gYShkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gRyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICBZOiBmdW5jdGlvbiBZKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7XG5cbiAgICAvLyBUd28gZGlnaXQgeWVhclxuICAgIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgICAgdmFyIHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH1cblxuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAnWW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrWWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiBmdW5jdGlvbiBSKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRXh0ZW5kZWQgeWVhci4gVGhpcyBpcyBhIHNpbmdsZSBudW1iZXIgZGVzaWduYXRpbmcgdGhlIHllYXIgb2YgdGhpcyBjYWxlbmRhciBzeXN0ZW0uXG4gIC8vIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBsb2NhbGl6ZXJzIGFyZSBCLkMuIHllYXJzOlxuICAvLyB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICAvLyB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICAvLyB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICAvLyB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICAvLyB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICAvLyBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gIC8vIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZC5cbiAgdTogZnVuY3Rpb24gdShkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiBRKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ1EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcbiAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIHEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG4gICAgICBjYXNlICdxbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlICdxcXFxJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuICAgICAgY2FzZSAnTW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG4gICAgICBjYXNlICdNTU1NJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gTChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTEwnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gdyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG4gICAgaWYgKHRva2VuID09PSAnd28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiBJKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcbiAgICBpZiAodG9rZW4gPT09ICdJbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmQoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiBEKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gRShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIGUoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG4gICAgICBjYXNlICdlbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ2VlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gYyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIGkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG4gICAgICBjYXNlICdpaSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gYShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gYihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgfVxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gQihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiBLKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gayhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gUyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuUyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIFgoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIHgoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiBPKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnT08nOlxuICAgICAgY2FzZSAnT09PJzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiB6KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiB0KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIFQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBvcHRpb25zKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwidmFyIGRhdGVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIHRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfVxufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xudmFyIGZvcm1hdERpc3RhbmNlID0gZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQudG9TdHJpbmcoKSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0RGlzdGFuY2U7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBUT0RPOiBSZW1vdmUgU3RyaW5nKClcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qc1wiO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7XG4gICAgLy8gQHRzLWlnbm9yZTogRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsZW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCI7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXVxufTtcblxuLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcbnZhciBvcmRpbmFsTnVtYmVyID0gZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX29wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufTtcbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiBhcmd1bWVudENhbGxiYWNrKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBxdWFydGVyIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2soaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDAgLyogU3VuZGF5ICovLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi8uLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRMb2NhbGU7IiwiaW1wb3J0IGlzVmFsaWQgZnJvbSBcIi4uL2lzVmFsaWQvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSBcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanNcIjsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcblxuLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuXG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX29wdGlvbnMkbG9jYWxlLCBfcmVmMiwgX3JlZjMsIF9yZWY0LCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZTIsIF9vcHRpb25zJGxvY2FsZTIkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLCBfcmVmNSwgX3JlZjYsIF9yZWY3LCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZTMsIF9vcHRpb25zJGxvY2FsZTMkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMywgX2RlZmF1bHRPcHRpb25zJGxvY2FsNDtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgd2Vla1N0YXJ0c09uID0gdG9JbnRlZ2VyKChfcmVmNSA9IChfcmVmNiA9IChfcmVmNyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTMgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTMkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTMub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMyRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUzJG9wdGkud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNyAhPT0gdm9pZCAwID8gX3JlZjcgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY2ICE9PSB2b2lkIDAgPyBfcmVmNiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwzID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsNCA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsNC53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY1ICE9PSB2b2lkIDAgPyBfcmVmNSA6IDApO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9XG5cbiAgLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMpICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICB2YXIgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZWRbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgaWYgKCFpc0RhdGUoZGlydHlEYXRlKSAmJiB0eXBlb2YgZGlydHlEYXRlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59IiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKSk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHRpbWVzdGFtcCA9IHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufSIsIi8vY3JlYXRpbmcgdGhlIERPTVxuXG5pbXBvcnQgJy4vc3R5bGUuY3NzJ1xuXG5pbXBvcnQgSGVhZEltYWdlIGZyb20nLi9pY29ucy9saW51eEhlYWQucG5nJ1xuaW1wb3J0IEhvbWVJY29uIGZyb20gJy4vaWNvbnMvSG9tZUJ1dHRvbnMuc3ZnJ1xuaW1wb3J0IGFsbFRhc2tzaWNvbiBmcm9tICcuL2ljb25zL1Rhc2tzLnN2ZydcbmltcG9ydCBkYXRlSWNvbiBmcm9tICcuL2ljb25zL2FycmFuZ2VEYXRlcy5zdmcnXG5pbXBvcnQgY3JlYXRlUHJvamVjdHNpY29uIGZyb20gJy4vaWNvbnMvY3JlYXRlUHJvamVjdC5zdmcnXG5pbXBvcnQgcHJvamVjdHNJY29uIGZyb20gJy4vaWNvbnMvUHJvamVjdHMuc3ZnJ1xuaW1wb3J0IHRvcEJveEltYWdlIGZyb20gJy4vaW1hZ2VzL2dpcmwuc3ZnJ1xuaW1wb3J0IG11c2ljaW1hZ2UgZnJvbSAnLi9pbWFnZXMvbXVzaWMuc3ZnJ1xuaW1wb3J0IGFkZFRhc2tJbWFnZSBmcm9tICcuL2ljb25zL2NyZWF0ZUFkZC5zdmcnXG5pbXBvcnQgYm95cGFwZXJzIGZyb20gJy4vaW1hZ2VzL2NhcnJ5aW5ncGFwZXJzLnN2ZydcbmltcG9ydCB7Zm9ybWF0fSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgeyBQcm9qZWN0TWFuYWdlbWVudCB9IGZyb20gJy4vYWRkLmpzJ1xuaW1wb3J0IHsgYWxsTWF0ZXJpYWxzIH0gZnJvbSAnLi9hZGQuanMnXG5pbXBvcnQgeyBzcGFjZVRyYXZlbHMgfSBmcm9tICcuL2FkZC5qcydcbmltcG9ydCB7IFRhc2tNYW5hZ2VtZW50IH0gZnJvbSAnLi9hZGQuanMnXG5pbXBvcnQgYnJpZWZjYXNlUHJvamVjdHMgZnJvbSAnLi9pY29ucy9icmllZmNhc2Utb3V0bGluZS5zdmcnXG5pbXBvcnQgbWVzc2FnZUljb24gZnJvbSAnLi9pY29ucy9tZXNzYWdlLW91dGxpbmUuc3ZnJ1xuXG5jbGFzcyBjcmVhdGVFbGVtZW50dG9Eb217XG5cbiAgZG9tRWxlbWVudENyZWF0b3IodHlwZSxuZXdJZCxwYXJlbnRCb3gsV29yZHM9XCJcIixwbGFjZWhvbGRlcldvcmRzPVwiXCIpe1xuICAgIGxldCBuZXdFbGVtZW50PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSlcbiAgICBuZXdFbGVtZW50LmlkPW5ld0lkO1xuICAgIG5ld0VsZW1lbnQudGV4dENvbnRlbnQ9V29yZHNcbiAgICBuZXdFbGVtZW50LnBsYWNlaG9sZGVyPXBsYWNlaG9sZGVyV29yZHM7XG4gICAgcGFyZW50Qm94LmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xuICAgIFxuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICAgIFxuICAgIH1cbiAgICBJbWFnZUxvYWR0b0RPbShJY29uLHBhcmVudEJveCxpZE5hbWUpIHtcbiAgICBcbiAgICAgIGxldCBteUljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICAgIG15SWNvbi5zcmMgPSBJY29uO1xuICAgICAgbXlJY29uLmlkPWlkTmFtZTtcbiAgICAgIHBhcmVudEJveC5hcHBlbmRDaGlsZChteUljb24pO1xuICAgIFxuICAgICAgcmV0dXJuIG15SWNvbjtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuXG5cbn1cblxubGV0IGRvbUVsZW1lbnRNYWtlcj1uZXcgY3JlYXRlRWxlbWVudHRvRG9tKCk7XG5cblxuXG5leHBvcnQgbGV0IHNpZGViYXI9KCgpPT57XG5cbmxldCBzaWRlcmJveD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJzaWRlYm94XCIsZG9jdW1lbnQuYm9keSk7XG5cbmxldCBhcHBUaXRsZUhvbGRlcj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJhcHBUaXRsZUhvbGRlclwiLHNpZGVyYm94KTtcblxubGV0IGFwcExvZ289ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKEhlYWRJbWFnZSxhcHBUaXRsZUhvbGRlcixcImFwcExvZ29cIilcblxubGV0IGFwcFRpdGxlPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigncCcsXCJhcHBUaXRsZVwiLGFwcFRpdGxlSG9sZGVyLFwiVWJ1bnR1IFRhc2tzXCIpO1xuXG5cblxuXG5sZXQgc2VjdGlvbj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJzZWN0aW9uXCIsc2lkZXJib3gpXG5cbmxldCBob21lQnV0dG9uPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignYnV0dG9uJyxcImhvbWVEaXZcIixzZWN0aW9uKTtcbmxldCBob21laWNvbj1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oSG9tZUljb24saG9tZUJ1dHRvbixcImhvbWVpY29uXCIpXG5sZXQgaG9tZVRleHQ9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdwJyxcImhvbWV0ZXh0XCIsaG9tZUJ1dHRvbixcIkhvbWVcIik7XG5cblxubGV0IERhdGVzQXJyYW5nZWRCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY2FsZW5kZXJcIixzZWN0aW9uKTtcbmxldCBEYXRlc2ljb249ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKGRhdGVJY29uLERhdGVzQXJyYW5nZWRCdXR0b24sXCJEYXRlc2ljb25cIilcbmxldCBEYXRlc1RleHQ9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdwJyxcImhvbWV0ZXh0XCIsRGF0ZXNBcnJhbmdlZEJ1dHRvbixcIkNhbGVuZGVyXCIpO1xuXG5sZXQgUHJvamVjdHNCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiUHJvamVjdHNcIixzZWN0aW9uKTtcbmxldCBQcm9qZWN0c0ljb249ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKHByb2plY3RzSWNvbixQcm9qZWN0c0J1dHRvbixcInByb2plY3RJY29uXCIpXG5sZXQgUHJvamVjdHNUZXh0PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigncCcsXCJQcm9qZWN0VGV4dFwiLFByb2plY3RzQnV0dG9uLFwiUHJvamVjdHNcIilcblxubGV0IGRpdlByb2plY3RzU2VjdGlvbj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJwcm9qZWN0c1NlY3Rpb25cIixzZWN0aW9uKVxuXG4gbGV0IGNyZWF0ZXByb2plY3RzQnV0dG9uPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignYnV0dG9uJyxcImNyZWF0ZXByb2plY3RzXCIsc2VjdGlvbik7XG5sZXQgY3JlYXRlUHJvamVjdHNJY29uPWRvbUVsZW1lbnRNYWtlci5JbWFnZUxvYWR0b0RPbShjcmVhdGVQcm9qZWN0c2ljb24sY3JlYXRlcHJvamVjdHNCdXR0b24sXCJjcmVhdGVwcm9qZWN0c2ljb25cIilcbmxldCBjcmVhdGVQcm9qZWN0PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigncCcsXCJwcm9qZWN0VGV4dFwiLGNyZWF0ZXByb2plY3RzQnV0dG9uLFwiQ3JlYXRlIFByb2plY3RzXCIpO1xuY3JlYXRlcHJvamVjdHNCdXR0b24udGl0bGU9XCJDcmVhdGUgUHJvamVjdFwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbnJldHVybiB7Y3JlYXRlcHJvamVjdHNCdXR0b24sc2lkZXJib3gsZGl2UHJvamVjdHNTZWN0aW9ufTtcblxufSkoKTtcblxuXG5cbmV4cG9ydCBsZXQgdG9wQmFyPSgoKT0+e1xuXG4gIGxldCB0b3BCb3g9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaXYnLCd0b3BCb3gnLGRvY3VtZW50LmJvZHkpO1xuIFxuICBsZXQgdG9wVGV4dD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ3AnLCd0b3BUZXh0Jyx0b3BCb3gsYEVuam95IHlvdXIgJHtmb3JtYXQobmV3IERhdGUoKSwgJ0VFRUUnKX1gKVxuICBsZXQgdG9wQm94aW1hZ2U9ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKHRvcEJveEltYWdlLHRvcEJveCwndG9wQm94aW1hZ2VnaXJsJyk7XG4gIGxldCBtdXNpY3BpYz1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20obXVzaWNpbWFnZSx0b3BCb3gsXCJtdXNpY2JveVwiKVxuICBsZXQgYm95d2l0aHBhcGVycz1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oYm95cGFwZXJzLHRvcEJveCxcImJveVdpdGhwYXBlcnNcIik7XG5cblxuXG4gIHJldHVybiB7dG9wQm94fTtcbn0pKCk7XG5cbmV4cG9ydCBsZXQgY3JlYXRlVGFza2ljb249KCgpPT57XG5cbiAgbGV0IGFkZFRhc2s9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiYWRkVGFza1wiLGRvY3VtZW50LmJvZHkpXG4gIGFkZFRhc2sudGl0bGU9XCJDcmVhdGUgbmV3IHRhc2tcIlxuXG4gIGxldCBhZGRUYXNrSWNvbj1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oYWRkVGFza0ltYWdlLGFkZFRhc2ssXCJhZGR0YXNraWNvblwiKVxuXG5cblxucmV0dXJuIHthZGRUYXNrfVxufSkoKVxuXG5cblxubGV0IGlucHV0Qm94Y3JlYXRlUHJvamVjdHM9KCgpPT57XG4gIGxldCBkaWFsb2dCb3g9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaWFsb2cnLFwiZGlhbG9nQ3JlYXRlUHJvamVjdFwiLHNpZGViYXIuc2lkZXJib3gpO1xuICBsZXQgbWVzc2FnZUJveGRpdj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2Zvcm0nLFwibWVzc2FnZUJveGRpdlwiLGRpYWxvZ0JveClcbiAgbGV0IFByb2plY3ROYW1lbGFiZWw9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdsYWJlbCcsXCJwcm9qZWN0TmFtZVwiLG1lc3NhZ2VCb3hkaXYpXG4gIFByb2plY3ROYW1lbGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsXCJwcm9qZWN0TmFtZWlucHV0XCIpO1xuICBsZXQgcHJvamVjdE5hbWVpbnB1dD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2lucHV0JyxcInByb2plY3ROYW1laW5wdXRcIixtZXNzYWdlQm94ZGl2KVxuICBwcm9qZWN0TmFtZWlucHV0LnBsYWNlaG9sZGVyPVwiR28gdG8gdGhlIE1vb25cIjtcblxuICBsZXQgYnV0dG9uc2Rpdj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJidXR0b25kaXZcIixtZXNzYWdlQm94ZGl2KVxuXG4gIGxldCBjYW5jZWxCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY2FuY2VsQnV0dG9uXCIsYnV0dG9uc2RpdixcIkNhbmNlbFwiKVxuICBsZXQgZG9uZUJ1dHRvbj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2J1dHRvbicsXCJkb25lQnV0dG9uXCIsYnV0dG9uc2RpdixcIkNyZWF0ZVwiKVxuXG4gIFxucmV0dXJuIHtkaWFsb2dCb3gsY2FuY2VsQnV0dG9uLGRvbmVCdXR0b24scHJvamVjdE5hbWVpbnB1dH1cbn0pKClcbmZ1bmN0aW9uIGRpc2FibGVidXR0b24oYnV0dG9uKXtcbiAgYnV0dG9uLmRpc2FibGVkPXRydWU7XG4gIFxuICBcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZvcm1mb3Jwcm9qZWN0cyhidXR0b24pe1xuXG4gICAgaW5wdXRCb3hjcmVhdGVQcm9qZWN0cygpO1xuICAgIGRpc2FibGVidXR0b24oYnV0dG9uKVxuXG5cblxuICB9XG5cbnNpZGViYXIuY3JlYXRlcHJvamVjdHNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uKGUpeyBcbiAgaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5kaWFsb2dCb3guc2hvd01vZGFsKCk7XG59KTtcblxuZnVuY3Rpb24gY2xlYXJBbGxFbGVtZW50cyhzZWxlY3Rvcil7XG5cbmxldCBob2xkZXJDb250YWluZXI9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHtzZWxlY3Rvcn0+KmApO1xuaG9sZGVyQ29udGFpbmVyLmZvckVhY2goZWxlbWVudCA9PiB7XG4gIGVsZW1lbnQucmVtb3ZlKCk7XG59KTtcblxuXG5cbn1cblxuZnVuY3Rpb24gZnJvbURvbXRvQWxscHJvamVjdHMoKVxue1xuICBpZiAoaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5wcm9qZWN0TmFtZWlucHV0LnZhbHVlPT09XCJcIil7XG5cbiAgICByZXR1cm5cbiAgIH1cbiAgICBcbiAgICBcbiAgICBsZXQgbmV3UHJvamVjdD1uZXcgUHJvamVjdE1hbmFnZW1lbnQuY3JlYXRlUHJvamVjdChpbnB1dEJveGNyZWF0ZVByb2plY3RzLnByb2plY3ROYW1laW5wdXQudmFsdWUpO1xuICAgIFByb2plY3RNYW5hZ2VtZW50LmFkZFRvQWxsUHJvamVjdHMobmV3UHJvamVjdCk7XG5cblxufVxuXG5mdW5jdGlvbiBhZGRQcm9qZWN0KCl7XG5cbmZyb21Eb210b0FsbHByb2plY3RzKCk7XG5jcmVhdGVCdXR0b25zRnJvbUFsbFByb2plY3RzKCk7XG5cbn1cblxuZnVuY3Rpb24gYmFsYW5jaW5ncHJvamVjdHMoKXtcbiAgYWRkUHJvamVjdCgpO1xuICBVcGRhdGVOdW1iZXJPZlByb2plY3RzKCk7XG5cbn1cblxuaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5kb25lQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbiAoZSkge1xuICBcbiAgYmFsYW5jaW5ncHJvamVjdHMoKTtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBpbnB1dEJveGNyZWF0ZVByb2plY3RzLmRpYWxvZ0JveC5jbG9zZSgpO1xuICBcbiAgIFxuICBcbiBcbn0pO1xuXG5sZXQgY3JlYXRlVGFza0RpYWxvZz0oKCk9PntcbiBcbiAgbGV0IGRpYWxvZ1Rhc2s9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaWFsb2cnLFwiZGlhbG9nVGFza1wiLGRvY3VtZW50LmJvZHkpO1xuICBsZXQgUmVxdWlyZW1lbnRzRm9ybT1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2Zvcm0nLFwibWVzc2FnZUJveGRpdlwiLGRpYWxvZ1Rhc2spXG5cbiAgbGV0IFRhc2tMYWJlbD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2xhYmVsJywnRGF0ZUxhYmVsJyxSZXF1aXJlbWVudHNGb3JtLFwiVGFzayBOYW1lXCIpO1xuICBUYXNrTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsXCJUYXNrTmFtZVwiKVxuICBsZXQgVGFza05hbWU9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdpbnB1dCcsXCJUYXNrTmFtZVwiLFJlcXVpcmVtZW50c0Zvcm0sbnVsbCxcIlZlbnVzIHN1bW1pdFwiKVxuICAgIFxuICBsZXQgRGVzY3JpcHRpb25MYWJlbD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2xhYmVsJywnRGF0ZUxhYmVsJyxSZXF1aXJlbWVudHNGb3JtLFwiRGVzY3JpcHRpb25cIik7XG4gIERlc2NyaXB0aW9uTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsXCJUYXNrRGVzY3JpcHRpb25cIilcbiAgbGV0IFRhc2tEZXNjcmlwdGlvbj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ3RleHRhcmVhJyxcIlRhc2tEZXNjcmlwdGlvblwiLFJlcXVpcmVtZW50c0Zvcm0sbnVsbCxcIlRha2UgdGhlIG1hcnMgcm92ZXIgYXQgdWJ1bnR1IHN0YXRpb24gXCIpXG4gIFRhc2tEZXNjcmlwdGlvbi5yb3dzPTQ7XG5cbiAgbGV0IGRhdGVMYWJlbD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2xhYmVsJywnRGF0ZUxhYmVsJyxSZXF1aXJlbWVudHNGb3JtLFwiRHVlIERhdGVcIik7XG4gIGRhdGVMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIixcIkRhdGVcIilcblxuICBsZXQgZGF0ZT1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2lucHV0JywnRGF0ZScsUmVxdWlyZW1lbnRzRm9ybSxcIkRhdGVcIixcIkR1ZSBEYXRlXCIpO1xuICBkYXRlLnR5cGU9XCJkYXRlXCI7IFxuXG4gIGxldCBQcmlvcml0eUxhYmVsPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignbGFiZWwnLFwiUHJpb3JpdHlMYWJlbFwiLFJlcXVpcmVtZW50c0Zvcm0sXCJQcmlvcml0eVwiKTtcbiAgUHJpb3JpdHlMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIixcInNlbGVjdERyb3BEb3duXCIpXG4gIGxldCBQcmlvcml0eURyb3Bkb3duPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignc2VsZWN0JyxcInNlbGVjdERyb3BEb3duXCIsUmVxdWlyZW1lbnRzRm9ybSlcbiAgbGV0IE9wdGlvbkhpZ2g9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdvcHRpb24nLFwib3B0aW9uSGlnaFwiLFByaW9yaXR5RHJvcGRvd24sXCJIaWdoXCIpO1xuICBsZXQgT3B0aW9uTWVkaXVtPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignb3B0aW9uJyxcIm9wdGlvbk1lZGl1bVwiLFByaW9yaXR5RHJvcGRvd24sXCJNZWRpdW1cIilcbiAgbGV0IE9wdGlvbkxvdz1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ29wdGlvbicsXCJvcHRpb25Mb3dcIixQcmlvcml0eURyb3Bkb3duLFwiTG93XCIpXG5cbiAgT3B0aW9uSGlnaC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiSGlnaFwiKTtcbiAgT3B0aW9uTWVkaXVtLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJNZWRpdW1cIik7XG4gIE9wdGlvbkxvdy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiTG93XCIpO1xuICBPcHRpb25NZWRpdW0uc2VsZWN0ZWQ9dHJ1ZTtcblxuICBUYXNrTmFtZS5yZXF1aXJlZD10cnVlO1xuICBQcmlvcml0eURyb3Bkb3duLnJlcXVpcmVkPXRydWU7XG4gIGRhdGUucmVxdWlyZWQ9dHJ1ZTtcbiAgVGFza0Rlc2NyaXB0aW9uLnJlcXVpcmVkPXRydWU7XG4gIFxuICBcbmxldCBidXR0b25Ib2xkZXI9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaXYnLFwiYnV0dG9uSG9sZGVyXCIsZGlhbG9nVGFzaylcbmxldCBjYW5jZWxUYXNrPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignYnV0dG9uJyxcImNhbmNlbFRhc2tcIixidXR0b25Ib2xkZXIsXCJDYW5jZWxcIilcbmxldCBjcmVhdGVUYXNrPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignYnV0dG9uJyxcImNyZWF0ZVRhc2tcIixidXR0b25Ib2xkZXIsXCJDcmVhdGVcIilcbmNyZWF0ZVRhc2sudHlwZT1cIlN1Ym1pdFwiO1xuXG5cblxucmV0dXJuIHtkaWFsb2dUYXNrLGNhbmNlbFRhc2ssY3JlYXRlVGFzayxUYXNrTmFtZSxUYXNrRGVzY3JpcHRpb24sUHJpb3JpdHlEcm9wZG93bixkYXRlfVxufSkoKTtcblxuXG5jcmVhdGVUYXNraWNvbi5hZGRUYXNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbiAoZSkge1xuICBjcmVhdGVUYXNrRGlhbG9nLmRpYWxvZ1Rhc2suc2hvd01vZGFsKCk7XG4gIFxufSlcblxuZnVuY3Rpb24gY2xvc2VUYXNrZGlhbG9nKCl7XG5cbmNyZWF0ZVRhc2tEaWFsb2cuZGlhbG9nVGFzay5jbG9zZSgpXG5cblxufVxuXG5jcmVhdGVUYXNrRGlhbG9nLmNhbmNlbFRhc2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uIChlKSB7XG4gIGNsb3NlVGFza2RpYWxvZygpO1xuICBcbn0pXG5cbmZ1bmN0aW9uIGFkZFRhc2soKXtcblxuICBpZihjcmVhdGVUYXNrRGlhbG9nLlRhc2tOYW1lLnZhbHVlPT09XCJcInx8Y3JlYXRlVGFza0RpYWxvZy5UYXNrRGVzY3JpcHRpb24udmFsdWU9PT1cIlwifHxjcmVhdGVUYXNrRGlhbG9nLmRhdGUudmFsdWU9PT1cIlwiKXtcblxuICAgIHJldHVybiBcbiAgfVxubGV0IG5ld1Rhc2s9bmV3IFRhc2tNYW5hZ2VtZW50LmNyZWF0ZVRhc2soY3JlYXRlVGFza0RpYWxvZy5UYXNrTmFtZS52YWx1ZSxjcmVhdGVUYXNrRGlhbG9nLlRhc2tEZXNjcmlwdGlvbi52YWx1ZSxjcmVhdGVUYXNrRGlhbG9nLmRhdGUudmFsdWUsY3JlYXRlVGFza0RpYWxvZy5Qcmlvcml0eURyb3Bkb3duLnZhbHVlKVxuVGFza01hbmFnZW1lbnQuYWRkaW5nVGFzayhuZXdUYXNrKVxuXG5jb25zb2xlLmxvZyhhbGxNYXRlcmlhbHMuYWxsVGFza3MpO1xuY3JlYXRlVGFza0RpYWxvZy5kaWFsb2dUYXNrLmNsb3NlKCk7XG5cblxufVxuXG5jcmVhdGVUYXNrRGlhbG9nLmNyZWF0ZVRhc2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uIChlKSB7XG4gIGFkZFRhc2soKTtcbiAgXG4gIFxufSlcblxuXG5cbmlucHV0Qm94Y3JlYXRlUHJvamVjdHMuY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbihlKSB7XG4gIGNyZWF0ZUJ1dHRvbnNGcm9tQWxsUHJvamVjdHMoKTtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBcbiAgaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5kaWFsb2dCb3guY2xvc2UoKTtcbiAgXG59KVxuXG5mdW5jdGlvbiByZWZyZXNoKCkge1xuICBsZXQgcHJvamVjdHM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3ROYW1lJyk7XG5cbiAgcHJvamVjdHMuZm9yRWFjaChwcm9qZWN0cz0+e1xuICAgIGNvbnNvbGUubG9nKHByb2plY3RzKTtcbiAgICBwcm9qZWN0cy5yZW1vdmUoKVxuXG4gIH0pXG4gIFxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25zRnJvbUFsbFByb2plY3RzKCl7XG5cbiAgcmVmcmVzaCgpO1xuXG4gIGxldCBhcnJheU9mcHJvamVjdHM9YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IGFycmF5T2Zwcm9qZWN0cy5sZW5ndGg7IGkrKykge1xuIGxldCBidXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwicHJvamVjdFwiK2krXCIgXCIsc2lkZWJhci5kaXZQcm9qZWN0c1NlY3Rpb24sXCI+IFwiK2FycmF5T2Zwcm9qZWN0c1tpXS5wcm9qZWN0VGl0bGUpXG4gIGJ1dHRvbi5jbGFzc05hbWU9XCJwcm9qZWN0TmFtZVwiIDtcbn1cblxuXG5cblxuXG59XG5jcmVhdGVCdXR0b25zRnJvbUFsbFByb2plY3RzKCk7XG5mdW5jdGlvbiBjbG9zZUFkZHRhc2soKSB7XG4gIFxuICBcbn1cblxubGV0IGNvbnRlbnRUb2JldXBkYXRlZENoYW5naW5nUHJvamVjdHM9KCgpPT57XG5cbmxldCBjb250ZW50PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignZGl2JywnY29udGVudFRvYmVVcGRhdGVkJyxkb2N1bWVudC5ib2R5KVxuXG5cblxucmV0dXJuIHtjb250ZW50fTtcbn0pKClcblxuXG5cblxuICBmdW5jdGlvbiBjb250ZW50Qm94ZWxlbWVudE1ha2VyKHR5cGUsbmV3SWQscGFyZW50Qm94LFdvcmRzPVwiXCIscGxhY2Vob2xkZXJXb3Jkcz1cIlwiLGNsYXNzVGl0bGU9XCJjb250ZW50VG9SZW1vdmVcIil7XG4gICAgbGV0IGVsZW1lbnQ9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKHR5cGUsbmV3SWQscGFyZW50Qm94LFdvcmRzLHBsYWNlaG9sZGVyV29yZHM9XCJcIilcbiAgICBlbGVtZW50LmNsYXNzTmFtZT1jbGFzc1RpdGxlO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuXG5cblxuXG5cblxuXG5cbmxldCBzdGF0aXN0aWNzPSgoKT0+e1xuXG4gIGxldCBzdGF0aXN0aWNzSG9sZGVyYm94PWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ2RpdicsXCJzdGF0aXN0aWNzSG9sZGVyYm94XCIsY29udGVudFRvYmV1cGRhdGVkQ2hhbmdpbmdQcm9qZWN0cy5jb250ZW50KVxuICBsZXQgY2FyZE5hbWVzPVtcIkN1cnJlbnQgUHJvamVjdHNcIixcIkN1cnJlbnQgVGFza3NcIixcIkNvbXBsZXRlZCBUYXNrc1wiXTtcbiAgbGV0IG5hbWVzT2ZTdGF0cz1bXCJpbmZvcm1hdGlvbk9mUHJvamVjdHNIb2xkZXJcIixcImluZm9tYXRpb25PZlRhc2tzSG9sZGVyXCIsXCJpbmZvcm1hdGlvbk9mY29tcGxldGVkVGFza3NIb2xkZXJcIl1cbiAgbGV0IGNhcmREZXRhaWxzPVtcInByb2plY3ROdW1iZXJcIixcIlRhc2tOdW1iZXJcIixcImNvbXBsZXRlZE51bWJlclwiXVxuICBsZXQgaWNvbnM9W2JyaWVmY2FzZVByb2plY3RzLG1lc3NhZ2VJY29uLGFsbFRhc2tzaWNvbl1cbiAgbGV0IGlkTmFtZXM9W1wibnVtYmVyT2ZQcm9qZWN0c2RpdlwiLFwibnVtYmVyT2ZUYXNrc2RpdlwiLFwiY29tcGxldGVkVGFza3NcIl1cbiAgbGV0IHN0YXRpY3NPZmNhcmQ9W2FsbE1hdGVyaWFscy5hbGxQcm9qZWN0cy5sZW5ndGgsYWxsTWF0ZXJpYWxzLmFsbFRhc2tzLmxlbmd0aCwwXVxuICBsZXQgc3BlY2lmaWNOYW1lZm9yRW50cnk9W1wicHJvamVjdERldGFpbHNcIixcIlRhc2tEZXRhaWxzXCIsXCJjb21wbGV0ZWRUYXNrXCJdO1xuICBsZXQgYmFja2Ryb3BzPVtcInByb2plY3RzQmFja2Ryb3BcIixcInRhc2tzQmFja2Ryb3BcIixcImNvbXBsZXRlZEJhY2tkcm9wXCJdXG4gIFxuZm9yIChsZXQgaSA9IDA7IGkgPCBjYXJkTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgbGV0IGNhcmRESVY9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxpZE5hbWVzW2ldLHN0YXRpc3RpY3NIb2xkZXJib3gpO1xuICBsZXQgaW5mb3JtYXRpb25Ib2xkZXI9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxuYW1lc09mU3RhdHNbaV0sY2FyZERJVik7XG4gIGxldCBpbmZvT2ZDYXJkPWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ3AnLGNhcmREZXRhaWxzW2ldLGluZm9ybWF0aW9uSG9sZGVyLHN0YXRpY3NPZmNhcmRbaV0pO1xuICBsZXQgUHJvamVjdERldGFpbHM9Y29udGVudEJveGVsZW1lbnRNYWtlcigncCcsc3BlY2lmaWNOYW1lZm9yRW50cnlbaV0saW5mb3JtYXRpb25Ib2xkZXIsY2FyZE5hbWVzW2ldKTtcbiAgbGV0IEljb25EaXY9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxcImljb25EaXZcIixjYXJkRElWKTtcbiAgbGV0IGljb25JbWFnZT1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oaWNvbnNbaV0sSWNvbkRpdixcImljb25TdGF0aWNzXCIpO1xuICBsZXQgaWNvbkltYWdlQmFja2Ryb3A9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaXYnLGJhY2tkcm9wc1tpXSxJY29uRGl2KVxufVxuICBcbiAgXG5cbiAgXG4gIFxuIFxuICBcblxufSkoKVxuXG5mdW5jdGlvbiBVcGRhdGVOdW1iZXJPZlByb2plY3RzKCkge1xuICBsZXQgUHJvamVjdE51bWJlcj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdE51bWJlcicpXG4gIFByb2plY3ROdW1iZXIudGV4dENvbnRlbnQ9YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aDtcbiAgXG59Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJhbGxNYXRlcmlhbHMiLCJhbGxQcm9qZWN0cyIsImFsbFRhc2tzIiwiUHJvamVjdE1hbmFnZW1lbnQiLCJGaW5kUHJvamVjdCIsIlByb2plY3ROYW1lIiwicHJvamVjdE5hbWUiLCJwcm9qZWN0TGlzdCIsImNyZWF0ZVByb2plY3QiLCJjb25zdHJ1Y3RvciIsInByb2plY3RUaXRsZSIsImNvbnNvbGUiLCJsb2ciLCJhZGRUb0FsbFByb2plY3RzIiwiTmV3UHJvamVjdCIsIlRhc2tNYW5hZ2VtZW50IiwiY3JlYXRlVGFzayIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkYXRlIiwicHJpb3JpdHkiLCJhZGRpbmdUYXNrIiwibmV3VGFzayIsInByb2plY3QiLCJzcGFjZVRyYXZlbHMiLCJmaW5kaW5nVGFzayIsIlRhc2tOYW1lIiwieCIsImxvY2FscyIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJwcm90b3R5cGUiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJUeXBlRXJyb3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsIk9iamVjdCIsImNhbGwiLCJEYXRlIiwiZ2V0VGltZSIsIndhcm4iLCJzdGFjayIsIk5hTiIsInRvSW50ZWdlciIsImRpcnR5TnVtYmVyIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNOYU4iLCJNYXRoIiwiY2VpbCIsImZsb29yIiwic3RhcnRPZlVUQ0lTT1dlZWsiLCJkaXJ0eURhdGUiLCJkYXkiLCJnZXRVVENEYXkiLCJkaWZmIiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwieWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJzdGFydE9mVVRDV2VlayIsIl9yZWYiLCJfcmVmMiIsIl9yZWYzIiwiX29wdGlvbnMkd2Vla1N0YXJ0c09uIiwiX29wdGlvbnMkbG9jYWxlIiwiX29wdGlvbnMkbG9jYWxlJG9wdGlvIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMiIsIndlZWtTdGFydHNPbiIsImxvY2FsZSIsIlJhbmdlRXJyb3IiLCJnZXRVVENXZWVrWWVhciIsIl9vcHRpb25zJGZpcnN0V2Vla0NvbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsIm91dHB1dCIsImFicyIsInRva2VuIiwic2lnbmVkWWVhciIsIm1vbnRoIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwibnVtYmVyT2ZEaWdpdHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJwb3ciLCJHIiwibG9jYWxpemUiLCJlcmEiLCJ3aWR0aCIsInkiLCJvcmRpbmFsTnVtYmVyIiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicXVhcnRlciIsImNvbnRleHQiLCJxIiwiTSIsIkwiLCJ3Iiwid2VlayIsImZpcnN0V2VlayIsInN0YXJ0T2ZVVENXZWVrWWVhciIsInJvdW5kIiwiZ2V0VVRDV2VlayIsIkkiLCJpc29XZWVrIiwiZm91cnRoT2ZKYW51YXJ5Iiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZ2V0VVRDSVNPV2VlayIsImQiLCJEIiwiZGF5T2ZZZWFyIiwidGltZXN0YW1wIiwic2V0VVRDTW9udGgiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImlzb0RheU9mV2VlayIsImEiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJkYXlQZXJpb2QiLCJ0b0xvd2VyQ2FzZSIsImIiLCJob3VycyIsIkIiLCJoIiwiSCIsIksiLCJtIiwicyIsIlMiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsIk8iLCJmb3JtYXRUaW1lem9uZVNob3J0IiwieiIsInQiLCJvcmlnaW5hbERhdGUiLCJUIiwib2Zmc2V0IiwiZGlydHlEZWxpbWl0ZXIiLCJhYnNPZmZzZXQiLCJtaW51dGVzIiwiZGVsaW1pdGVyIiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJwYXR0ZXJuIiwiZm9ybWF0TG9uZyIsInRpbWVMb25nRm9ybWF0dGVyIiwidGltZSIsInAiLCJQIiwiZGF0ZVRpbWVGb3JtYXQiLCJtYXRjaFJlc3VsdCIsIm1hdGNoIiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsImRhdGVUaW1lIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJ0aHJvd1Byb3RlY3RlZEVycm9yIiwiZm9ybWF0IiwiaW5wdXQiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJkZWZhdWx0V2lkdGgiLCJmb3JtYXRzIiwiZnVsbCIsImxvbmciLCJtZWRpdW0iLCJzaG9ydCIsImZvcm1hdFJlbGF0aXZlTG9jYWxlIiwibGFzdFdlZWsiLCJ5ZXN0ZXJkYXkiLCJ0b2RheSIsInRvbW9ycm93IiwibmV4dFdlZWsiLCJidWlsZExvY2FsaXplRm4iLCJkaXJ0eUluZGV4IiwidmFsdWVzQXJyYXkiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwiX29wdGlvbnMiLCJyZW0xMDAiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsImJ1aWxkTWF0Y2hGbiIsInN0cmluZyIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsInZhbHVlIiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsImtleSIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5IiwicHJlZGljYXRlIiwiZmluZEluZGV4Iiwib2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55IiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwidG9rZW5WYWx1ZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJkaXJ0eUZvcm1hdFN0ciIsIl9yZWY0IiwiX29wdGlvbnMkbG9jYWxlMiIsIl9vcHRpb25zJGxvY2FsZTIkb3B0aSIsIl9yZWY1IiwiX3JlZjYiLCJfcmVmNyIsIl9vcHRpb25zJGxvY2FsZTMiLCJfb3B0aW9ucyRsb2NhbGUzJG9wdGkiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwzIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsNCIsImZvcm1hdFN0ciIsImRlZmF1bHRMb2NhbGUiLCJpc0RhdGUiLCJpc1ZhbGlkIiwidXRjRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJkaXJ0eUFtb3VudCIsImFtb3VudCIsImFkZE1pbGxpc2Vjb25kcyIsInN1Yk1pbGxpc2Vjb25kcyIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJtYXRjaGVkIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwiaW5kZXhPZiIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiZG9tRWxlbWVudE1ha2VyIiwiZG9tRWxlbWVudENyZWF0b3IiLCJ0eXBlIiwibmV3SWQiLCJwYXJlbnRCb3giLCJXb3JkcyIsInBsYWNlaG9sZGVyV29yZHMiLCJuZXdFbGVtZW50IiwidGV4dENvbnRlbnQiLCJwbGFjZWhvbGRlciIsIkltYWdlTG9hZHRvRE9tIiwiSWNvbiIsImlkTmFtZSIsIm15SWNvbiIsIkltYWdlIiwic3JjIiwic2lkZWJhciIsInNpZGVyYm94IiwiYm9keSIsImFwcFRpdGxlSG9sZGVyIiwic2VjdGlvbiIsImhvbWVCdXR0b24iLCJEYXRlc0FycmFuZ2VkQnV0dG9uIiwiUHJvamVjdHNCdXR0b24iLCJkaXZQcm9qZWN0c1NlY3Rpb24iLCJjcmVhdGVwcm9qZWN0c0J1dHRvbiIsImNyZWF0ZVRhc2tpY29uIiwidG9wQm94IiwiYWRkVGFzayIsImlucHV0Qm94Y3JlYXRlUHJvamVjdHMiLCJkaWFsb2dCb3giLCJtZXNzYWdlQm94ZGl2IiwicHJvamVjdE5hbWVpbnB1dCIsImJ1dHRvbnNkaXYiLCJjYW5jZWxCdXR0b24iLCJkb25lQnV0dG9uIiwiYmFsYW5jaW5ncHJvamVjdHMiLCJuZXdQcm9qZWN0IiwiZnJvbURvbXRvQWxscHJvamVjdHMiLCJjcmVhdGVCdXR0b25zRnJvbUFsbFByb2plY3RzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInNob3dNb2RhbCIsInByZXZlbnREZWZhdWx0IiwiY2xvc2UiLCJjcmVhdGVUYXNrRGlhbG9nIiwiZGlhbG9nVGFzayIsIlJlcXVpcmVtZW50c0Zvcm0iLCJUYXNrRGVzY3JpcHRpb24iLCJyb3dzIiwiUHJpb3JpdHlEcm9wZG93biIsIk9wdGlvbkhpZ2giLCJPcHRpb25NZWRpdW0iLCJPcHRpb25Mb3ciLCJzZWxlY3RlZCIsImJ1dHRvbkhvbGRlciIsImNhbmNlbFRhc2siLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInByb2plY3RzIiwiYXJyYXlPZnByb2plY3RzIiwiY2xhc3NOYW1lIiwiY29udGVudFRvYmV1cGRhdGVkQ2hhbmdpbmdQcm9qZWN0cyIsImNvbnRlbnRCb3hlbGVtZW50TWFrZXIiLCJjbGFzc1RpdGxlIiwic3RhdGlzdGljc0hvbGRlcmJveCIsImNhcmROYW1lcyIsIm5hbWVzT2ZTdGF0cyIsImNhcmREZXRhaWxzIiwiaWNvbnMiLCJpZE5hbWVzIiwic3RhdGljc09mY2FyZCIsInNwZWNpZmljTmFtZWZvckVudHJ5IiwiYmFja2Ryb3BzIiwiY2FyZERJViIsImluZm9ybWF0aW9uSG9sZGVyIiwiSWNvbkRpdiJdLCJzb3VyY2VSb290IjoiIn0=