"use strict";(self.webpackChunktaskmanagementsystem=self.webpackChunktaskmanagementsystem||[]).push([[92],{426:(n,e,t)=>{t.d(e,{Z:()=>A});var o=t(537),r=t.n(o),a=t(645),i=t.n(a),l=t(667),s=t.n(l),c=new URL(t(250),t.b),d=i()(r());d.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap);"]);var u=s()(c);d.push([n.id,`\n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(${u});\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 150px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#3754DB;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    display: flex;\n    flex-direction: column;\n   \n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n#TaskBox{\n  margin-top:12px;\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(3,110px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:110px;\n  flex-grow: 1;\n  padding: 0px 37px;\n  gap: 12px;\n  overflow: auto;\n}\n#TaskDiv{\n\n  background-color:#161a23 ;\n padding: 12px;\n display: flex;\n flex-direction: column;\n gap: 4px;\n border-radius: 12px;\n\n}\n\n#daysRemaining{\n\n  font-size: 12px;\n  color: #666666;\n  letter-spacing: 1px;\n\n\n}\n\n#TaskTitle{\n\nfont-weight: bold;\n\n\n}\n\n#explainationTask{\n\nfont-style: italic;\nfont-size: 14px;\nfont-weight: 100;\ncolor: #666666;\n\n\n}\n\n#buttonsManipulationDiv{\n\ndisplay: flex;\ngap:6px;\njustify-content: flex-end;\n\n}\n#buttonsManipulationDiv button{\n\n  width: 71px;\n  height: 27px;\n  text-decoration: none;\n\n}\n\n#buttonsManipulationDiv button:first-child{\n\n  background-color: transparent;\n  color: #F39C12;\n  border: solid 2px #F39C12;\n  border-radius: 34px;\n  text-decoration: none;\n\n\n}\n#buttonsManipulationDiv button:nth-child(2){\n\n  background-color:#3754DB;\n  color: white;\n  border: none;\n  outline: none;\n  text-decoration: none;\n\n\n\n}\n#buttonsManipulationDiv button:nth-child(3){\nbackground-color: rgb(102, 33, 33);\ncolor: white;\nborder: none;\noutline: none;\n\n}\n\ninput[type="checkbox"]{\n\n  width: 28px;\n  height: 28px;\n\n  /* background:  */\n  appearance: none;\n  background-color: none;\n  border: 2px #ced4da solid;\n  border-radius: 8px;\n \n}\ninput[type="checkbox"]:checked{\n\n  background-color: #27AE60;\n  border: none;\n  \n\n\n}\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["\n  @import url('https://fonts.googleapis.com/css2?family=Indie+Flower&family=Quicksand:wght@500&family=Satisfy&display=swap');\n\n  \n  *{\n\n    padding: 0px;\n    margin: 0px;\n    box-sizing: border-box;\n    font-family: 'Quicksand', sans-serif;\n\n    letter-spacing: 0.8px;\n\n    \n\n\n\n}\nbody{\nbackground-color: #0f0e13;\n\ndisplay: grid;\ngrid-template-columns: 250px repeat(4,1fr);\ngrid-template-rows:repeat(7,1fr) ;\nheight: 100vh;\ncolor: white;\n\n\n}\n\n#sidebox{\n\n  \n    grid-column: 1/1;\n    grid-row: 1/-1;\n    background-color: #161a23;\n  \n \n\n\n\n}\n\n#appTitleHolder{\n\n\ndisplay: flex;\n\nalign-items: center;\n\nbackground-color: #161a23;\n\nborder-bottom: solid 0.5px  #40485a;\n\n\npadding: 22px;\nheight: 100px;\n\n\n\n\n}\n#appTitle{\n\nfont-size: 18px;\nfont-weight: bold;\n\n}\n#appLogo{\n  \n    background: url(./icons/linuxHead.png);\n    width: 60px;\n    height: 60px;\n}\n\n#sectionTitle{\n\n    font-size: 12px;\n    margin:  12px 0px 0px 39px;\n   \n    \n\n\n}\n#section{\n\n    color: #484b52;\n\n    display: flex;\n    flex-direction: column;\n   \n    gap: 12px;\n    margin-top: 12px;\n\n}\n#section>button{\n\n    background:transparent ;\n    color: #9d9fa5;\n    border: none;\n    width: 150px;\n    display: flex;\n    height: 40px;\n    padding: 12px;\n    gap: 14px;\n    font-size: 15.5px;\n    padding-left: 26px;\n    text-align: right;\n    align-items: center;\n   \n   \n}\n\n#section>button:last-child{\n\nbackground-color:#3754DB;\nborder-radius: 12px;\nheight: 50px;\ncolor:white;\nwidth: 200px;\n\nmargin-left: 21px;\n\n}\n#section>button:hover{\n\n    background-color: #2D2F39;\n    width: 250px;\n\n\n}    \n\n#section>button:last-child:hover{\n\n    background-color:#3754DB;\n    color: white;\n    border-radius: 0px;\n    width: 200px;\n    }\n#topBoximagegirl,#musicboy,#boyWithpapers{\n\n\nheight: 100px;\n\n\n\n\n\n}\n#topBoximagegirl{\n\n    margin-left:111px ;\n}\n\n\n#topBox{\n\ngrid-column-start: 2;\ngrid-column-end: 6;\nbackground-color: #3754DB;\ndisplay: flex;\ngap:10px;\nheight:100px ;\n\n\n\n\n}\n#topText{\n  \n  font-family: 'Satisfy', cursive;\nalign-self: center;\nfont-size: 50px;\nfont-weight: bold;\nmargin: 12px;\n}\n#addTask{\n\nwidth: 70px;\nheight: 70px;\nposition: absolute;\ntop:440px;\nleft:1178px;\nbackground-color: #3754DB;\n\nborder: none;\nborder-radius: 100%;\n\n\n}\n\n#addtaskicon{\n\n    fill:white;\n   \n\n\n\n}\n\n#addTask:hover{\n    background-color: #ff5678;\n\n\n}\n#dialogCreateProject{\n\n    border: none;\n    background-color: #262c36;\n    border-radius: 10px;\n    width: 251px;\npadding: 20px;\nmargin-top: 379px;\n\n}\n#messageBoxdiv{\n\n    display: flex;\n\n    flex-direction: column;\n    padding: 15px;\n    gap:6px;\n    \n   \n}\n\n#messageBoxdiv button{\n\n    width: 78px;\n    height: 26px;\nborder: none;\noutline:none;\ncolor:white;\n\n}\n\n#messageBoxdiv button:first-child{\n\n    background-color: #f53b30;\n}\n\n#messageBoxdiv button:last-child{\n\n    background-color: #2aa31f;\n}\n\n#messageBoxdiv input{\n\n    padding: 4px 12px;\n    border-radius:4px ;\n    border: none;\n    outline: none;\n    background-color: #E3E3E3;\n\n}\n#messageBoxdiv input:active{\n    border: none;\n    outline: none;\n}\n#messageBoxdiv div{\n\n    display: flex;\n    gap:8px;\n\n\n}\n\n\n  \ntextarea {\n    resize: none;\n  }\n #dialogTask{\n\n    position: relative;\n    top:27%;\n    left:40%;\n    border: none;\n    outline:none;\n    width: 291px;\n    height: 355px;\n    padding: 13px;\n   border-radius: 12px;\n   background-color: #262c36;\n   color:white\n\n }\n #dialogTask input, #dialogTask textarea{\n\n    background-color: #b8c0cc;\n } \n\n  dialog::backdrop {\n    backdrop-filter: blur(5px);\n  }\n  #buttonHolder{\n\ndisplay: flex;\ngap: 8px;\njustify-content: end;\nheight: 30px;\npadding: 0px 10px;\n  }\n\n  #buttonHolder button{\n\n    width: 130px;\n    border: none;\n    outline:none;\n    color: white;\n\n  }\n\n  #buttonHolder button:last-child{\n\n    background-color: #2aa31f;\n    \n\n  }\n\n  #buttonHolder button:first-child{\n\n    background-color: #F53b30;\n\n  }\n\n  #buttonHolder button:hover,#messageBoxdiv button:hover{\n\n\n    background-color: transparent;\n    border: 2px solid #b8c0cc;\n\n\n  }\n\n  \n\n  #projectsSection{\n\n    display: flex;\n    flex-direction: column;\n  \n    \n    margin-top:-14px;\n    margin-left: 20%;\n    \n\n\n  }\n  #projectsSection button{\n\n    background-color: transparent;\n    border: none;\n    width: 150px;\n    height: 30px;\n    color:#828489;\n   font-weight: bold;\n   font-style: italic;\n    border-radius: 7px;\n    font-size: 14px;\n    text-align: left;\n\n  }\n  #projectsSection button:hover{\n    background-color: #2d2f39;\n\n\n\n  }\n  #contentTobeUpdated{\n\n    /* border: solid 3px red; */\n   \n    grid-column: 2/-1;\n    grid-row: 2/-1;\n    display: flex;\n    flex-direction: column;\n   \n\n\n\n  }\n  #statisticsHolderbox{\n\n    \n    height: 100px;\n    margin: 20px 0px 0px 10px;\n    display: flex;\n    gap: 76px;\n    justify-content: center;\n\n  }\n\n  #informationOfProjectsHolder{\n\n    display: flex;\n    flex-direction: column;\n\n\n\n\n  }\n  #informationOfProjectsHolder p:first-child,#TaskNumber,#completedNumber{\n\n    font-size: 34px;\n\n\n  }\n  #statisticsHolderbox>div{\n\ndisplay: flex;\n\nwidth: 300px;\nheight: inherit;\npadding: 15px;\nborder-radius: 8px;\njustify-content: space-evenly;\nbackground-color: #161a23;\n\n\n }\n #projectsBackdrop,#tasksBackdrop,#completedBackdrop{\n\nopacity: 15%;\nborder-radius:100% ;\nwidth: 60px;\nheight: 60px;\n\n\n\n\n\n\n }\n #projectsBackdrop{\n  background-color: #a803e4;\n\n\n }\n #tasksBackdrop{\n  background-color:#F39C12 ;\n }\n\n #completedBackdrop{\n\n  background-color: #27AE60;\n\n }\n \n #iconDiv{\n\ndisplay: flex;\njustify-content: center;\n\n\n }\n #iconDiv img{\n  width:32px;\n  height:30px; \n  position: relative;\nleft: 46px;\ntop:15px\n }\n\n#TaskBox{\n  margin-top:12px;\n  display: grid;\n  grid-template-columns: repeat(2,1fr);\n  grid-template-rows: repeat(3,110px);\n  grid-auto-columns: 1fr;\n  grid-auto-rows:110px;\n  flex-grow: 1;\n  padding: 0px 37px;\n  gap: 12px;\n  overflow: auto;\n}\n#TaskDiv{\n\n  background-color:#161a23 ;\n padding: 12px;\n display: flex;\n flex-direction: column;\n gap: 4px;\n border-radius: 12px;\n\n}\n\n#daysRemaining{\n\n  font-size: 12px;\n  color: #666666;\n  letter-spacing: 1px;\n\n\n}\n\n#TaskTitle{\n\nfont-weight: bold;\n\n\n}\n\n#explainationTask{\n\nfont-style: italic;\nfont-size: 14px;\nfont-weight: 100;\ncolor: #666666;\n\n\n}\n\n#buttonsManipulationDiv{\n\ndisplay: flex;\ngap:6px;\njustify-content: flex-end;\n\n}\n#buttonsManipulationDiv button{\n\n  width: 71px;\n  height: 27px;\n  text-decoration: none;\n\n}\n\n#buttonsManipulationDiv button:first-child{\n\n  background-color: transparent;\n  color: #F39C12;\n  border: solid 2px #F39C12;\n  border-radius: 34px;\n  text-decoration: none;\n\n\n}\n#buttonsManipulationDiv button:nth-child(2){\n\n  background-color:#3754DB;\n  color: white;\n  border: none;\n  outline: none;\n  text-decoration: none;\n\n\n\n}\n#buttonsManipulationDiv button:nth-child(3){\nbackground-color: rgb(102, 33, 33);\ncolor: white;\nborder: none;\noutline: none;\n\n}\n\ninput[type=\"checkbox\"]{\n\n  width: 28px;\n  height: 28px;\n\n  /* background:  */\n  appearance: none;\n  background-color: none;\n  border: 2px #ced4da solid;\n  border-radius: 8px;\n \n}\ninput[type=\"checkbox\"]:checked{\n\n  background-color: #27AE60;\n  border: none;\n  \n\n\n}\n"],sourceRoot:""}]);const A=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(i[s]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],l=0;l<n.length;l++){var s=n[l],c=o.base?s[0]+o.base:s[0],d=a[c]||0,u="".concat(c," ").concat(d);a[c]=d+1;var A=t(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var m=r(p,o);o.byIndex=l,e.splice(l,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var l=t(a[i]);e[l].references--}for(var s=o(n,r),c=0;c<a.length;c++){var d=t(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},584:(n,e,t)=>{t.d(e,{Wl:()=>_n,u:()=>Sn,nr:()=>Rn,R2:()=>Ln,s$:()=>Xn,$t:()=>$n,kQ:()=>Nn});var o=t(379),r=t.n(o),a=t(795),i=t.n(a),l=t(569),s=t.n(l),c=t(565),d=t.n(c),u=t(216),A=t.n(u),p=t(589),m=t.n(p),g=t(426),f={};f.styleTagTransform=m(),f.setAttributes=d(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=A(),r()(g.Z,f),g.Z&&g.Z.locals&&g.Z.locals;let h={allProjects:[],allTasks:[]},b=class{constructor(n){this.projectTitle=n,this.projectList=[]}},x=function(n){h.allProjects[h.allProjects.length]=n},C=(()=>{let n={position:0};return{createTask:class{constructor(n,e,t,o,r="undone"){this.title=n,this.description=e,this.date=t,this.priority=o,this.status=r}},findingTask:function(n){for(let e=0;e<h.allProjects.length;e++)for(let t=0;t<h.allProjects[e].projectList.length;t++)if(n===h.allProjects[e].projectList[t].title)return console.log("found",t,e,h.allProjects[e].projectList[t].title),{i:e,x:t}},addTasktoProject:function(e,t=h.allProjects[n.position].projectList){t[t.length]=e},projectPos:n,addingToallTasks:function(){h.allTasks.splice(0,h.allTasks.length);for(let n=0;n<h.allProjects.length;n++)for(let e=0;e<h.allProjects[n].projectList.length;e++)h.allTasks[h.allTasks.length]=h.allProjects[n].projectList[e]}}})(),v=new b("unknown");x(v);let B=new C.createTask("Make chips","fly emirates","2020-3-20","medium");C.addTasktoProject(B);let y=new b("space trip");x(y),C.findingTask("Make chips");class k{constructor(n,e){this.projectButton=n.addEventListener("click",(function(t){var o;Ln(),o=e,console.log(o),C.projectPos.position=o,Nn.returnAllbuttonstlyesTodefault(),Nn.makingTheButtonGlow(n),Rn.refreshTaskBox(),Xn.createTaskBoxforProject(),Xn.navigatingTheProjectAndGivingTasks(e),_n.manageCheckbox()}))}}var w=t(250);const E=t.p+"94a91679767b1d7d2034.svg",T=t.p+"04e1a7df197a2de1e626.svg",j=t.p+"746bdb99c1ae84513f9b.svg",I=t.p+"03b02e98500c669ef571.svg",D=t.p+"819817edadaa5c76bccf.svg",P=t.p+"1213764b91350a02bb2c.svg",Y=t.p+"2ac2511792bf6add08e5.svg",M=t.p+"0794abbf4bbe4158f856.svg",S=t.p+"cbf897ee25afe1cbd2d5.svg";function W(n){return W="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},W(n)}function N(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function U(n){N(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===W(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function L(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function O(n){N(1,arguments);var e=U(n),t=e.getUTCDay(),o=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function H(n){N(1,arguments);var e=U(n),t=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(t+1,0,4),o.setUTCHours(0,0,0,0);var r=O(o),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=O(a);return e.getTime()>=r.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}var q={};function z(){return q}function G(n,e){var t,o,r,a,i,l,s,c;N(1,arguments);var d=z(),u=L(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:d.weekStartsOn)&&void 0!==o?o:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=U(n),p=A.getUTCDay(),m=(p<u?7:0)+p-u;return A.setUTCDate(A.getUTCDate()-m),A.setUTCHours(0,0,0,0),A}function F(n,e){var t,o,r,a,i,l,s,c;N(1,arguments);var d=U(n),u=d.getUTCFullYear(),A=z(),p=L(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:A.firstWeekContainsDate)&&void 0!==o?o:null===(s=A.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(u+1,0,p),m.setUTCHours(0,0,0,0);var g=G(m,e),f=new Date(0);f.setUTCFullYear(u,0,p),f.setUTCHours(0,0,0,0);var h=G(f,e);return d.getTime()>=g.getTime()?u+1:d.getTime()>=h.getTime()?u:u-1}function Z(n,e){for(var t=n<0?"-":"",o=Math.abs(n).toString();o.length<e;)o="0"+o;return t+o}const Q=function(n,e){var t=n.getUTCFullYear(),o=t>0?t:1-t;return Z("yy"===e?o%100:o,e.length)},R=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):Z(t+1,2)},X=function(n,e){return Z(n.getUTCDate(),e.length)},J=function(n,e){return Z(n.getUTCHours()%12||12,e.length)},K=function(n,e){return Z(n.getUTCHours(),e.length)},_=function(n,e){return Z(n.getUTCMinutes(),e.length)},$=function(n,e){return Z(n.getUTCSeconds(),e.length)},V=function(n,e){var t=e.length,o=n.getUTCMilliseconds();return Z(Math.floor(o*Math.pow(10,t-3)),e.length)};var nn={G:function(n,e,t){var o=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var o=n.getUTCFullYear(),r=o>0?o:1-o;return t.ordinalNumber(r,{unit:"year"})}return Q(n,e)},Y:function(n,e,t,o){var r=F(n,o),a=r>0?r:1-r;return"YY"===e?Z(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):Z(a,e.length)},R:function(n,e){return Z(H(n),e.length)},u:function(n,e){return Z(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return Z(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,e,t){var o=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return Z(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,e,t){var o=n.getUTCMonth();switch(e){case"M":case"MM":return R(n,e);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(n,e,t){var o=n.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return Z(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(n,e,t,o){var r=function(n,e){N(1,arguments);var t=U(n),o=G(t,e).getTime()-function(n,e){var t,o,r,a,i,l,s,c;N(1,arguments);var d=z(),u=L(null!==(t=null!==(o=null!==(r=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:d.firstWeekContainsDate)&&void 0!==o?o:null===(s=d.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),A=F(n,e),p=new Date(0);return p.setUTCFullYear(A,0,u),p.setUTCHours(0,0,0,0),G(p,e)}(t,e).getTime();return Math.round(o/6048e5)+1}(n,o);return"wo"===e?t.ordinalNumber(r,{unit:"week"}):Z(r,e.length)},I:function(n,e,t){var o=function(n){N(1,arguments);var e=U(n),t=O(e).getTime()-function(n){N(1,arguments);var e=H(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),O(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(o,{unit:"week"}):Z(o,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):X(n,e)},D:function(n,e,t){var o=function(n){N(1,arguments);var e=U(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=t-e.getTime();return Math.floor(o/864e5)+1}(n);return"Do"===e?t.ordinalNumber(o,{unit:"dayOfYear"}):Z(o,e.length)},E:function(n,e,t){var o=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return Z(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,o){var r=n.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return Z(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){var o=n.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return Z(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(n,e,t){var o=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,e,t){var o,r=n.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(n,e,t){var o,r=n.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var o=n.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return J(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):K(n,e)},K:function(n,e,t){var o=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(o,{unit:"hour"}):Z(o,e.length)},k:function(n,e,t){var o=n.getUTCHours();return 0===o&&(o=24),"ko"===e?t.ordinalNumber(o,{unit:"hour"}):Z(o,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):_(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):$(n,e)},S:function(n,e){return V(n,e)},X:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return tn(r);case"XXXX":case"XX":return on(r);default:return on(r,":")}},x:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"x":return tn(r);case"xxxx":case"xx":return on(r);default:return on(r,":")}},O:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+en(r,":");default:return"GMT"+on(r,":")}},z:function(n,e,t,o){var r=(o._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+en(r,":");default:return"GMT"+on(r,":")}},t:function(n,e,t,o){var r=o._originalDate||n;return Z(Math.floor(r.getTime()/1e3),e.length)},T:function(n,e,t,o){return Z((o._originalDate||n).getTime(),e.length)}};function en(n,e){var t=n>0?"-":"+",o=Math.abs(n),r=Math.floor(o/60),a=o%60;if(0===a)return t+String(r);var i=e||"";return t+String(r)+i+Z(a,2)}function tn(n,e){return n%60==0?(n>0?"-":"+")+Z(Math.abs(n)/60,2):on(n,e)}function on(n,e){var t=e||"",o=n>0?"-":"+",r=Math.abs(n);return o+Z(Math.floor(r/60),2)+t+Z(r%60,2)}const rn=nn;var an=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},ln=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const sn={p:ln,P:function(n,e){var t,o=n.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return an(n,e);switch(r){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",an(r,e)).replace("{{time}}",ln(a,e))}};var cn=["D","DD"],dn=["YY","YYYY"];function un(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var An={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function pn(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const mn={date:pn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:pn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:pn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var gn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function fn(n){return function(e,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var r=n.defaultFormattingWidth||n.defaultWidth,a=null!=t&&t.width?String(t.width):r;o=n.formattingValues[a]||n.formattingValues[r]}else{var i=n.defaultWidth,l=null!=t&&t.width?String(t.width):n.defaultWidth;o=n.values[l]||n.values[i]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const hn={ordinalNumber:function(n,e){var t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:fn({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:fn({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:fn({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:fn({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:fn({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function bn(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],a=e.match(r);if(!a)return null;var i,l=a[0],s=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(l))return t}(s):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(l))return t}(s);return i=n.valueCallback?n.valueCallback(c):c,{value:i=t.valueCallback?t.valueCallback(i):i,rest:e.slice(l.length)}}}var xn,Cn={ordinalNumber:(xn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(xn.matchPattern);if(!t)return null;var o=t[0],r=n.match(xn.parsePattern);if(!r)return null;var a=xn.valueCallback?xn.valueCallback(r[0]):r[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:n.slice(o.length)}}),era:bn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:bn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:bn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:bn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:bn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const vn={code:"en-US",formatDistance:function(n,e,t){var o,r=An[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:mn,formatRelative:function(n,e,t,o){return gn[n]},localize:hn,match:Cn,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Bn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,yn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,kn=/^'([^]*?)'?$/,wn=/''/g,En=/[a-zA-Z]/;function Tn(n,e,t){var o,r,a,i,l,s,c,d,u,A,p,m,g,f,h,b,x,C;N(2,arguments);var v=String(e),B=z(),y=null!==(o=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:B.locale)&&void 0!==o?o:vn,k=L(null!==(a=null!==(i=null!==(l=null!==(s=null==t?void 0:t.firstWeekContainsDate)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==l?l:B.firstWeekContainsDate)&&void 0!==i?i:null===(u=B.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var w=L(null!==(p=null!==(m=null!==(g=null!==(f=null==t?void 0:t.weekStartsOn)&&void 0!==f?f:null==t||null===(h=t.locale)||void 0===h||null===(b=h.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==g?g:B.weekStartsOn)&&void 0!==m?m:null===(x=B.locale)||void 0===x||null===(C=x.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==p?p:0);if(!(w>=0&&w<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!y.localize)throw new RangeError("locale must contain localize property");if(!y.formatLong)throw new RangeError("locale must contain formatLong property");var E=U(n);if(!function(n){if(N(1,arguments),!function(n){return N(1,arguments),n instanceof Date||"object"===W(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=U(n);return!isNaN(Number(e))}(E))throw new RangeError("Invalid time value");var T=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(E),j=function(n,e){return N(2,arguments),function(n,e){N(2,arguments);var t=U(n).getTime(),o=L(e);return new Date(t+o)}(n,-L(e))}(E,T),I={firstWeekContainsDate:k,weekStartsOn:w,locale:y,_originalDate:E};return v.match(yn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,sn[e])(n,y.formatLong):n})).join("").match(Bn).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(kn))?a[1].replace(wn,"'"):r;var l,s=rn[i];if(s)return null!=t&&t.useAdditionalWeekYearTokens||(l=o,-1===dn.indexOf(l))||un(o,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==cn.indexOf(n)}(o)||un(o,e,String(n)),s(j,o,y.localize,I);if(i.match(En))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}const jn=t.p+"819e1e40c3fcf14e1116.svg",In=t.p+"eabb3514fa0376368ae9.svg";class Dn{constructor(n,e){this.TaskButton=n.addEventListener("change",(function(n){if(this.checked)if("Home"===Sn.section){let n=C.findingTask(h.allTasks[e].title);h.allProjects[n.i].projectList[n.x].status="done",console.log(h.allProjects[n.i].projectList[n.x]),$n.strikeoutWords(e)}else console.log(h.allProjects),h.allProjects[C.projectPos.position].projectList[e].status="done",console.log(h.allProjects[C.projectPos.position].projectList[e].status),$n.strikeoutWords(e);else $n.strikeoutWords(e,"none"),h.allProjects[C.projectPos.position].projectList[e].status="undone"}))}}let Pn=new class{domElementCreator(n,e,t,o="",r=""){let a=document.createElement(n);return a.id=e,a.textContent=o,a.placeholder=r,t.appendChild(a),a}ImageLoadtoDOm(n,e,t){let o=new Image;return o.src=n,o.id=t,e.appendChild(o),o}},Yn=(()=>{let n=Pn.domElementCreator("div","sidebox",document.body),e=Pn.domElementCreator("div","appTitleHolder",n),t=(Pn.ImageLoadtoDOm(w,e,"appLogo"),Pn.domElementCreator("p","appTitle",e,"Ubuntu Tasks"),Pn.domElementCreator("div","section",n)),o=Pn.domElementCreator("button","homeDiv",t),r=(Pn.ImageLoadtoDOm(E,o,"homeicon"),Pn.domElementCreator("p","hometext",o,"Home"),Pn.domElementCreator("button","calender",t)),a=(Pn.ImageLoadtoDOm(j,r,"Datesicon"),Pn.domElementCreator("p","hometext",r,"Calender"),Pn.domElementCreator("button","Projects",t)),i=(Pn.ImageLoadtoDOm(D,a,"projectIcon"),Pn.domElementCreator("p","ProjectText",a,"Projects"),Pn.domElementCreator("div","projectsSection",t)),l=Pn.domElementCreator("button","createprojects",t);return Pn.ImageLoadtoDOm(I,l,"createprojectsicon"),Pn.domElementCreator("p","projectText",l,"Create Projects"),l.title="Create Project",{createprojectsButton:l,siderbox:n,divProjectsSection:i}})(),Mn=((()=>{let n=Pn.domElementCreator("div","topBox",document.body);Pn.domElementCreator("p","topText",n,`Enjoy your ${Tn(new Date,"EEEE")}`),Pn.ImageLoadtoDOm(P,n,"topBoximagegirl"),Pn.ImageLoadtoDOm(Y,n,"musicboy"),Pn.ImageLoadtoDOm(S,n,"boyWithpapers")})(),(()=>{let n=Pn.domElementCreator("button","addTask",document.body);return n.title="Create new task",Pn.ImageLoadtoDOm(M,n,"addtaskicon"),{addTask:n}})()),Sn={section:"Home"},Wn=(()=>{let n=Pn.domElementCreator("dialog","dialogCreateProject",Yn.siderbox),e=Pn.domElementCreator("form","messageBoxdiv",n);e.setAttribute("method","dialog"),Pn.domElementCreator("label","projectName",e).setAttribute("for","projectNameinput");let t=Pn.domElementCreator("input","projectNameinput",e);t.placeholder="Go to the Moon";let o=Pn.domElementCreator("div","buttondiv",e);return{dialogBox:n,cancelButton:Pn.domElementCreator("button","cancelButton",o,"Cancel"),doneButton:Pn.domElementCreator("button","doneButton",o,"Create"),projectNameinput:t}})();Yn.createprojectsButton.addEventListener("click",(function(n){Wn.dialogBox.showModal()})),Wn.doneButton.addEventListener("click",(function(n){!function(){if(""===Wn.projectNameinput.value)return;let n=new b(Wn.projectNameinput.value);x(n)}(),Hn(),Fn(),Qn(),n.preventDefault(),Wn.dialogBox.close()}));let Nn={returnAllbuttonstlyesTodefault:function(){document.querySelectorAll("#project").forEach((n=>{n.style.setProperty("background-color","transparent"),n.style.setProperty("color","#828489"),n.style.setProperty("text-align","left")}))},makingTheButtonGlow:function(n){n.style.setProperty("color","white"),n.style.setProperty("background-color","#F39C12"),n.style.setProperty("text-align","center")}},Un=(()=>{let n=Pn.domElementCreator("dialog","dialogTask",document.body),e=Pn.domElementCreator("form","messageBoxdiv",n);Pn.domElementCreator("label","DateLabel",e,"Task Name").setAttribute("for","TaskName");let t=Pn.domElementCreator("input","TaskName",e,null,"Venus summit");Pn.domElementCreator("label","DateLabel",e,"Description").setAttribute("for","TaskDescription");let o=Pn.domElementCreator("textarea","TaskDescription",e,null,"Take the mars rover at ubuntu station ");o.rows=4,o.setAttribute("maxlength",45),Pn.domElementCreator("label","DateLabel",e,"Due Date").setAttribute("for","Date");let r=Pn.domElementCreator("input","Date",e,"Date","Due Date");r.type="date",Pn.domElementCreator("label","PriorityLabel",e,"Priority").setAttribute("for","selectDropDown");let a=Pn.domElementCreator("select","selectDropDown",e),i=Pn.domElementCreator("option","optionHigh",a,"High"),l=Pn.domElementCreator("option","optionMedium",a,"Medium"),s=Pn.domElementCreator("option","optionLow",a,"Low");i.setAttribute("value","High"),l.setAttribute("value","Medium"),s.setAttribute("value","Low"),l.selected=!0,t.required=!0,a.required=!0,r.required=!0,o.required=!0;let c=Pn.domElementCreator("div","buttonHolder",n),d=Pn.domElementCreator("button","cancelTask",c,"Cancel"),u=Pn.domElementCreator("button","createTask",c,"Create");return u.type="Submit",{dialogTask:n,cancelTask:d,createTask:u,TaskName:t,TaskDescription:o,PriorityDropdown:a,date:r}})();function Ln(){Sn.section="notHome"}function On(){"Home"===Sn.section&&(console.log("we ar in",Sn.section),Kn())}function Hn(){document.querySelectorAll(".projectName").forEach((n=>{console.log(n),n.remove()}));let n=h.allProjects;for(let e=0;e<n.length;e++){let t=Pn.domElementCreator("button","project",Yn.divProjectsSection,"> "+n[e].projectTitle);e===C.projectPos.position&&Nn.makingTheButtonGlow(t),t.className="projectName"}}Mn.addTask.addEventListener("click",(function(n){Un.dialogTask.showModal()})),Un.cancelTask.addEventListener("click",(function(n){Un.dialogTask.close(),n.preventDefault()})),Un.createTask.addEventListener("click",(function(n){!function(){if(""===Un.TaskName.value||""===Un.TaskDescription.value||""===Un.date.value)return;let n=new C.createTask(Un.TaskName.value,Un.TaskDescription.value,Un.date.value,Un.PriorityDropdown.value);C.addTasktoProject(n),C.addingToallTasks(),console.log(h.allTasks),Un.dialogTask.close()}(),Zn.placingTasks(),Zn.updateAlltasks(),On(),_n.manageCheckbox()})),Wn.cancelButton.addEventListener("click",(function(n){Hn(),n.preventDefault(),Wn.dialogBox.close()})),Hn();let qn={content:Pn.domElementCreator("div","contentTobeUpdated",document.body)};function zn(n,e,t,o="",r="",a="contentToRemove"){let i=Pn.domElementCreator(n,e,t,o,"");return i.className=a,i}let Gn=(()=>{function n(){let n=zn("div","statisticsHolderbox",qn.content),e=["Current Projects","Current Tasks","Completed Tasks"],t=["informationOfProjectsHolder","infomationOfTasksHolder","informationOfcompletedTasksHolder"],o=["projectNumber","TaskNumber","completedNumber"],r=[jn,In,T],a=["numberOfProjectsdiv","numberOfTasksdiv","completedTasks"],i=[h.allProjects.length,h.allTasks.length,0],l=["projectDetails","TaskDetails","completedTask"],s=["projectsBackdrop","tasksBackdrop","completedBackdrop"];for(let c=0;c<e.length;c++){let d=zn("div",a[c],n),u=zn("div",t[c],d),A=(zn("p",o[c],u,i[c]),zn("p",l[c],u,e[c]),zn("div","iconDiv",d));Pn.ImageLoadtoDOm(r[c],A,"iconStatics"),Pn.domElementCreator("div",s[c],A)}}return n(),{makeStatistics:n}})();function Fn(){"Home"===Sn.section&&(document.querySelector("#projectNumber").textContent=h.allProjects.length)}let Zn=(()=>{let n=({title:n,description:e,date:t,priority:o,status:r},a=document.querySelector("#TaskBox"))=>{let i=zn("div","TaskDiv",a),l=zn("div","dateDiv",i),s=zn("p","daysRemaining",l,t),c=zn("p","taskTitle",i,n),d=zn("p","explainationTask",i,e),u=zn("div","buttonsManipulationDiv",i),A=zn("button","Priotrity",u,o),p=zn("button","editTask",u,"edit"),m=zn("input","completeTask",u,r);"done"===r&&(m.checked=!0,c.style.setProperty("text-decoration","line-through"),d.style.setProperty("text-decoration","line-through")),m.type="checkbox",m.title="toogle complete",i.className="task",l.className="task",s.className="task",c.className="task",d.className="task",u.className="task",A.className="task",p.className="task",m.className="task"};return{placingTasks:function(){document.querySelectorAll(".task").forEach((n=>{n.remove()}));for(let e=0;e<h.allProjects[C.projectPos.position].projectList.length;e++){let t=h.allProjects[C.projectPos.position].projectList[e];console.log(t),n(t)}},updateAlltasks:function(){"Home"===Sn.section&&(document.querySelector("#TaskNumber").textContent=h.allTasks.length)},makeTaskbox:function(){return zn("div","TaskBox",qn.content)},taskcards:n}})();function Qn(){let n=document.querySelectorAll("#project"),e=0;n.forEach((n=>{new k(n,e),e++}))}zn("div","TaskBox",qn.content),document.querySelectorAll("#project")[0],Qn();let Rn={refreshTaskBox:function(){document.querySelectorAll(".contentToRemove").forEach((n=>{n.remove()})),document.querySelectorAll(".task").forEach((n=>{n.remove()})),document.querySelectorAll("#TaskBox").forEach((n=>{n.remove()}))},TaskBoxcleanup:Jn};document.querySelector("#homeDiv").addEventListener("click",(function(n){Rn.refreshTaskBox(),Gn.makeStatistics(),Zn.makeTaskbox(),Fn(),Sn.section="Home",On(),_n.manageCheckbox()}));let Xn={createTaskBoxforProject:function(){let n=Pn.domElementCreator("div","TaskBox",document.querySelector("#contentTobeUpdated"));return n.className=".contentToRemove",n},navigatingTheProjectAndGivingTasks:function(n){for(let e=0;e<h.allProjects[n].projectList.length;e++)Zn.taskcards(h.allProjects[n].projectList[e])}};function Jn(){document.querySelectorAll(".task").forEach((n=>{n.remove()}))}function Kn(){Jn(),console.log("hello");for(let n=0;n<h.allTasks.length;n++)console.log(h.allTasks[n]),Zn.taskcards(h.allTasks[n])}Kn();let _n={manageCheckbox:function(){let n=0;document.querySelectorAll("#completeTask").forEach((e=>{new Dn(e,n),n++}))}},$n={strikeoutWords:function(n,e="line-through"){let t=document.querySelectorAll("#taskTitle"),o=document.querySelectorAll("#explainationTask");t[n].style.setProperty("text-decoration",e),o[n].style.setProperty("text-decoration",e)}}},250:(n,e,t)=>{n.exports=t.p+"0ae69d2eae7e39bfe725.png"}},n=>{n.O(0,[712],(()=>(584,n(n.s=584)))),n.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJckIsRUFBYUUsU0FBUzdGLElBQ25DMmYsR0FBWW9CLFVBQVVwYixFQUFhRSxTQUFTN0YsR0FNN0MsQ0FFQXNmLEtBRU8sSUFBSW5YLEdBa0JKLENBQUNDLGVBaEJOLFdBQ0UsSUFBSTlFLEVBQU0sRUFDU1MsU0FBU3FhLGlCQUFpQixpQkFFOUJDLFNBQVF5RCxJQUVaLElBQUk3RyxHQUE2QjZHLEVBQVN4ZSxHQUN2REEsR0FBTyxHQUdQLEdBVVNpWSxHQWFKLENBQUNDLGVBWE4sU0FBd0JuVixFQUFTMGIsRUFBWSxnQkFDM0MsSUFBSUMsRUFBY2plLFNBQVNxYSxpQkFBaUIsY0FDeEM2RCxFQUFpQmxlLFNBQVNxYSxpQkFBaUIscUJBRS9DNEQsRUFBYzNiLEdBQVV6QyxNQUFNMmEsWUFBWSxrQkFBa0J3RCxHQUM1REUsRUFBaUI1YixHQUFVekMsTUFBTTJhLFlBQVksa0JBQWtCd0QsRUFDakUsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL3NyYy9hZGQuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9zcmMvcHJvamVjdC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrbWFuYWdlbWVudHN5c3RlbS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2ttYW5hZ2VtZW50c3lzdGVtLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9zcmMvY2hlY2suanMiLCJ3ZWJwYWNrOi8vdGFza21hbmFnZW1lbnRzeXN0ZW0vLi9zcmMvRG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuL2ljb25zL2xpbnV4SGVhZC5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUluZGllK0Zsb3dlciZmYW1pbHk9UXVpY2tzYW5kOndnaHRANTAwJmZhbWlseT1TYXRpc2Z5JmRpc3BsYXk9c3dhcCk7XCJdKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYFxuICAqe1xuXG4gICAgcGFkZGluZzogMHB4O1xuICAgIG1hcmdpbjogMHB4O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgZm9udC1mYW1pbHk6ICdRdWlja3NhbmQnLCBzYW5zLXNlcmlmO1xuXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuOHB4O1xuXG4gICAgXG5cblxuXG59XG5ib2R5e1xuYmFja2dyb3VuZC1jb2xvcjogIzBmMGUxMztcblxuZGlzcGxheTogZ3JpZDtcbmdyaWQtdGVtcGxhdGUtY29sdW1uczogMjUwcHggcmVwZWF0KDQsMWZyKTtcbmdyaWQtdGVtcGxhdGUtcm93czpyZXBlYXQoNywxZnIpIDtcbmhlaWdodDogMTAwdmg7XG5jb2xvcjogd2hpdGU7XG5cblxufVxuXG4jc2lkZWJveHtcblxuICBcbiAgICBncmlkLWNvbHVtbjogMS8xO1xuICAgIGdyaWQtcm93OiAxLy0xO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNjFhMjM7XG4gIFxuIFxuXG5cblxufVxuXG4jYXBwVGl0bGVIb2xkZXJ7XG5cblxuZGlzcGxheTogZmxleDtcblxuYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuYmFja2dyb3VuZC1jb2xvcjogIzE2MWEyMztcblxuYm9yZGVyLWJvdHRvbTogc29saWQgMC41cHggICM0MDQ4NWE7XG5cblxucGFkZGluZzogMjJweDtcbmhlaWdodDogMTAwcHg7XG5cblxuXG5cbn1cbiNhcHBUaXRsZXtcblxuZm9udC1zaXplOiAxOHB4O1xuZm9udC13ZWlnaHQ6IGJvbGQ7XG5cbn1cbiNhcHBMb2dve1xuICBcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19ffSk7XG4gICAgd2lkdGg6IDYwcHg7XG4gICAgaGVpZ2h0OiA2MHB4O1xufVxuXG4jc2VjdGlvblRpdGxle1xuXG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIG1hcmdpbjogIDEycHggMHB4IDBweCAzOXB4O1xuICAgXG4gICAgXG5cblxufVxuI3NlY3Rpb257XG5cbiAgICBjb2xvcjogIzQ4NGI1MjtcblxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgIFxuICAgIGdhcDogMTJweDtcbiAgICBtYXJnaW4tdG9wOiAxMnB4O1xuXG59XG4jc2VjdGlvbj5idXR0b257XG5cbiAgICBiYWNrZ3JvdW5kOnRyYW5zcGFyZW50IDtcbiAgICBjb2xvcjogIzlkOWZhNTtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgd2lkdGg6IDE1MHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIHBhZGRpbmc6IDEycHg7XG4gICAgZ2FwOiAxNHB4O1xuICAgIGZvbnQtc2l6ZTogMTUuNXB4O1xuICAgIHBhZGRpbmctbGVmdDogMjZweDtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgXG4gICBcbn1cblxuI3NlY3Rpb24+YnV0dG9uOmxhc3QtY2hpbGR7XG5cbmJhY2tncm91bmQtY29sb3I6IzM3NTREQjtcbmJvcmRlci1yYWRpdXM6IDEycHg7XG5oZWlnaHQ6IDUwcHg7XG5jb2xvcjp3aGl0ZTtcbndpZHRoOiAyMDBweDtcblxubWFyZ2luLWxlZnQ6IDIxcHg7XG5cbn1cbiNzZWN0aW9uPmJ1dHRvbjpob3ZlcntcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyRDJGMzk7XG4gICAgd2lkdGg6IDI1MHB4O1xuXG5cbn0gICAgXG5cbiNzZWN0aW9uPmJ1dHRvbjpsYXN0LWNoaWxkOmhvdmVye1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjojMzc1NERCO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7XG4gICAgd2lkdGg6IDIwMHB4O1xuICAgIH1cbiN0b3BCb3hpbWFnZWdpcmwsI211c2ljYm95LCNib3lXaXRocGFwZXJze1xuXG5cbmhlaWdodDogMTAwcHg7XG5cblxuXG5cblxufVxuI3RvcEJveGltYWdlZ2lybHtcblxuICAgIG1hcmdpbi1sZWZ0OjExMXB4IDtcbn1cblxuXG4jdG9wQm94e1xuXG5ncmlkLWNvbHVtbi1zdGFydDogMjtcbmdyaWQtY29sdW1uLWVuZDogNjtcbmJhY2tncm91bmQtY29sb3I6ICMzNzU0REI7XG5kaXNwbGF5OiBmbGV4O1xuZ2FwOjEwcHg7XG5oZWlnaHQ6MTAwcHggO1xuXG5cblxuXG59XG4jdG9wVGV4dHtcbiAgXG4gIGZvbnQtZmFtaWx5OiAnU2F0aXNmeScsIGN1cnNpdmU7XG5hbGlnbi1zZWxmOiBjZW50ZXI7XG5mb250LXNpemU6IDUwcHg7XG5mb250LXdlaWdodDogYm9sZDtcbm1hcmdpbjogMTJweDtcbn1cbiNhZGRUYXNre1xuXG53aWR0aDogNzBweDtcbmhlaWdodDogNzBweDtcbnBvc2l0aW9uOiBhYnNvbHV0ZTtcbnRvcDo0NDBweDtcbmxlZnQ6MTE3OHB4O1xuYmFja2dyb3VuZC1jb2xvcjogIzM3NTREQjtcblxuYm9yZGVyOiBub25lO1xuYm9yZGVyLXJhZGl1czogMTAwJTtcblxuXG59XG5cbiNhZGR0YXNraWNvbntcblxuICAgIGZpbGw6d2hpdGU7XG4gICBcblxuXG5cbn1cblxuI2FkZFRhc2s6aG92ZXJ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmNTY3ODtcblxuXG59XG4jZGlhbG9nQ3JlYXRlUHJvamVjdHtcblxuICAgIGJvcmRlcjogbm9uZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjYyYzM2O1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgd2lkdGg6IDI1MXB4O1xucGFkZGluZzogMjBweDtcbm1hcmdpbi10b3A6IDM3OXB4O1xuXG59XG4jbWVzc2FnZUJveGRpdntcblxuICAgIGRpc3BsYXk6IGZsZXg7XG5cbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIHBhZGRpbmc6IDE1cHg7XG4gICAgZ2FwOjZweDtcbiAgICBcbiAgIFxufVxuXG4jbWVzc2FnZUJveGRpdiBidXR0b257XG5cbiAgICB3aWR0aDogNzhweDtcbiAgICBoZWlnaHQ6IDI2cHg7XG5ib3JkZXI6IG5vbmU7XG5vdXRsaW5lOm5vbmU7XG5jb2xvcjp3aGl0ZTtcblxufVxuXG4jbWVzc2FnZUJveGRpdiBidXR0b246Zmlyc3QtY2hpbGR7XG5cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjUzYjMwO1xufVxuXG4jbWVzc2FnZUJveGRpdiBidXR0b246bGFzdC1jaGlsZHtcblxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyYWEzMWY7XG59XG5cbiNtZXNzYWdlQm94ZGl2IGlucHV0e1xuXG4gICAgcGFkZGluZzogNHB4IDEycHg7XG4gICAgYm9yZGVyLXJhZGl1czo0cHggO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNFM0UzRTM7XG5cbn1cbiNtZXNzYWdlQm94ZGl2IGlucHV0OmFjdGl2ZXtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbn1cbiNtZXNzYWdlQm94ZGl2IGRpdntcblxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ2FwOjhweDtcblxuXG59XG5cblxuICBcbnRleHRhcmVhIHtcbiAgICByZXNpemU6IG5vbmU7XG4gIH1cbiAjZGlhbG9nVGFza3tcblxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB0b3A6MjclO1xuICAgIGxlZnQ6NDAlO1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBvdXRsaW5lOm5vbmU7XG4gICAgd2lkdGg6IDI5MXB4O1xuICAgIGhlaWdodDogMzU1cHg7XG4gICAgcGFkZGluZzogMTNweDtcbiAgIGJvcmRlci1yYWRpdXM6IDEycHg7XG4gICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjYyYzM2O1xuICAgY29sb3I6d2hpdGVcblxuIH1cbiAjZGlhbG9nVGFzayBpbnB1dCwgI2RpYWxvZ1Rhc2sgdGV4dGFyZWF7XG5cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYjhjMGNjO1xuIH0gXG5cbiAgZGlhbG9nOjpiYWNrZHJvcCB7XG4gICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDVweCk7XG4gIH1cbiAgI2J1dHRvbkhvbGRlcntcblxuZGlzcGxheTogZmxleDtcbmdhcDogOHB4O1xuanVzdGlmeS1jb250ZW50OiBlbmQ7XG5oZWlnaHQ6IDMwcHg7XG5wYWRkaW5nOiAwcHggMTBweDtcbiAgfVxuXG4gICNidXR0b25Ib2xkZXIgYnV0dG9ue1xuXG4gICAgd2lkdGg6IDEzMHB4O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBvdXRsaW5lOm5vbmU7XG4gICAgY29sb3I6IHdoaXRlO1xuXG4gIH1cblxuICAjYnV0dG9uSG9sZGVyIGJ1dHRvbjpsYXN0LWNoaWxke1xuXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJhYTMxZjtcbiAgICBcblxuICB9XG5cbiAgI2J1dHRvbkhvbGRlciBidXR0b246Zmlyc3QtY2hpbGR7XG5cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjUzYjMwO1xuXG4gIH1cblxuICAjYnV0dG9uSG9sZGVyIGJ1dHRvbjpob3ZlciwjbWVzc2FnZUJveGRpdiBidXR0b246aG92ZXJ7XG5cblxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlcjogMnB4IHNvbGlkICNiOGMwY2M7XG5cblxuICB9XG5cbiAgXG5cbiAgI3Byb2plY3RzU2VjdGlvbntcblxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgXG4gICAgXG4gICAgbWFyZ2luLXRvcDotMTRweDtcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xuICAgIFxuXG5cbiAgfVxuICAjcHJvamVjdHNTZWN0aW9uIGJ1dHRvbntcblxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICB3aWR0aDogMTUwcHg7XG4gICAgaGVpZ2h0OiAzMHB4O1xuICAgIGNvbG9yOiM4Mjg0ODk7XG4gICBmb250LXdlaWdodDogYm9sZDtcbiAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICBib3JkZXItcmFkaXVzOiA3cHg7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG5cbiAgfVxuICAjcHJvamVjdHNTZWN0aW9uIGJ1dHRvbjpob3ZlcntcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMmQyZjM5O1xuXG5cblxuICB9XG4gICNjb250ZW50VG9iZVVwZGF0ZWR7XG5cbiAgICAvKiBib3JkZXI6IHNvbGlkIDNweCByZWQ7ICovXG4gICBcbiAgICBncmlkLWNvbHVtbjogMi8tMTtcbiAgICBncmlkLXJvdzogMi8tMTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICBcblxuXG5cbiAgfVxuICAjc3RhdGlzdGljc0hvbGRlcmJveHtcblxuICAgIFxuICAgIGhlaWdodDogMTAwcHg7XG4gICAgbWFyZ2luOiAyMHB4IDBweCAwcHggMTBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdhcDogNzZweDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblxuICB9XG5cbiAgI2luZm9ybWF0aW9uT2ZQcm9qZWN0c0hvbGRlcntcblxuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblxuXG5cblxuICB9XG4gICNpbmZvcm1hdGlvbk9mUHJvamVjdHNIb2xkZXIgcDpmaXJzdC1jaGlsZCwjVGFza051bWJlciwjY29tcGxldGVkTnVtYmVye1xuXG4gICAgZm9udC1zaXplOiAzNHB4O1xuXG5cbiAgfVxuICAjc3RhdGlzdGljc0hvbGRlcmJveD5kaXZ7XG5cbmRpc3BsYXk6IGZsZXg7XG5cbndpZHRoOiAzMDBweDtcbmhlaWdodDogaW5oZXJpdDtcbnBhZGRpbmc6IDE1cHg7XG5ib3JkZXItcmFkaXVzOiA4cHg7XG5qdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbmJhY2tncm91bmQtY29sb3I6ICMxNjFhMjM7XG5cblxuIH1cbiAjcHJvamVjdHNCYWNrZHJvcCwjdGFza3NCYWNrZHJvcCwjY29tcGxldGVkQmFja2Ryb3B7XG5cbm9wYWNpdHk6IDE1JTtcbmJvcmRlci1yYWRpdXM6MTAwJSA7XG53aWR0aDogNjBweDtcbmhlaWdodDogNjBweDtcblxuXG5cblxuXG5cbiB9XG4gI3Byb2plY3RzQmFja2Ryb3B7XG4gIGJhY2tncm91bmQtY29sb3I6ICNhODAzZTQ7XG5cblxuIH1cbiAjdGFza3NCYWNrZHJvcHtcbiAgYmFja2dyb3VuZC1jb2xvcjojRjM5QzEyIDtcbiB9XG5cbiAjY29tcGxldGVkQmFja2Ryb3B7XG5cbiAgYmFja2dyb3VuZC1jb2xvcjogIzI3QUU2MDtcblxuIH1cbiBcbiAjaWNvbkRpdntcblxuZGlzcGxheTogZmxleDtcbmp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cbiB9XG4gI2ljb25EaXYgaW1ne1xuICB3aWR0aDozMnB4O1xuICBoZWlnaHQ6MzBweDsgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbmxlZnQ6IDQ2cHg7XG50b3A6MTVweFxuIH1cblxuI1Rhc2tCb3h7XG4gIG1hcmdpbi10b3A6MTJweDtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwxZnIpO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgzLDExMHB4KTtcbiAgZ3JpZC1hdXRvLWNvbHVtbnM6IDFmcjtcbiAgZ3JpZC1hdXRvLXJvd3M6MTEwcHg7XG4gIGZsZXgtZ3JvdzogMTtcbiAgcGFkZGluZzogMHB4IDM3cHg7XG4gIGdhcDogMTJweDtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG4jVGFza0RpdntcblxuICBiYWNrZ3JvdW5kLWNvbG9yOiMxNjFhMjMgO1xuIHBhZGRpbmc6IDEycHg7XG4gZGlzcGxheTogZmxleDtcbiBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuIGdhcDogNHB4O1xuIGJvcmRlci1yYWRpdXM6IDEycHg7XG5cbn1cblxuI2RheXNSZW1haW5pbmd7XG5cbiAgZm9udC1zaXplOiAxMnB4O1xuICBjb2xvcjogIzY2NjY2NjtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcblxuXG59XG5cbiNUYXNrVGl0bGV7XG5cbmZvbnQtd2VpZ2h0OiBib2xkO1xuXG5cbn1cblxuI2V4cGxhaW5hdGlvblRhc2t7XG5cbmZvbnQtc3R5bGU6IGl0YWxpYztcbmZvbnQtc2l6ZTogMTRweDtcbmZvbnQtd2VpZ2h0OiAxMDA7XG5jb2xvcjogIzY2NjY2NjtcblxuXG59XG5cbiNidXR0b25zTWFuaXB1bGF0aW9uRGl2e1xuXG5kaXNwbGF5OiBmbGV4O1xuZ2FwOjZweDtcbmp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5cbn1cbiNidXR0b25zTWFuaXB1bGF0aW9uRGl2IGJ1dHRvbntcblxuICB3aWR0aDogNzFweDtcbiAgaGVpZ2h0OiAyN3B4O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cbn1cblxuI2J1dHRvbnNNYW5pcHVsYXRpb25EaXYgYnV0dG9uOmZpcnN0LWNoaWxke1xuXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBjb2xvcjogI0YzOUMxMjtcbiAgYm9yZGVyOiBzb2xpZCAycHggI0YzOUMxMjtcbiAgYm9yZGVyLXJhZGl1czogMzRweDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXG5cbn1cbiNidXR0b25zTWFuaXB1bGF0aW9uRGl2IGJ1dHRvbjpudGgtY2hpbGQoMil7XG5cbiAgYmFja2dyb3VuZC1jb2xvcjojMzc1NERCO1xuICBjb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogbm9uZTtcbiAgb3V0bGluZTogbm9uZTtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXG5cblxufVxuI2J1dHRvbnNNYW5pcHVsYXRpb25EaXYgYnV0dG9uOm50aC1jaGlsZCgzKXtcbmJhY2tncm91bmQtY29sb3I6IHJnYigxMDIsIDMzLCAzMyk7XG5jb2xvcjogd2hpdGU7XG5ib3JkZXI6IG5vbmU7XG5vdXRsaW5lOiBub25lO1xuXG59XG5cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXXtcblxuICB3aWR0aDogMjhweDtcbiAgaGVpZ2h0OiAyOHB4O1xuXG4gIC8qIGJhY2tncm91bmQ6ICAqL1xuICBhcHBlYXJhbmNlOiBub25lO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBub25lO1xuICBib3JkZXI6IDJweCAjY2VkNGRhIHNvbGlkO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gXG59XG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl06Y2hlY2tlZHtcblxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjdBRTYwO1xuICBib3JkZXI6IG5vbmU7XG4gIFxuXG5cbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0VBSUU7O0lBRUUsWUFBWTtJQUNaLFdBQVc7SUFDWCxzQkFBc0I7SUFDdEIsb0NBQW9DOztJQUVwQyxxQkFBcUI7Ozs7OztBQU16QjtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QixhQUFhO0FBQ2IsMENBQTBDO0FBQzFDLGlDQUFpQztBQUNqQyxhQUFhO0FBQ2IsWUFBWTs7O0FBR1o7O0FBRUE7OztJQUdJLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QseUJBQXlCOzs7Ozs7QUFNN0I7O0FBRUE7OztBQUdBLGFBQWE7O0FBRWIsbUJBQW1COztBQUVuQix5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QWU7RUFDZixjQUFjO0VBQ2QsbUJBQW1COzs7QUFHckI7O0FBRUE7O0FBRUEsaUJBQWlCOzs7QUFHakI7O0FBRUE7O0FBRUEsa0JBQWtCO0FBQ2xCLGVBQWU7QUFDZixnQkFBZ0I7QUFDaEIsY0FBYzs7O0FBR2Q7O0FBRUE7O0FBRUEsYUFBYTtBQUNiLE9BQU87QUFDUCx5QkFBeUI7O0FBRXpCO0FBQ0E7O0VBRUUsV0FBVztFQUNYLFlBQVk7RUFDWixxQkFBcUI7O0FBRXZCOztBQUVBOztFQUVFLDZCQUE2QjtFQUM3QixjQUFjO0VBQ2QseUJBQXlCO0VBQ3pCLG1CQUFtQjtFQUNuQixxQkFBcUI7OztBQUd2QjtBQUNBOztFQUVFLHdCQUF3QjtFQUN4QixZQUFZO0VBQ1osWUFBWTtFQUNaLGFBQWE7RUFDYixxQkFBcUI7Ozs7QUFJdkI7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyxZQUFZO0FBQ1osWUFBWTtBQUNaLGFBQWE7O0FBRWI7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFlBQVk7O0VBRVosaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQixzQkFBc0I7RUFDdEIseUJBQXlCO0VBQ3pCLGtCQUFrQjs7QUFFcEI7QUFDQTs7RUFFRSx5QkFBeUI7RUFDekIsWUFBWTs7OztBQUlkXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcbiAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW5kaWUrRmxvd2VyJmZhbWlseT1RdWlja3NhbmQ6d2dodEA1MDAmZmFtaWx5PVNhdGlzZnkmZGlzcGxheT1zd2FwJyk7XFxuXFxuICBcXG4gICp7XFxuXFxuICAgIHBhZGRpbmc6IDBweDtcXG4gICAgbWFyZ2luOiAwcHg7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgIGZvbnQtZmFtaWx5OiAnUXVpY2tzYW5kJywgc2Fucy1zZXJpZjtcXG5cXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuOHB4O1xcblxcbiAgICBcXG5cXG5cXG5cXG59XFxuYm9keXtcXG5iYWNrZ3JvdW5kLWNvbG9yOiAjMGYwZTEzO1xcblxcbmRpc3BsYXk6IGdyaWQ7XFxuZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyNTBweCByZXBlYXQoNCwxZnIpO1xcbmdyaWQtdGVtcGxhdGUtcm93czpyZXBlYXQoNywxZnIpIDtcXG5oZWlnaHQ6IDEwMHZoO1xcbmNvbG9yOiB3aGl0ZTtcXG5cXG5cXG59XFxuXFxuI3NpZGVib3h7XFxuXFxuICBcXG4gICAgZ3JpZC1jb2x1bW46IDEvMTtcXG4gICAgZ3JpZC1yb3c6IDEvLTE7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNjFhMjM7XFxuICBcXG4gXFxuXFxuXFxuXFxufVxcblxcbiNhcHBUaXRsZUhvbGRlcntcXG5cXG5cXG5kaXNwbGF5OiBmbGV4O1xcblxcbmFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuYmFja2dyb3VuZC1jb2xvcjogIzE2MWEyMztcXG5cXG5ib3JkZXItYm90dG9tOiBzb2xpZCAwLjVweCAgIzQwNDg1YTtcXG5cXG5cXG5wYWRkaW5nOiAyMnB4O1xcbmhlaWdodDogMTAwcHg7XFxuXFxuXFxuXFxuXFxufVxcbiNhcHBUaXRsZXtcXG5cXG5mb250LXNpemU6IDE4cHg7XFxuZm9udC13ZWlnaHQ6IGJvbGQ7XFxuXFxufVxcbiNhcHBMb2dve1xcbiAgXFxuICAgIGJhY2tncm91bmQ6IHVybCguL2ljb25zL2xpbnV4SGVhZC5wbmcpO1xcbiAgICB3aWR0aDogNjBweDtcXG4gICAgaGVpZ2h0OiA2MHB4O1xcbn1cXG5cXG4jc2VjdGlvblRpdGxle1xcblxcbiAgICBmb250LXNpemU6IDEycHg7XFxuICAgIG1hcmdpbjogIDEycHggMHB4IDBweCAzOXB4O1xcbiAgIFxcbiAgICBcXG5cXG5cXG59XFxuI3NlY3Rpb257XFxuXFxuICAgIGNvbG9yOiAjNDg0YjUyO1xcblxcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgIFxcbiAgICBnYXA6IDEycHg7XFxuICAgIG1hcmdpbi10b3A6IDEycHg7XFxuXFxufVxcbiNzZWN0aW9uPmJ1dHRvbntcXG5cXG4gICAgYmFja2dyb3VuZDp0cmFuc3BhcmVudCA7XFxuICAgIGNvbG9yOiAjOWQ5ZmE1O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIHdpZHRoOiAxNTBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgaGVpZ2h0OiA0MHB4O1xcbiAgICBwYWRkaW5nOiAxMnB4O1xcbiAgICBnYXA6IDE0cHg7XFxuICAgIGZvbnQtc2l6ZTogMTUuNXB4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDI2cHg7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgIFxcbiAgIFxcbn1cXG5cXG4jc2VjdGlvbj5idXR0b246bGFzdC1jaGlsZHtcXG5cXG5iYWNrZ3JvdW5kLWNvbG9yOiMzNzU0REI7XFxuYm9yZGVyLXJhZGl1czogMTJweDtcXG5oZWlnaHQ6IDUwcHg7XFxuY29sb3I6d2hpdGU7XFxud2lkdGg6IDIwMHB4O1xcblxcbm1hcmdpbi1sZWZ0OiAyMXB4O1xcblxcbn1cXG4jc2VjdGlvbj5idXR0b246aG92ZXJ7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyRDJGMzk7XFxuICAgIHdpZHRoOiAyNTBweDtcXG5cXG5cXG59ICAgIFxcblxcbiNzZWN0aW9uPmJ1dHRvbjpsYXN0LWNoaWxkOmhvdmVye1xcblxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiMzNzU0REI7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgYm9yZGVyLXJhZGl1czogMHB4O1xcbiAgICB3aWR0aDogMjAwcHg7XFxuICAgIH1cXG4jdG9wQm94aW1hZ2VnaXJsLCNtdXNpY2JveSwjYm95V2l0aHBhcGVyc3tcXG5cXG5cXG5oZWlnaHQ6IDEwMHB4O1xcblxcblxcblxcblxcblxcbn1cXG4jdG9wQm94aW1hZ2VnaXJse1xcblxcbiAgICBtYXJnaW4tbGVmdDoxMTFweCA7XFxufVxcblxcblxcbiN0b3BCb3h7XFxuXFxuZ3JpZC1jb2x1bW4tc3RhcnQ6IDI7XFxuZ3JpZC1jb2x1bW4tZW5kOiA2O1xcbmJhY2tncm91bmQtY29sb3I6ICMzNzU0REI7XFxuZGlzcGxheTogZmxleDtcXG5nYXA6MTBweDtcXG5oZWlnaHQ6MTAwcHggO1xcblxcblxcblxcblxcbn1cXG4jdG9wVGV4dHtcXG4gIFxcbiAgZm9udC1mYW1pbHk6ICdTYXRpc2Z5JywgY3Vyc2l2ZTtcXG5hbGlnbi1zZWxmOiBjZW50ZXI7XFxuZm9udC1zaXplOiA1MHB4O1xcbmZvbnQtd2VpZ2h0OiBib2xkO1xcbm1hcmdpbjogMTJweDtcXG59XFxuI2FkZFRhc2t7XFxuXFxud2lkdGg6IDcwcHg7XFxuaGVpZ2h0OiA3MHB4O1xcbnBvc2l0aW9uOiBhYnNvbHV0ZTtcXG50b3A6NDQwcHg7XFxubGVmdDoxMTc4cHg7XFxuYmFja2dyb3VuZC1jb2xvcjogIzM3NTREQjtcXG5cXG5ib3JkZXI6IG5vbmU7XFxuYm9yZGVyLXJhZGl1czogMTAwJTtcXG5cXG5cXG59XFxuXFxuI2FkZHRhc2tpY29ue1xcblxcbiAgICBmaWxsOndoaXRlO1xcbiAgIFxcblxcblxcblxcbn1cXG5cXG4jYWRkVGFzazpob3ZlcntcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmNTY3ODtcXG5cXG5cXG59XFxuI2RpYWxvZ0NyZWF0ZVByb2plY3R7XFxuXFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzI2MmMzNjtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgd2lkdGg6IDI1MXB4O1xcbnBhZGRpbmc6IDIwcHg7XFxubWFyZ2luLXRvcDogMzc5cHg7XFxuXFxufVxcbiNtZXNzYWdlQm94ZGl2e1xcblxcbiAgICBkaXNwbGF5OiBmbGV4O1xcblxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBwYWRkaW5nOiAxNXB4O1xcbiAgICBnYXA6NnB4O1xcbiAgICBcXG4gICBcXG59XFxuXFxuI21lc3NhZ2VCb3hkaXYgYnV0dG9ue1xcblxcbiAgICB3aWR0aDogNzhweDtcXG4gICAgaGVpZ2h0OiAyNnB4O1xcbmJvcmRlcjogbm9uZTtcXG5vdXRsaW5lOm5vbmU7XFxuY29sb3I6d2hpdGU7XFxuXFxufVxcblxcbiNtZXNzYWdlQm94ZGl2IGJ1dHRvbjpmaXJzdC1jaGlsZHtcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1M2IzMDtcXG59XFxuXFxuI21lc3NhZ2VCb3hkaXYgYnV0dG9uOmxhc3QtY2hpbGR7XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyYWEzMWY7XFxufVxcblxcbiNtZXNzYWdlQm94ZGl2IGlucHV0e1xcblxcbiAgICBwYWRkaW5nOiA0cHggMTJweDtcXG4gICAgYm9yZGVyLXJhZGl1czo0cHggO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG91dGxpbmU6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNFM0UzRTM7XFxuXFxufVxcbiNtZXNzYWdlQm94ZGl2IGlucHV0OmFjdGl2ZXtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBvdXRsaW5lOiBub25lO1xcbn1cXG4jbWVzc2FnZUJveGRpdiBkaXZ7XFxuXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGdhcDo4cHg7XFxuXFxuXFxufVxcblxcblxcbiAgXFxudGV4dGFyZWEge1xcbiAgICByZXNpemU6IG5vbmU7XFxuICB9XFxuICNkaWFsb2dUYXNre1xcblxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHRvcDoyNyU7XFxuICAgIGxlZnQ6NDAlO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG91dGxpbmU6bm9uZTtcXG4gICAgd2lkdGg6IDI5MXB4O1xcbiAgICBoZWlnaHQ6IDM1NXB4O1xcbiAgICBwYWRkaW5nOiAxM3B4O1xcbiAgIGJvcmRlci1yYWRpdXM6IDEycHg7XFxuICAgYmFja2dyb3VuZC1jb2xvcjogIzI2MmMzNjtcXG4gICBjb2xvcjp3aGl0ZVxcblxcbiB9XFxuICNkaWFsb2dUYXNrIGlucHV0LCAjZGlhbG9nVGFzayB0ZXh0YXJlYXtcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I4YzBjYztcXG4gfSBcXG5cXG4gIGRpYWxvZzo6YmFja2Ryb3Age1xcbiAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNXB4KTtcXG4gIH1cXG4gICNidXR0b25Ib2xkZXJ7XFxuXFxuZGlzcGxheTogZmxleDtcXG5nYXA6IDhweDtcXG5qdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcXG5oZWlnaHQ6IDMwcHg7XFxucGFkZGluZzogMHB4IDEwcHg7XFxuICB9XFxuXFxuICAjYnV0dG9uSG9sZGVyIGJ1dHRvbntcXG5cXG4gICAgd2lkdGg6IDEzMHB4O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIG91dGxpbmU6bm9uZTtcXG4gICAgY29sb3I6IHdoaXRlO1xcblxcbiAgfVxcblxcbiAgI2J1dHRvbkhvbGRlciBidXR0b246bGFzdC1jaGlsZHtcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJhYTMxZjtcXG4gICAgXFxuXFxuICB9XFxuXFxuICAjYnV0dG9uSG9sZGVyIGJ1dHRvbjpmaXJzdC1jaGlsZHtcXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0Y1M2IzMDtcXG5cXG4gIH1cXG5cXG4gICNidXR0b25Ib2xkZXIgYnV0dG9uOmhvdmVyLCNtZXNzYWdlQm94ZGl2IGJ1dHRvbjpob3ZlcntcXG5cXG5cXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNiOGMwY2M7XFxuXFxuXFxuICB9XFxuXFxuICBcXG5cXG4gICNwcm9qZWN0c1NlY3Rpb257XFxuXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBcXG4gICAgXFxuICAgIG1hcmdpbi10b3A6LTE0cHg7XFxuICAgIG1hcmdpbi1sZWZ0OiAyMCU7XFxuICAgIFxcblxcblxcbiAgfVxcbiAgI3Byb2plY3RzU2VjdGlvbiBidXR0b257XFxuXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIHdpZHRoOiAxNTBweDtcXG4gICAgaGVpZ2h0OiAzMHB4O1xcbiAgICBjb2xvcjojODI4NDg5O1xcbiAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgIGZvbnQtc3R5bGU6IGl0YWxpYztcXG4gICAgYm9yZGVyLXJhZGl1czogN3B4O1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICAgIHRleHQtYWxpZ246IGxlZnQ7XFxuXFxuICB9XFxuICAjcHJvamVjdHNTZWN0aW9uIGJ1dHRvbjpob3ZlcntcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzJkMmYzOTtcXG5cXG5cXG5cXG4gIH1cXG4gICNjb250ZW50VG9iZVVwZGF0ZWR7XFxuXFxuICAgIC8qIGJvcmRlcjogc29saWQgM3B4IHJlZDsgKi9cXG4gICBcXG4gICAgZ3JpZC1jb2x1bW46IDIvLTE7XFxuICAgIGdyaWQtcm93OiAyLy0xO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgIFxcblxcblxcblxcbiAgfVxcbiAgI3N0YXRpc3RpY3NIb2xkZXJib3h7XFxuXFxuICAgIFxcbiAgICBoZWlnaHQ6IDEwMHB4O1xcbiAgICBtYXJnaW46IDIwcHggMHB4IDBweCAxMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBnYXA6IDc2cHg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgfVxcblxcbiAgI2luZm9ybWF0aW9uT2ZQcm9qZWN0c0hvbGRlcntcXG5cXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG5cXG5cXG5cXG4gIH1cXG4gICNpbmZvcm1hdGlvbk9mUHJvamVjdHNIb2xkZXIgcDpmaXJzdC1jaGlsZCwjVGFza051bWJlciwjY29tcGxldGVkTnVtYmVye1xcblxcbiAgICBmb250LXNpemU6IDM0cHg7XFxuXFxuXFxuICB9XFxuICAjc3RhdGlzdGljc0hvbGRlcmJveD5kaXZ7XFxuXFxuZGlzcGxheTogZmxleDtcXG5cXG53aWR0aDogMzAwcHg7XFxuaGVpZ2h0OiBpbmhlcml0O1xcbnBhZGRpbmc6IDE1cHg7XFxuYm9yZGVyLXJhZGl1czogOHB4O1xcbmp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcbmJhY2tncm91bmQtY29sb3I6ICMxNjFhMjM7XFxuXFxuXFxuIH1cXG4gI3Byb2plY3RzQmFja2Ryb3AsI3Rhc2tzQmFja2Ryb3AsI2NvbXBsZXRlZEJhY2tkcm9we1xcblxcbm9wYWNpdHk6IDE1JTtcXG5ib3JkZXItcmFkaXVzOjEwMCUgO1xcbndpZHRoOiA2MHB4O1xcbmhlaWdodDogNjBweDtcXG5cXG5cXG5cXG5cXG5cXG5cXG4gfVxcbiAjcHJvamVjdHNCYWNrZHJvcHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhODAzZTQ7XFxuXFxuXFxuIH1cXG4gI3Rhc2tzQmFja2Ryb3B7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiNGMzlDMTIgO1xcbiB9XFxuXFxuICNjb21wbGV0ZWRCYWNrZHJvcHtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6ICMyN0FFNjA7XFxuXFxuIH1cXG4gXFxuICNpY29uRGl2e1xcblxcbmRpc3BsYXk6IGZsZXg7XFxuanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFxuXFxuIH1cXG4gI2ljb25EaXYgaW1ne1xcbiAgd2lkdGg6MzJweDtcXG4gIGhlaWdodDozMHB4OyBcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5sZWZ0OiA0NnB4O1xcbnRvcDoxNXB4XFxuIH1cXG5cXG4jVGFza0JveHtcXG4gIG1hcmdpbi10b3A6MTJweDtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLDFmcik7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgzLDExMHB4KTtcXG4gIGdyaWQtYXV0by1jb2x1bW5zOiAxZnI7XFxuICBncmlkLWF1dG8tcm93czoxMTBweDtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIHBhZGRpbmc6IDBweCAzN3B4O1xcbiAgZ2FwOiAxMnB4O1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxufVxcbiNUYXNrRGl2e1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjojMTYxYTIzIDtcXG4gcGFkZGluZzogMTJweDtcXG4gZGlzcGxheTogZmxleDtcXG4gZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gZ2FwOiA0cHg7XFxuIGJvcmRlci1yYWRpdXM6IDEycHg7XFxuXFxufVxcblxcbiNkYXlzUmVtYWluaW5ne1xcblxcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgY29sb3I6ICM2NjY2NjY7XFxuICBsZXR0ZXItc3BhY2luZzogMXB4O1xcblxcblxcbn1cXG5cXG4jVGFza1RpdGxle1xcblxcbmZvbnQtd2VpZ2h0OiBib2xkO1xcblxcblxcbn1cXG5cXG4jZXhwbGFpbmF0aW9uVGFza3tcXG5cXG5mb250LXN0eWxlOiBpdGFsaWM7XFxuZm9udC1zaXplOiAxNHB4O1xcbmZvbnQtd2VpZ2h0OiAxMDA7XFxuY29sb3I6ICM2NjY2NjY7XFxuXFxuXFxufVxcblxcbiNidXR0b25zTWFuaXB1bGF0aW9uRGl2e1xcblxcbmRpc3BsYXk6IGZsZXg7XFxuZ2FwOjZweDtcXG5qdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcblxcbn1cXG4jYnV0dG9uc01hbmlwdWxhdGlvbkRpdiBidXR0b257XFxuXFxuICB3aWR0aDogNzFweDtcXG4gIGhlaWdodDogMjdweDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG5cXG59XFxuXFxuI2J1dHRvbnNNYW5pcHVsYXRpb25EaXYgYnV0dG9uOmZpcnN0LWNoaWxke1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogI0YzOUMxMjtcXG4gIGJvcmRlcjogc29saWQgMnB4ICNGMzlDMTI7XFxuICBib3JkZXItcmFkaXVzOiAzNHB4O1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcblxcblxcbn1cXG4jYnV0dG9uc01hbmlwdWxhdGlvbkRpdiBidXR0b246bnRoLWNoaWxkKDIpe1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjojMzc1NERCO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG5cXG5cXG5cXG59XFxuI2J1dHRvbnNNYW5pcHVsYXRpb25EaXYgYnV0dG9uOm50aC1jaGlsZCgzKXtcXG5iYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTAyLCAzMywgMzMpO1xcbmNvbG9yOiB3aGl0ZTtcXG5ib3JkZXI6IG5vbmU7XFxub3V0bGluZTogbm9uZTtcXG5cXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXXtcXG5cXG4gIHdpZHRoOiAyOHB4O1xcbiAgaGVpZ2h0OiAyOHB4O1xcblxcbiAgLyogYmFja2dyb3VuZDogICovXFxuICBhcHBlYXJhbmNlOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTtcXG4gIGJvcmRlcjogMnB4ICNjZWQ0ZGEgc29saWQ7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuIFxcbn1cXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOmNoZWNrZWR7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjdBRTYwO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgXFxuXFxuXFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG5cbmV4cG9ydCBsZXQgYWxsTWF0ZXJpYWxzPSgoKT0+e1xuXG4gICAgbGV0IGFsbFByb2plY3RzPVtdO1xuICAgIGxldCBhbGxUYXNrcz1bXTtcblxuXG5yZXR1cm4ge2FsbFByb2plY3RzLGFsbFRhc2tzfVxuXG59KSgpXG5cblxuZXhwb3J0IGxldCBQcm9qZWN0TWFuYWdlbWVudD0oKCk9PntcblxuICAgIGNsYXNzIGNyZWF0ZVByb2plY3R7XG5cbiAgICAgICAgY29uc3RydWN0b3IocHJvamVjdFRpdGxlKXtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdFRpdGxlPXByb2plY3RUaXRsZTtcbiAgICAgICAgICAgIHRoaXMucHJvamVjdExpc3Q9W107XG4gICAgICAgICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVG9BbGxQcm9qZWN0cyhOZXdQcm9qZWN0KSB7XG4gICAgICAgIGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1thbGxNYXRlcmlhbHMuYWxsUHJvamVjdHMubGVuZ3RoXT1OZXdQcm9qZWN0O1xuICAgICAgICBcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBGaW5kUHJvamVjdChQcm9qZWN0TmFtZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBcbiAgICAgICAgaWYoUHJvamVjdE5hbWU9PT1hbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaV0ucHJvamVjdE5hbWUpXG4gICAgIFxuICAgICAgXG4gICAgICAgICAgICAgXG4gICAgICAgICAgICAgcmV0dXJuIGFsbFByb2plY3RzW2ldLnByb2plY3RMaXN0O1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVyblxuICAgICB9XG5cblxuXG5yZXR1cm57RmluZFByb2plY3QsY3JlYXRlUHJvamVjdCxhZGRUb0FsbFByb2plY3RzfVxuXG5cbn0pKCkgXG5cblxuZXhwb3J0IGxldCBUYXNrTWFuYWdlbWVudD0oKCk9PntcblxuICAgIGNsYXNzIGNyZWF0ZVRhc2t7XG5cblxuICAgICAgICBjb25zdHJ1Y3Rvcih0aXRsZSxkZXNjcmlwdGlvbixkYXRlLHByaW9yaXR5LHN0YXR1cz1cInVuZG9uZVwiKXtcbiAgICBcbiAgICAgICAgICAgIHRoaXMudGl0bGU9dGl0bGU7XG4gICAgICAgICAgICB0aGlzLmRlc2NyaXB0aW9uPWRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgdGhpcy5kYXRlPWRhdGU7XG4gICAgICAgICAgICB0aGlzLnByaW9yaXR5PXByaW9yaXR5O1xuICAgICAgICAgICAgdGhpcy5zdGF0dXM9c3RhdHVzO1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgfVxuXG4gICBcblxuICAgIGZ1bmN0aW9uIGZpbmRpbmdUYXNrKFRhc2tOYW1lKXtcblxuICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgXG4gICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaV1bXCJwcm9qZWN0TGlzdFwiXS5sZW5ndGg7IHgrKykge1xuICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGlmKFRhc2tOYW1lPT09YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW2ldW1wicHJvamVjdExpc3RcIl1beF1bXCJ0aXRsZVwiXSl7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJmb3VuZFwiLHgsaSxhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaV1bXCJwcm9qZWN0TGlzdFwiXVt4XVtcInRpdGxlXCJdKTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4ge2kseH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgfVxuICAgIGxldCBwcm9qZWN0UG9zPXtcbiAgICAgICAgcG9zaXRpb246MFxuICAgIH1cbiAgIGZ1bmN0aW9uIGFkZFRhc2t0b1Byb2plY3QodGFzayxwcm9qZWN0PWFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1twcm9qZWN0UG9zLnBvc2l0aW9uXS5wcm9qZWN0TGlzdCl7XG5cbiAgICAgICAgcHJvamVjdFtwcm9qZWN0Lmxlbmd0aF09dGFzaztcbiAgICAgICAgLy8gYWxsTWF0ZXJpYWxzLmFsbFRhc2tzW2FsbE1hdGVyaWFscy5hbGxUYXNrcy5sZW5ndGhdPXRhc2s7XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB9XG5mdW5jdGlvbiBhZGRpbmdUb2FsbFRhc2tzKCkge1xuYWxsTWF0ZXJpYWxzLmFsbFRhc2tzLnNwbGljZSgwLGFsbE1hdGVyaWFscy5hbGxUYXNrcy5sZW5ndGgpXG5cblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tpbmRleF0ucHJvamVjdExpc3QubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tpbmRleF0ucHJvamVjdExpc3QsYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aClcbiAgICAgICAgICAgIGFsbE1hdGVyaWFscy5hbGxUYXNrc1thbGxNYXRlcmlhbHMuYWxsVGFza3MubGVuZ3RoXT1hbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaW5kZXhdLnByb2plY3RMaXN0W3hdO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxufVxuXG5cbnJldHVybiB7Y3JlYXRlVGFzayxmaW5kaW5nVGFzayxhZGRUYXNrdG9Qcm9qZWN0LHByb2plY3RQb3MsYWRkaW5nVG9hbGxUYXNrc31cblxuXG59KSgpXG5cblxuLy90aGUgYXJyeXMgc2hvdWxkIGhhdmUgYSBuYW1lIGFuZCB0aGUgdGFza3Mgc2hvdWxkIGtub3cgd2hlcmUgdGhleSBiZWxvbmcgdG9cblxuZnVuY3Rpb24gcGxhY2VUYXNraW5BbGxUYXNrcygpIHtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tcInByb2plY3RMaXN0XCJdLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICBhbGxNYXRlcmlhbHMuYWxsVGFza3NbaV09YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW1wicHJvamVjdExpc3RcIl1beF1cbiAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG4gICAgXG59XG5cbmxldCB1bmtub3duVGFrcz0gbmV3IFByb2plY3RNYW5hZ2VtZW50LmNyZWF0ZVByb2plY3QoXCJ1bmtub3duXCIpO1xuUHJvamVjdE1hbmFnZW1lbnQuYWRkVG9BbGxQcm9qZWN0cyh1bmtub3duVGFrcyk7XG5sZXQgdGFzaz0gbmV3IFRhc2tNYW5hZ2VtZW50LmNyZWF0ZVRhc2soXCJNYWtlIGNoaXBzXCIsXCJmbHkgZW1pcmF0ZXNcIixcIjIwMjAtMy0yMFwiLFwibWVkaXVtXCIpO1xuVGFza01hbmFnZW1lbnQuYWRkVGFza3RvUHJvamVjdCh0YXNrKTtcblxuXG5cblxuXG5cblxuXG4vL2NyZWF0aW5nIGRlZmF1bHQgXG5leHBvcnQgbGV0IHNwYWNlVHJhdmVscz1uZXcgUHJvamVjdE1hbmFnZW1lbnQuY3JlYXRlUHJvamVjdChcInNwYWNlIHRyaXBcIik7XG5Qcm9qZWN0TWFuYWdlbWVudC5hZGRUb0FsbFByb2plY3RzKHNwYWNlVHJhdmVscyk7XG5UYXNrTWFuYWdlbWVudC5maW5kaW5nVGFzayhcIk1ha2UgY2hpcHNcIik7IiwiXG5pbXBvcnQgeyBhbGxNYXRlcmlhbHMgfSBmcm9tIFwiLi9hZGRcIjtcbmltcG9ydCB7IHNwYWNlVHJhdmVscyB9IGZyb20gXCIuL2FkZC5qc1wiO1xuaW1wb3J0IHsgUHJvamVjdE1hbmFnZW1lbnQgfSBmcm9tIFwiLi9hZGRcIjtcbmltcG9ydCB7IHN0eWxpbmdTbGVsZWN0ZWRCdXR0b25zIH0gZnJvbSBcIi4vRG9tLmpzXCI7XG5pbXBvcnQgeyBtb3Zpbmdmcm9tT25lcHJvamVjdHRvYW5vdGhlciB9IGZyb20gXCIuL0RvbS5qc1wiO1xuaW1wb3J0IHsgcHJvamVjdEJ1dHRvbkFjdGlvbnNUb2dpdmVUYXNrcyB9IGZyb20gXCIuL0RvbS5qc1wiO1xuaW1wb3J0IHsgVGFza01hbmFnZW1lbnQgfSBmcm9tIFwiLi9hZGRcIjtcbmltcG9ydCB7IG5vdEhvbWVzZWN0aW9uIH0gZnJvbSBcIi4vRG9tLmpzXCI7XG5pbXBvcnQgeyBjb21wbGV0ZVRhc2sgfSBmcm9tIFwiLi9Eb20uanNcIjtcbmltcG9ydCB7IHN0cmlrZU91dGVmZmVjdCB9IGZyb20gXCIuL0RvbS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2hpZnRQcm9qZWN0KHBvc2l0aW9uKXtcbiAgICAgIGNvbnNvbGUubG9nKHBvc2l0aW9uKTsgIFxuICAgICAgVGFza01hbmFnZW1lbnQucHJvamVjdFBvcy5wb3NpdGlvbj1wb3NpdGlvbjtcbn1cblxuZXhwb3J0IGNsYXNzIFRhc2tpbmVhY2hwcm9qZWN0e1xuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9qZWN0QnV0dG9uLGluZGV4KXtcbiAgICAgICAgdGhpcy5wcm9qZWN0QnV0dG9uPXByb2plY3RCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgbm90SG9tZXNlY3Rpb24oKTtcbiAgICAgICAgICAgc2hpZnRQcm9qZWN0KGluZGV4KVxuICAgICAgICAgICBcbiAgICAgICAgICAgc3R5bGluZ1NsZWxlY3RlZEJ1dHRvbnMucmV0dXJuQWxsYnV0dG9uc3RseWVzVG9kZWZhdWx0KCk7XG4gICAgICAgICAgIHN0eWxpbmdTbGVsZWN0ZWRCdXR0b25zLm1ha2luZ1RoZUJ1dHRvbkdsb3cocHJvamVjdEJ1dHRvbik7XG4gICAgICAgICAgIG1vdmluZ2Zyb21PbmVwcm9qZWN0dG9hbm90aGVyLnJlZnJlc2hUYXNrQm94KCk7XG4gICAgICAgICAgIHByb2plY3RCdXR0b25BY3Rpb25zVG9naXZlVGFza3MuY3JlYXRlVGFza0JveGZvclByb2plY3QoKTtcbiAgICAgICAgICAgcHJvamVjdEJ1dHRvbkFjdGlvbnNUb2dpdmVUYXNrcy5uYXZpZ2F0aW5nVGhlUHJvamVjdEFuZEdpdmluZ1Rhc2tzKGluZGV4KTtcbiAgICAgICAgICAgY29tcGxldGVUYXNrLm1hbmFnZUNoZWNrYm94KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICBcblxuXG4gICAgfVxuXG4gXG4gIFxufVxuXG4vL2ltcG9ydCBjbGFzcyBhbmQgbWFrZSBkZWZhdWx0IHRoYXRcblxuXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTtcblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YoYXJndW1lbnQpID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjc3RyaW5nLWFyZ3VtZW50c1wiKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwidmFyIGRlZmF1bHRPcHRpb25zID0ge307XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gIGRlZmF1bHRPcHRpb25zID0gbmV3T3B0aW9ucztcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMCk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCJpbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICovXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG5cbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiBNKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiBkKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0RhdGUoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gYShkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gRyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICBZOiBmdW5jdGlvbiBZKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7XG5cbiAgICAvLyBUd28gZGlnaXQgeWVhclxuICAgIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgICAgdmFyIHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH1cblxuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAnWW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrWWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiBmdW5jdGlvbiBSKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRXh0ZW5kZWQgeWVhci4gVGhpcyBpcyBhIHNpbmdsZSBudW1iZXIgZGVzaWduYXRpbmcgdGhlIHllYXIgb2YgdGhpcyBjYWxlbmRhciBzeXN0ZW0uXG4gIC8vIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBsb2NhbGl6ZXJzIGFyZSBCLkMuIHllYXJzOlxuICAvLyB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICAvLyB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICAvLyB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICAvLyB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICAvLyB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICAvLyBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gIC8vIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZC5cbiAgdTogZnVuY3Rpb24gdShkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiBRKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ1EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcbiAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIHEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG4gICAgICBjYXNlICdxbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlICdxcXFxJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuICAgICAgY2FzZSAnTW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG4gICAgICBjYXNlICdNTU1NJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gTChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTEwnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gdyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG4gICAgaWYgKHRva2VuID09PSAnd28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiBJKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcbiAgICBpZiAodG9rZW4gPT09ICdJbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmQoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiBEKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gRShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIGUoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG4gICAgICBjYXNlICdlbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ2VlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gYyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIGkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG4gICAgICBjYXNlICdpaSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gYShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gYihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgfVxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gQihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiBLKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gayhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gUyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuUyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIFgoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIHgoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiBPKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnT08nOlxuICAgICAgY2FzZSAnT09PJzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiB6KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiB0KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIFQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBvcHRpb25zKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwidmFyIGRhdGVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIHRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfVxufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xudmFyIGZvcm1hdERpc3RhbmNlID0gZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQudG9TdHJpbmcoKSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0RGlzdGFuY2U7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBUT0RPOiBSZW1vdmUgU3RyaW5nKClcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qc1wiO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7XG4gICAgLy8gQHRzLWlnbm9yZTogRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsZW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCI7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXVxufTtcblxuLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcbnZhciBvcmRpbmFsTnVtYmVyID0gZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX29wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufTtcbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiBhcmd1bWVudENhbGxiYWNrKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBxdWFydGVyIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2soaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDAgLyogU3VuZGF5ICovLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi8uLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRMb2NhbGU7IiwiaW1wb3J0IGlzVmFsaWQgZnJvbSBcIi4uL2lzVmFsaWQvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSBcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanNcIjsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcblxuLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuXG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX29wdGlvbnMkbG9jYWxlLCBfcmVmMiwgX3JlZjMsIF9yZWY0LCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZTIsIF9vcHRpb25zJGxvY2FsZTIkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLCBfcmVmNSwgX3JlZjYsIF9yZWY3LCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZTMsIF9vcHRpb25zJGxvY2FsZTMkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMywgX2RlZmF1bHRPcHRpb25zJGxvY2FsNDtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgd2Vla1N0YXJ0c09uID0gdG9JbnRlZ2VyKChfcmVmNSA9IChfcmVmNiA9IChfcmVmNyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTMgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTMkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTMub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMyRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUzJG9wdGkud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNyAhPT0gdm9pZCAwID8gX3JlZjcgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY2ICE9PSB2b2lkIDAgPyBfcmVmNiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwzID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsNCA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsNC53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY1ICE9PSB2b2lkIDAgPyBfcmVmNSA6IDApO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9XG5cbiAgLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMpICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICB2YXIgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZWRbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgaWYgKCFpc0RhdGUoZGlydHlEYXRlKSAmJiB0eXBlb2YgZGlydHlEYXRlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59IiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKSk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHRpbWVzdGFtcCA9IHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufSIsImltcG9ydCB7IFRhc2tNYW5hZ2VtZW50IH0gZnJvbSBcIi4vYWRkLmpzXCI7XG5pbXBvcnQgeyBrbm93V2hpY2hzZWN0aW9uZGlhbG9naXMgfSBmcm9tIFwiLi9Eb20uanNcIjtcbmltcG9ydCB7IGFsbE1hdGVyaWFscyB9IGZyb20gXCIuL2FkZC5qc1wiO1xuaW1wb3J0IHsgc3RyaWtlT3V0ZWZmZWN0IH0gZnJvbSBcIi4vRG9tLmpzXCI7XG5leHBvcnQgY2xhc3MgY29tcGxldGVCdXR0b25mb3JFYWNoUHJvamVjdHtcblxuICAgIGNvbnN0cnVjdG9yKFRhc2tCdXR0b24saW5kZXgpe1xuXG4gICAgICAgIHRoaXMuVGFza0J1dHRvbj1UYXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsZnVuY3Rpb24oZSl7XG5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFRhc2tNYW5hZ2VtZW50LnByb2plY3RQb3MucG9zaXRpb24saW5kZXgpO1xuICAgICAgICBpZih0aGlzLmNoZWNrZWQpeyBcbiAgICAgICAgICAgIGlmKGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uPT09XCJIb21lXCIpe1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYWxsTWF0ZXJpYWxzLmFsbFRhc2tzW2luZGV4XSk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbVGFza01hbmFnZW1lbnQuZmluZGluZ1Rhc2soYWxsTWF0ZXJpYWxzLmFsbFRhc2tzW2luZGV4XS50aXRsZSldKVxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coVGFza01hbmFnZW1lbnQuZmluZGluZ1Rhc2soXCJkb25lXCIpKTtcbiAgICAgICAgICAgIGxldCBwcm9qZWN0Qm94PVRhc2tNYW5hZ2VtZW50LmZpbmRpbmdUYXNrKGFsbE1hdGVyaWFscy5hbGxUYXNrc1tpbmRleF0udGl0bGUpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1twcm9qZWN0Qm94LmldLnByb2plY3RMaXN0W3Byb2plY3RCb3gueF0uc3RhdHVzPVwiZG9uZVwiO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzW3Byb2plY3RCb3guaV0ucHJvamVjdExpc3RbcHJvamVjdEJveC54XSlcbiAgICAgICAgICAgIHN0cmlrZU91dGVmZmVjdC5zdHJpa2VvdXRXb3JkcyhpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0cylcbiAgICAgICAgICAgIGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tUYXNrTWFuYWdlbWVudC5wcm9qZWN0UG9zLnBvc2l0aW9uXS5wcm9qZWN0TGlzdFtpbmRleF0uc3RhdHVzPVwiZG9uZVwiXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbVGFza01hbmFnZW1lbnQucHJvamVjdFBvcy5wb3NpdGlvbl0ucHJvamVjdExpc3RbaW5kZXhdLnN0YXR1cylcblxuICAgICAgICAgICAgc3RyaWtlT3V0ZWZmZWN0LnN0cmlrZW91dFdvcmRzKGluZGV4KVxuICAgICAgICB9O31cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHN0cmlrZU91dGVmZmVjdC5zdHJpa2VvdXRXb3JkcyhpbmRleCxcIm5vbmVcIilcbiAgICAgICAgICAgIGFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tUYXNrTWFuYWdlbWVudC5wcm9qZWN0UG9zLnBvc2l0aW9uXS5wcm9qZWN0TGlzdFtpbmRleF0uc3RhdHVzPVwidW5kb25lXCJcbiAgICAgICAgfVxuICAgICAgICAgICBcbiAgICAgICAgfSlcbiAgICBcbiAgICB9XG5cblxuXG5cbn0iLCIvL2NyZWF0aW5nIHRoZSBET01cblxuaW1wb3J0ICcuL3N0eWxlLmNzcydcbmltcG9ydCB7IFRhc2tpbmVhY2hwcm9qZWN0IH0gZnJvbSAnLi9wcm9qZWN0LmpzJ1xuaW1wb3J0IEhlYWRJbWFnZSBmcm9tJy4vaWNvbnMvbGludXhIZWFkLnBuZydcbmltcG9ydCBIb21lSWNvbiBmcm9tICcuL2ljb25zL0hvbWVCdXR0b25zLnN2ZydcbmltcG9ydCBhbGxUYXNrc2ljb24gZnJvbSAnLi9pY29ucy9UYXNrcy5zdmcnXG5pbXBvcnQgZGF0ZUljb24gZnJvbSAnLi9pY29ucy9hcnJhbmdlRGF0ZXMuc3ZnJ1xuaW1wb3J0IGNyZWF0ZVByb2plY3RzaWNvbiBmcm9tICcuL2ljb25zL2NyZWF0ZVByb2plY3Quc3ZnJ1xuaW1wb3J0IHByb2plY3RzSWNvbiBmcm9tICcuL2ljb25zL1Byb2plY3RzLnN2ZydcbmltcG9ydCB0b3BCb3hJbWFnZSBmcm9tICcuL2ltYWdlcy9naXJsLnN2ZydcbmltcG9ydCBtdXNpY2ltYWdlIGZyb20gJy4vaW1hZ2VzL211c2ljLnN2ZydcbmltcG9ydCBhZGRUYXNrSW1hZ2UgZnJvbSAnLi9pY29ucy9jcmVhdGVBZGQuc3ZnJ1xuaW1wb3J0IGJveXBhcGVycyBmcm9tICcuL2ltYWdlcy9jYXJyeWluZ3BhcGVycy5zdmcnXG5pbXBvcnQge2Zvcm1hdH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IHsgUHJvamVjdE1hbmFnZW1lbnQgfSBmcm9tICcuL2FkZC5qcydcbmltcG9ydCB7IGFsbE1hdGVyaWFscyB9IGZyb20gJy4vYWRkLmpzJ1xuaW1wb3J0IHsgc3BhY2VUcmF2ZWxzIH0gZnJvbSAnLi9hZGQuanMnXG5pbXBvcnQgeyBUYXNrTWFuYWdlbWVudCB9IGZyb20gJy4vYWRkLmpzJ1xuaW1wb3J0IGJyaWVmY2FzZVByb2plY3RzIGZyb20gJy4vaWNvbnMvYnJpZWZjYXNlLW91dGxpbmUuc3ZnJ1xuaW1wb3J0IG1lc3NhZ2VJY29uIGZyb20gJy4vaWNvbnMvbWVzc2FnZS1vdXRsaW5lLnN2ZydcbmltcG9ydCB7IHNoaWZ0UHJvamVjdCB9IGZyb20gJy4vcHJvamVjdC5qcydcbmltcG9ydCB7IGNvbXBsZXRlQnV0dG9uZm9yRWFjaFByb2plY3QgfSBmcm9tICcuL2NoZWNrLmpzJ1xuXG5jbGFzcyBjcmVhdGVFbGVtZW50dG9Eb217XG5cbiAgZG9tRWxlbWVudENyZWF0b3IodHlwZSxuZXdJZCxwYXJlbnRCb3gsV29yZHM9XCJcIixwbGFjZWhvbGRlcldvcmRzPVwiXCIpe1xuICAgIGxldCBuZXdFbGVtZW50PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSlcbiAgICBuZXdFbGVtZW50LmlkPW5ld0lkO1xuICAgIG5ld0VsZW1lbnQudGV4dENvbnRlbnQ9V29yZHNcbiAgICBuZXdFbGVtZW50LnBsYWNlaG9sZGVyPXBsYWNlaG9sZGVyV29yZHM7XG4gICAgcGFyZW50Qm94LmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xuICAgIFxuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICAgIFxuICAgIH1cbiAgICBJbWFnZUxvYWR0b0RPbShJY29uLHBhcmVudEJveCxpZE5hbWUpIHtcbiAgICBcbiAgICAgIGxldCBteUljb24gPSBuZXcgSW1hZ2UoKTtcbiAgICAgIG15SWNvbi5zcmMgPSBJY29uO1xuICAgICAgbXlJY29uLmlkPWlkTmFtZTtcbiAgICAgIHBhcmVudEJveC5hcHBlbmRDaGlsZChteUljb24pO1xuICAgIFxuICAgICAgcmV0dXJuIG15SWNvbjtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuXG5cbn1cblxubGV0IGRvbUVsZW1lbnRNYWtlcj1uZXcgY3JlYXRlRWxlbWVudHRvRG9tKCk7XG5cblxuXG5leHBvcnQgbGV0IHNpZGViYXI9KCgpPT57XG5cbmxldCBzaWRlcmJveD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJzaWRlYm94XCIsZG9jdW1lbnQuYm9keSk7XG5cbmxldCBhcHBUaXRsZUhvbGRlcj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJhcHBUaXRsZUhvbGRlclwiLHNpZGVyYm94KTtcblxubGV0IGFwcExvZ289ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKEhlYWRJbWFnZSxhcHBUaXRsZUhvbGRlcixcImFwcExvZ29cIilcblxubGV0IGFwcFRpdGxlPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigncCcsXCJhcHBUaXRsZVwiLGFwcFRpdGxlSG9sZGVyLFwiVWJ1bnR1IFRhc2tzXCIpO1xuXG5cblxuXG5sZXQgc2VjdGlvbj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJzZWN0aW9uXCIsc2lkZXJib3gpXG5cbmxldCBob21lQnV0dG9uPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignYnV0dG9uJyxcImhvbWVEaXZcIixzZWN0aW9uKTtcbmxldCBob21laWNvbj1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oSG9tZUljb24saG9tZUJ1dHRvbixcImhvbWVpY29uXCIpXG5sZXQgaG9tZVRleHQ9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdwJyxcImhvbWV0ZXh0XCIsaG9tZUJ1dHRvbixcIkhvbWVcIik7XG5cblxubGV0IERhdGVzQXJyYW5nZWRCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY2FsZW5kZXJcIixzZWN0aW9uKTtcbmxldCBEYXRlc2ljb249ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKGRhdGVJY29uLERhdGVzQXJyYW5nZWRCdXR0b24sXCJEYXRlc2ljb25cIilcbmxldCBEYXRlc1RleHQ9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdwJyxcImhvbWV0ZXh0XCIsRGF0ZXNBcnJhbmdlZEJ1dHRvbixcIkNhbGVuZGVyXCIpO1xuXG5sZXQgUHJvamVjdHNCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiUHJvamVjdHNcIixzZWN0aW9uKTtcbmxldCBQcm9qZWN0c0ljb249ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKHByb2plY3RzSWNvbixQcm9qZWN0c0J1dHRvbixcInByb2plY3RJY29uXCIpXG5sZXQgUHJvamVjdHNUZXh0PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigncCcsXCJQcm9qZWN0VGV4dFwiLFByb2plY3RzQnV0dG9uLFwiUHJvamVjdHNcIilcblxubGV0IGRpdlByb2plY3RzU2VjdGlvbj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJwcm9qZWN0c1NlY3Rpb25cIixzZWN0aW9uKVxuXG4gbGV0IGNyZWF0ZXByb2plY3RzQnV0dG9uPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignYnV0dG9uJyxcImNyZWF0ZXByb2plY3RzXCIsc2VjdGlvbik7XG5sZXQgY3JlYXRlUHJvamVjdHNJY29uPWRvbUVsZW1lbnRNYWtlci5JbWFnZUxvYWR0b0RPbShjcmVhdGVQcm9qZWN0c2ljb24sY3JlYXRlcHJvamVjdHNCdXR0b24sXCJjcmVhdGVwcm9qZWN0c2ljb25cIilcbmxldCBjcmVhdGVQcm9qZWN0PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigncCcsXCJwcm9qZWN0VGV4dFwiLGNyZWF0ZXByb2plY3RzQnV0dG9uLFwiQ3JlYXRlIFByb2plY3RzXCIpO1xuY3JlYXRlcHJvamVjdHNCdXR0b24udGl0bGU9XCJDcmVhdGUgUHJvamVjdFwiXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbnJldHVybiB7Y3JlYXRlcHJvamVjdHNCdXR0b24sc2lkZXJib3gsZGl2UHJvamVjdHNTZWN0aW9ufTtcblxufSkoKTtcblxuXG5cbmV4cG9ydCBsZXQgdG9wQmFyPSgoKT0+e1xuXG4gIGxldCB0b3BCb3g9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaXYnLCd0b3BCb3gnLGRvY3VtZW50LmJvZHkpO1xuIFxuICBsZXQgdG9wVGV4dD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ3AnLCd0b3BUZXh0Jyx0b3BCb3gsYEVuam95IHlvdXIgJHtmb3JtYXQobmV3IERhdGUoKSwgJ0VFRUUnKX1gKVxuICBsZXQgdG9wQm94aW1hZ2U9ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKHRvcEJveEltYWdlLHRvcEJveCwndG9wQm94aW1hZ2VnaXJsJyk7XG4gIGxldCBtdXNpY3BpYz1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20obXVzaWNpbWFnZSx0b3BCb3gsXCJtdXNpY2JveVwiKVxuICBsZXQgYm95d2l0aHBhcGVycz1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oYm95cGFwZXJzLHRvcEJveCxcImJveVdpdGhwYXBlcnNcIik7XG5cblxuXG4gIHJldHVybiB7dG9wQm94fTtcbn0pKCk7XG5cbmV4cG9ydCBsZXQgY3JlYXRlVGFza2ljb249KCgpPT57XG5cbiAgbGV0IGFkZFRhc2s9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiYWRkVGFza1wiLGRvY3VtZW50LmJvZHkpXG4gIGFkZFRhc2sudGl0bGU9XCJDcmVhdGUgbmV3IHRhc2tcIlxuXG4gIGxldCBhZGRUYXNrSWNvbj1kb21FbGVtZW50TWFrZXIuSW1hZ2VMb2FkdG9ET20oYWRkVGFza0ltYWdlLGFkZFRhc2ssXCJhZGR0YXNraWNvblwiKVxuXG5cblxucmV0dXJuIHthZGRUYXNrfVxufSkoKVxuXG5leHBvcnQgbGV0IGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcz17XG5cbiAgc2VjdGlvbjpcIkhvbWVcIlxuXG5cbn1cblxubGV0IGlucHV0Qm94Y3JlYXRlUHJvamVjdHM9KCgpPT57XG4gIGxldCBkaWFsb2dCb3g9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaWFsb2cnLFwiZGlhbG9nQ3JlYXRlUHJvamVjdFwiLHNpZGViYXIuc2lkZXJib3gpO1xuICBsZXQgbWVzc2FnZUJveGRpdj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2Zvcm0nLFwibWVzc2FnZUJveGRpdlwiLGRpYWxvZ0JveClcbiAgbWVzc2FnZUJveGRpdi5zZXRBdHRyaWJ1dGUoXCJtZXRob2RcIixcImRpYWxvZ1wiKTtcbiAgbGV0IFByb2plY3ROYW1lbGFiZWw9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdsYWJlbCcsXCJwcm9qZWN0TmFtZVwiLG1lc3NhZ2VCb3hkaXYpXG4gIFByb2plY3ROYW1lbGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsXCJwcm9qZWN0TmFtZWlucHV0XCIpO1xuICBsZXQgcHJvamVjdE5hbWVpbnB1dD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2lucHV0JyxcInByb2plY3ROYW1laW5wdXRcIixtZXNzYWdlQm94ZGl2KVxuICBwcm9qZWN0TmFtZWlucHV0LnBsYWNlaG9sZGVyPVwiR28gdG8gdGhlIE1vb25cIjtcblxuICBsZXQgYnV0dG9uc2Rpdj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJidXR0b25kaXZcIixtZXNzYWdlQm94ZGl2KVxuXG4gIGxldCBjYW5jZWxCdXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY2FuY2VsQnV0dG9uXCIsYnV0dG9uc2RpdixcIkNhbmNlbFwiKVxuICBsZXQgZG9uZUJ1dHRvbj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2J1dHRvbicsXCJkb25lQnV0dG9uXCIsYnV0dG9uc2RpdixcIkNyZWF0ZVwiKVxuXG4gIFxucmV0dXJuIHtkaWFsb2dCb3gsY2FuY2VsQnV0dG9uLGRvbmVCdXR0b24scHJvamVjdE5hbWVpbnB1dH1cbn0pKClcbmZ1bmN0aW9uIGRpc2FibGVidXR0b24oYnV0dG9uKXtcbiAgYnV0dG9uLmRpc2FibGVkPXRydWU7XG4gIFxuICBcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZvcm1mb3Jwcm9qZWN0cyhidXR0b24pe1xuXG4gICAgaW5wdXRCb3hjcmVhdGVQcm9qZWN0cygpO1xuICAgIGRpc2FibGVidXR0b24oYnV0dG9uKVxuXG5cblxuICB9XG5cbnNpZGViYXIuY3JlYXRlcHJvamVjdHNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uKGUpeyBcbiAgaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5kaWFsb2dCb3guc2hvd01vZGFsKCk7XG59KTtcblxuZnVuY3Rpb24gY2xlYXJBbGxFbGVtZW50cyhzZWxlY3Rvcil7XG5cbmxldCBob2xkZXJDb250YWluZXI9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgJHtzZWxlY3Rvcn0+KmApO1xuaG9sZGVyQ29udGFpbmVyLmZvckVhY2goZWxlbWVudCA9PiB7XG4gIGVsZW1lbnQucmVtb3ZlKCk7XG59KTtcblxuXG5cbn1cblxuZnVuY3Rpb24gZnJvbURvbXRvQWxscHJvamVjdHMoKVxue1xuICBpZiAoaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5wcm9qZWN0TmFtZWlucHV0LnZhbHVlPT09XCJcIil7XG5cbiAgICByZXR1cm5cbiAgIH1cbiAgICBcbiAgICBcbiAgICBsZXQgbmV3UHJvamVjdD1uZXcgUHJvamVjdE1hbmFnZW1lbnQuY3JlYXRlUHJvamVjdChpbnB1dEJveGNyZWF0ZVByb2plY3RzLnByb2plY3ROYW1laW5wdXQudmFsdWUpO1xuICAgIFByb2plY3RNYW5hZ2VtZW50LmFkZFRvQWxsUHJvamVjdHMobmV3UHJvamVjdCk7XG5cblxufVxuXG5mdW5jdGlvbiBhZGRQcm9qZWN0KCl7XG5cbmZyb21Eb210b0FsbHByb2plY3RzKCk7XG5jcmVhdGVCdXR0b25zRnJvbUFsbFByb2plY3RzKCk7XG5cbn1cblxuZnVuY3Rpb24gYmFsYW5jaW5ncHJvamVjdHMoKXtcbiAgYWRkUHJvamVjdCgpO1xuICBVcGRhdGVOdW1iZXJPZlByb2plY3RzKCk7XG5cbn1cblxuaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5kb25lQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbiAoZSkge1xuICBcbiAgYmFsYW5jaW5ncHJvamVjdHMoKTtcbiAgcHJvamVjdEJ1dHRvbnMoKVxuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIFxuICBpbnB1dEJveGNyZWF0ZVByb2plY3RzLmRpYWxvZ0JveC5jbG9zZSgpO1xuICBcbiAgIFxuICBcbiBcbn0pO1xuXG5leHBvcnQgbGV0IHN0eWxpbmdTbGVsZWN0ZWRCdXR0b25zPSgoKT0+e1xuICBmdW5jdGlvbiBtYWtpbmdUaGVCdXR0b25HbG93KGJ1dHRvbil7XG5cbiAgIGJ1dHRvbi5zdHlsZS5zZXRQcm9wZXJ0eShcImNvbG9yXCIsXCJ3aGl0ZVwiKVxuICAgYnV0dG9uLnN0eWxlLnNldFByb3BlcnR5KFwiYmFja2dyb3VuZC1jb2xvclwiLFwiI0YzOUMxMlwiKVxuICAgYnV0dG9uLnN0eWxlLnNldFByb3BlcnR5KFwidGV4dC1hbGlnblwiLFwiY2VudGVyXCIpO1xuICAgXG4gICBcbiAgIH1cbiAgIFxuICBmdW5jdGlvbiByZXR1cm5BbGxidXR0b25zdGx5ZXNUb2RlZmF1bHQoKXtcbiAgIFxuICAgICBsZXQgYWxsQnV0dG9ucz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcHJvamVjdCcpO1xuICAgXG4gICBhbGxCdXR0b25zLmZvckVhY2goQnV0dG9uPT57XG4gICBcbiAgIEJ1dHRvbi5zdHlsZS5zZXRQcm9wZXJ0eShcImJhY2tncm91bmQtY29sb3JcIixcInRyYW5zcGFyZW50XCIpO1xuICAgQnV0dG9uLnN0eWxlLnNldFByb3BlcnR5KFwiY29sb3JcIixcIiM4Mjg0ODlcIik7XG4gICBCdXR0b24uc3R5bGUuc2V0UHJvcGVydHkoXCJ0ZXh0LWFsaWduXCIsXCJsZWZ0XCIpO1xuICAgXG4gICB9KVxuICAgXG4gICBcbiAgIFxuICAgfVxuXG5cblxuXG5cbnJldHVybntyZXR1cm5BbGxidXR0b25zdGx5ZXNUb2RlZmF1bHQsbWFraW5nVGhlQnV0dG9uR2xvd31cbn0pKCkgXG5cbmxldCBjcmVhdGVUYXNrRGlhbG9nPSgoKT0+e1xuIFxuICBsZXQgZGlhbG9nVGFzaz1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpYWxvZycsXCJkaWFsb2dUYXNrXCIsZG9jdW1lbnQuYm9keSk7XG4gIGxldCBSZXF1aXJlbWVudHNGb3JtPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignZm9ybScsXCJtZXNzYWdlQm94ZGl2XCIsZGlhbG9nVGFzaylcblxuICBsZXQgVGFza0xhYmVsPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignbGFiZWwnLCdEYXRlTGFiZWwnLFJlcXVpcmVtZW50c0Zvcm0sXCJUYXNrIE5hbWVcIik7XG4gIFRhc2tMYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIixcIlRhc2tOYW1lXCIpXG4gIGxldCBUYXNrTmFtZT1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2lucHV0JyxcIlRhc2tOYW1lXCIsUmVxdWlyZW1lbnRzRm9ybSxudWxsLFwiVmVudXMgc3VtbWl0XCIpXG4gICAgXG4gIGxldCBEZXNjcmlwdGlvbkxhYmVsPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignbGFiZWwnLCdEYXRlTGFiZWwnLFJlcXVpcmVtZW50c0Zvcm0sXCJEZXNjcmlwdGlvblwiKTtcbiAgRGVzY3JpcHRpb25MYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIixcIlRhc2tEZXNjcmlwdGlvblwiKVxuICBsZXQgVGFza0Rlc2NyaXB0aW9uPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcigndGV4dGFyZWEnLFwiVGFza0Rlc2NyaXB0aW9uXCIsUmVxdWlyZW1lbnRzRm9ybSxudWxsLFwiVGFrZSB0aGUgbWFycyByb3ZlciBhdCB1YnVudHUgc3RhdGlvbiBcIilcbiAgVGFza0Rlc2NyaXB0aW9uLnJvd3M9NDtcbiAgVGFza0Rlc2NyaXB0aW9uLnNldEF0dHJpYnV0ZShcIm1heGxlbmd0aFwiLDQ1KTtcblxuICBsZXQgZGF0ZUxhYmVsPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignbGFiZWwnLCdEYXRlTGFiZWwnLFJlcXVpcmVtZW50c0Zvcm0sXCJEdWUgRGF0ZVwiKTtcbiAgZGF0ZUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLFwiRGF0ZVwiKVxuXG4gIGxldCBkYXRlPWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignaW5wdXQnLCdEYXRlJyxSZXF1aXJlbWVudHNGb3JtLFwiRGF0ZVwiLFwiRHVlIERhdGVcIik7XG4gIGRhdGUudHlwZT1cImRhdGVcIjsgXG5cbiAgbGV0IFByaW9yaXR5TGFiZWw9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdsYWJlbCcsXCJQcmlvcml0eUxhYmVsXCIsUmVxdWlyZW1lbnRzRm9ybSxcIlByaW9yaXR5XCIpO1xuICBQcmlvcml0eUxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLFwic2VsZWN0RHJvcERvd25cIilcbiAgbGV0IFByaW9yaXR5RHJvcGRvd249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdzZWxlY3QnLFwic2VsZWN0RHJvcERvd25cIixSZXF1aXJlbWVudHNGb3JtKVxuICBsZXQgT3B0aW9uSGlnaD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ29wdGlvbicsXCJvcHRpb25IaWdoXCIsUHJpb3JpdHlEcm9wZG93bixcIkhpZ2hcIik7XG4gIGxldCBPcHRpb25NZWRpdW09ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdvcHRpb24nLFwib3B0aW9uTWVkaXVtXCIsUHJpb3JpdHlEcm9wZG93bixcIk1lZGl1bVwiKVxuICBsZXQgT3B0aW9uTG93PWRvbUVsZW1lbnRNYWtlci5kb21FbGVtZW50Q3JlYXRvcignb3B0aW9uJyxcIm9wdGlvbkxvd1wiLFByaW9yaXR5RHJvcGRvd24sXCJMb3dcIilcblxuICBPcHRpb25IaWdoLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJIaWdoXCIpO1xuICBPcHRpb25NZWRpdW0uc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIk1lZGl1bVwiKTtcbiAgT3B0aW9uTG93LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJMb3dcIik7XG4gIE9wdGlvbk1lZGl1bS5zZWxlY3RlZD10cnVlO1xuXG4gIFRhc2tOYW1lLnJlcXVpcmVkPXRydWU7XG4gIFByaW9yaXR5RHJvcGRvd24ucmVxdWlyZWQ9dHJ1ZTtcbiAgZGF0ZS5yZXF1aXJlZD10cnVlO1xuICBUYXNrRGVzY3JpcHRpb24ucmVxdWlyZWQ9dHJ1ZTtcbiAgXG4gIFxubGV0IGJ1dHRvbkhvbGRlcj1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJidXR0b25Ib2xkZXJcIixkaWFsb2dUYXNrKVxubGV0IGNhbmNlbFRhc2s9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY2FuY2VsVGFza1wiLGJ1dHRvbkhvbGRlcixcIkNhbmNlbFwiKVxubGV0IGNyZWF0ZVRhc2s9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwiY3JlYXRlVGFza1wiLGJ1dHRvbkhvbGRlcixcIkNyZWF0ZVwiKVxuY3JlYXRlVGFzay50eXBlPVwiU3VibWl0XCI7XG5cblxuXG5yZXR1cm4ge2RpYWxvZ1Rhc2ssY2FuY2VsVGFzayxjcmVhdGVUYXNrLFRhc2tOYW1lLFRhc2tEZXNjcmlwdGlvbixQcmlvcml0eURyb3Bkb3duLGRhdGV9XG59KSgpO1xuXG5cbmNyZWF0ZVRhc2tpY29uLmFkZFRhc2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uIChlKSB7XG4gIGNyZWF0ZVRhc2tEaWFsb2cuZGlhbG9nVGFzay5zaG93TW9kYWwoKTtcbiAgXG59KVxuXG5mdW5jdGlvbiBjbG9zZVRhc2tkaWFsb2coKXtcblxuY3JlYXRlVGFza0RpYWxvZy5kaWFsb2dUYXNrLmNsb3NlKClcblxuXG59XG5cbmNyZWF0ZVRhc2tEaWFsb2cuY2FuY2VsVGFzay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsZnVuY3Rpb24gKGUpIHtcbiAgY2xvc2VUYXNrZGlhbG9nKCk7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbn0pXG5cbmZ1bmN0aW9uIGFkZFRhc2soKXtcblxuICBpZihjcmVhdGVUYXNrRGlhbG9nLlRhc2tOYW1lLnZhbHVlPT09XCJcInx8Y3JlYXRlVGFza0RpYWxvZy5UYXNrRGVzY3JpcHRpb24udmFsdWU9PT1cIlwifHxjcmVhdGVUYXNrRGlhbG9nLmRhdGUudmFsdWU9PT1cIlwiKXtcblxuICAgIHJldHVybiBcbiAgfVxubGV0IG5ld1Rhc2s9bmV3IFRhc2tNYW5hZ2VtZW50LmNyZWF0ZVRhc2soY3JlYXRlVGFza0RpYWxvZy5UYXNrTmFtZS52YWx1ZSxjcmVhdGVUYXNrRGlhbG9nLlRhc2tEZXNjcmlwdGlvbi52YWx1ZSxjcmVhdGVUYXNrRGlhbG9nLmRhdGUudmFsdWUsY3JlYXRlVGFza0RpYWxvZy5Qcmlvcml0eURyb3Bkb3duLnZhbHVlKVxuVGFza01hbmFnZW1lbnQuYWRkVGFza3RvUHJvamVjdChuZXdUYXNrKTtcblRhc2tNYW5hZ2VtZW50LmFkZGluZ1RvYWxsVGFza3MoKTtcblxuY29uc29sZS5sb2coYWxsTWF0ZXJpYWxzLmFsbFRhc2tzKTtcbmNyZWF0ZVRhc2tEaWFsb2cuZGlhbG9nVGFzay5jbG9zZSgpO1xuXG5cbn1cbi8vbW92ZSB0aGlzIHRvIGFkZC5qc1xuZXhwb3J0IGZ1bmN0aW9uIG5vdEhvbWVzZWN0aW9uKCl7XG5cbiAga25vd1doaWNoc2VjdGlvbmRpYWxvZ2lzLnNlY3Rpb249XCJub3RIb21lXCJcblxufVxuZnVuY3Rpb24ga25vd3NlY3Rpb24oKXtcblxuICBpZihrbm93V2hpY2hzZWN0aW9uZGlhbG9naXMuc2VjdGlvbj09PVwiSG9tZVwiKXtcbiAgICBjb25zb2xlLmxvZyhcIndlIGFyIGluXCIsa25vd1doaWNoc2VjdGlvbmRpYWxvZ2lzLnNlY3Rpb24pXG4gICAgc2V0dGluZ0FsbHRhc2tzaW5Ib21lKClcblxuICB9XG5cbn1cbmZ1bmN0aW9uIGVudGVyVGFzaygpIHtcbiAgYWRkVGFzaygpO1xuICBtb3ZpbmdUYXNrcy5wbGFjaW5nVGFza3MoKTtcbiAgbW92aW5nVGFza3MudXBkYXRlQWxsdGFza3MoKVxuICBrbm93c2VjdGlvbigpO1xuICBjb21wbGV0ZVRhc2subWFuYWdlQ2hlY2tib3goKTtcbiAgXG4gIFxufVxuXG5jcmVhdGVUYXNrRGlhbG9nLmNyZWF0ZVRhc2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uIChlKSB7XG5cbiAgZW50ZXJUYXNrKCk7XG5cbiAgXG59KVxuXG5cblxuaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5jYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLGZ1bmN0aW9uKGUpIHtcbiAgY3JlYXRlQnV0dG9uc0Zyb21BbGxQcm9qZWN0cygpO1xuICBcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBcbiAgaW5wdXRCb3hjcmVhdGVQcm9qZWN0cy5kaWFsb2dCb3guY2xvc2UoKTtcbiAgXG59KVxuXG5mdW5jdGlvbiByZWZyZXNoKCkge1xuICBsZXQgcHJvamVjdHM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3ROYW1lJyk7XG5cbiAgcHJvamVjdHMuZm9yRWFjaChwcm9qZWN0cz0+e1xuICAgIGNvbnNvbGUubG9nKHByb2plY3RzKTtcbiAgICBwcm9qZWN0cy5yZW1vdmUoKVxuXG4gIH0pXG4gIFxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25zRnJvbUFsbFByb2plY3RzKCl7XG5cbiAgcmVmcmVzaCgpO1xuXG4gIGxldCBhcnJheU9mcHJvamVjdHM9YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IGFycmF5T2Zwcm9qZWN0cy5sZW5ndGg7IGkrKykge1xuIGxldCBidXR0b249ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdidXR0b24nLFwicHJvamVjdFwiLHNpZGViYXIuZGl2UHJvamVjdHNTZWN0aW9uLFwiPiBcIithcnJheU9mcHJvamVjdHNbaV0ucHJvamVjdFRpdGxlKVxuIGlmKGk9PT1UYXNrTWFuYWdlbWVudC5wcm9qZWN0UG9zLnBvc2l0aW9uKXtcbiAgICBzdHlsaW5nU2xlbGVjdGVkQnV0dG9ucy5tYWtpbmdUaGVCdXR0b25HbG93KGJ1dHRvbilcbiB9IFxuIGJ1dHRvbi5jbGFzc05hbWU9XCJwcm9qZWN0TmFtZVwiIDtcblxufVxuXG5cblxuXG5cbn1cbmNyZWF0ZUJ1dHRvbnNGcm9tQWxsUHJvamVjdHMoKTtcbmZ1bmN0aW9uIGNsb3NlQWRkdGFzaygpIHtcbiAgXG4gIFxufVxuXG5sZXQgY29udGVudFRvYmV1cGRhdGVkQ2hhbmdpbmdQcm9qZWN0cz0oKCk9PntcblxubGV0IGNvbnRlbnQ9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaXYnLCdjb250ZW50VG9iZVVwZGF0ZWQnLGRvY3VtZW50LmJvZHkpXG5cblxuXG5yZXR1cm4ge2NvbnRlbnR9O1xufSkoKVxuXG5cblxuXG4gIGZ1bmN0aW9uIGNvbnRlbnRCb3hlbGVtZW50TWFrZXIodHlwZSxuZXdJZCxwYXJlbnRCb3gsV29yZHM9XCJcIixwbGFjZWhvbGRlcldvcmRzPVwiXCIsY2xhc3NUaXRsZT1cImNvbnRlbnRUb1JlbW92ZVwiKXtcbiAgICBsZXQgZWxlbWVudD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IodHlwZSxuZXdJZCxwYXJlbnRCb3gsV29yZHMscGxhY2Vob2xkZXJXb3Jkcz1cIlwiKVxuICAgIGVsZW1lbnQuY2xhc3NOYW1lPWNsYXNzVGl0bGU7XG5cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG5cblxuXG5cblxuXG5cblxubGV0IHN0YXRpc3RpY3M9KCgpPT57XG5cbiAgZnVuY3Rpb24gbWFrZVN0YXRpc3RpY3MoKSB7XG4gICAgbGV0IHN0YXRpc3RpY3NIb2xkZXJib3g9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxcInN0YXRpc3RpY3NIb2xkZXJib3hcIixjb250ZW50VG9iZXVwZGF0ZWRDaGFuZ2luZ1Byb2plY3RzLmNvbnRlbnQpXG4gICAgbGV0IGNhcmROYW1lcz1bXCJDdXJyZW50IFByb2plY3RzXCIsXCJDdXJyZW50IFRhc2tzXCIsXCJDb21wbGV0ZWQgVGFza3NcIl07XG4gICAgbGV0IG5hbWVzT2ZTdGF0cz1bXCJpbmZvcm1hdGlvbk9mUHJvamVjdHNIb2xkZXJcIixcImluZm9tYXRpb25PZlRhc2tzSG9sZGVyXCIsXCJpbmZvcm1hdGlvbk9mY29tcGxldGVkVGFza3NIb2xkZXJcIl1cbiAgICBsZXQgY2FyZERldGFpbHM9W1wicHJvamVjdE51bWJlclwiLFwiVGFza051bWJlclwiLFwiY29tcGxldGVkTnVtYmVyXCJdXG4gICAgbGV0IGljb25zPVticmllZmNhc2VQcm9qZWN0cyxtZXNzYWdlSWNvbixhbGxUYXNrc2ljb25dXG4gICAgbGV0IGlkTmFtZXM9W1wibnVtYmVyT2ZQcm9qZWN0c2RpdlwiLFwibnVtYmVyT2ZUYXNrc2RpdlwiLFwiY29tcGxldGVkVGFza3NcIl1cbiAgICBsZXQgc3RhdGljc09mY2FyZD1bYWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aCxhbGxNYXRlcmlhbHMuYWxsVGFza3MubGVuZ3RoLDBdXG4gICAgbGV0IHNwZWNpZmljTmFtZWZvckVudHJ5PVtcInByb2plY3REZXRhaWxzXCIsXCJUYXNrRGV0YWlsc1wiLFwiY29tcGxldGVkVGFza1wiXTtcbiAgICBsZXQgYmFja2Ryb3BzPVtcInByb2plY3RzQmFja2Ryb3BcIixcInRhc2tzQmFja2Ryb3BcIixcImNvbXBsZXRlZEJhY2tkcm9wXCJdXG4gICAgXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2FyZE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNhcmRESVY9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxpZE5hbWVzW2ldLHN0YXRpc3RpY3NIb2xkZXJib3gpO1xuICAgIGxldCBpbmZvcm1hdGlvbkhvbGRlcj1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdkaXYnLG5hbWVzT2ZTdGF0c1tpXSxjYXJkRElWKTtcbiAgICBsZXQgaW5mb09mQ2FyZD1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdwJyxjYXJkRGV0YWlsc1tpXSxpbmZvcm1hdGlvbkhvbGRlcixzdGF0aWNzT2ZjYXJkW2ldKTtcbiAgICBsZXQgUHJvamVjdERldGFpbHM9Y29udGVudEJveGVsZW1lbnRNYWtlcigncCcsc3BlY2lmaWNOYW1lZm9yRW50cnlbaV0saW5mb3JtYXRpb25Ib2xkZXIsY2FyZE5hbWVzW2ldKTtcbiAgICBsZXQgSWNvbkRpdj1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdkaXYnLFwiaWNvbkRpdlwiLGNhcmRESVYpO1xuICAgIGxldCBpY29uSW1hZ2U9ZG9tRWxlbWVudE1ha2VyLkltYWdlTG9hZHRvRE9tKGljb25zW2ldLEljb25EaXYsXCJpY29uU3RhdGljc1wiKTtcbiAgICBsZXQgaWNvbkltYWdlQmFja2Ryb3A9ZG9tRWxlbWVudE1ha2VyLmRvbUVsZW1lbnRDcmVhdG9yKCdkaXYnLGJhY2tkcm9wc1tpXSxJY29uRGl2KVxuICB9XG4gIH1cbiAgbWFrZVN0YXRpc3RpY3MoKTtcbiAgXG4gIFxuXG4gIFxuICBcbiBcbiAgXG5yZXR1cm57bWFrZVN0YXRpc3RpY3N9XG59KSgpXG5cbmZ1bmN0aW9uIFVwZGF0ZU51bWJlck9mUHJvamVjdHMoKSB7XG4gIGlmKGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uPT09XCJIb21lXCIpe1xuICBsZXQgUHJvamVjdE51bWJlcj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJvamVjdE51bWJlcicpXG4gIFByb2plY3ROdW1iZXIudGV4dENvbnRlbnQ9YWxsTWF0ZXJpYWxzLmFsbFByb2plY3RzLmxlbmd0aDtcbiAgfVxufVxubGV0IG1vdmluZ1Rhc2tzPSgoKT0+e1xuICBmdW5jdGlvbiBtYWtlVGFza2JveCgpIHtcbiAgICBcbiAgbGV0IFRhc2tCb3g9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxcIlRhc2tCb3hcIixjb250ZW50VG9iZXVwZGF0ZWRDaGFuZ2luZ1Byb2plY3RzLmNvbnRlbnQpXG4gIHJldHVybiBUYXNrQm94XG4gIH1cbiAgIFxuICBsZXQgdGFza2NhcmRzPSgoe3RpdGxlLGRlc2NyaXB0aW9uLGRhdGUscHJpb3JpdHksc3RhdHVzfSxUYXNrQm94PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNUYXNrQm94JykpPT57XG5cbiAgICBsZXQgdGFza0Rpdj1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdkaXYnLFwiVGFza0RpdlwiLFRhc2tCb3gpXG4gICAgXG4gICAgbGV0IGRhdGVEaXY9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxcImRhdGVEaXZcIix0YXNrRGl2KVxuICBcbiAgICBsZXQgRGF0ZT1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdwJyxcImRheXNSZW1haW5pbmdcIixkYXRlRGl2LGRhdGUpO1xuICAgIGxldCB0YXNrVGl0bGU9Y29udGVudEJveGVsZW1lbnRNYWtlcigncCcsXCJ0YXNrVGl0bGVcIix0YXNrRGl2LHRpdGxlKTtcbiAgICBsZXQgRGVzY3JpcHRpb25UYXNrPWNvbnRlbnRCb3hlbGVtZW50TWFrZXIoJ3AnLFwiZXhwbGFpbmF0aW9uVGFza1wiLHRhc2tEaXYsZGVzY3JpcHRpb24pXG4gICAgbGV0IGJ1dHRvbnNNYW5pcHVsYXRpb25EaXY9Y29udGVudEJveGVsZW1lbnRNYWtlcignZGl2JyxcImJ1dHRvbnNNYW5pcHVsYXRpb25EaXZcIix0YXNrRGl2KVxuICAgIGxldCBQcmlvcml0eVRhZz1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdidXR0b24nLFwiUHJpb3RyaXR5XCIsYnV0dG9uc01hbmlwdWxhdGlvbkRpdixwcmlvcml0eSlcbiAgICBsZXQgZWRpdD1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdidXR0b24nLFwiZWRpdFRhc2tcIixidXR0b25zTWFuaXB1bGF0aW9uRGl2LFwiZWRpdFwiKTtcbiAgICBsZXQgY29tcGxldGU9Y29udGVudEJveGVsZW1lbnRNYWtlcignaW5wdXQnLFwiY29tcGxldGVUYXNrXCIsYnV0dG9uc01hbmlwdWxhdGlvbkRpdixzdGF0dXMpO1xuICAgIC8vcmUtZmFjdG9yIHRoaXMgbWFrZSBhIGZuXG4gICAgaWYgKHN0YXR1cz09PVwiZG9uZVwiKXtcblxuICAgICBjb21wbGV0ZS5jaGVja2VkPXRydWU7XG4gICAgIHRhc2tUaXRsZS5zdHlsZS5zZXRQcm9wZXJ0eShcInRleHQtZGVjb3JhdGlvblwiLFwibGluZS10aHJvdWdoXCIpXG4gICAgIERlc2NyaXB0aW9uVGFzay5zdHlsZS5zZXRQcm9wZXJ0eShcInRleHQtZGVjb3JhdGlvblwiLFwibGluZS10aHJvdWdoXCIpXG4gICAgfVxuXG4gIFxuICAgIGNvbXBsZXRlLnR5cGU9XCJjaGVja2JveFwiO1xuICAgIGNvbXBsZXRlLnRpdGxlPVwidG9vZ2xlIGNvbXBsZXRlXCJcbiAgICB0YXNrRGl2LmNsYXNzTmFtZT1cInRhc2tcIjtcbiAgICBkYXRlRGl2LmNsYXNzTmFtZT1cInRhc2tcIjtcbiAgICBEYXRlLmNsYXNzTmFtZT1cInRhc2tcIjtcbiAgICB0YXNrVGl0bGUuY2xhc3NOYW1lPVwidGFza1wiO1xuICAgIERlc2NyaXB0aW9uVGFzay5jbGFzc05hbWU9XCJ0YXNrXCI7XG4gICAgYnV0dG9uc01hbmlwdWxhdGlvbkRpdi5jbGFzc05hbWU9XCJ0YXNrXCI7XG4gICAgUHJpb3JpdHlUYWcuY2xhc3NOYW1lPVwidGFza1wiO1xuICAgIGVkaXQuY2xhc3NOYW1lPVwidGFza1wiO1xuICAgIGNvbXBsZXRlLmNsYXNzTmFtZT1cInRhc2tcIjtcbiAgXG4gIFxuICBcbiAgXG4gIFxuICB9KTtcbiAgXG4gIGZ1bmN0aW9uIHBsYWNpbmdUYXNrcygpIHtcbiAgICBjbGVhclRhc2tCb3goKTtcbiAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbVGFza01hbmFnZW1lbnQucHJvamVjdFBvcy5wb3NpdGlvbl0ucHJvamVjdExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB0YXNrPWFsbE1hdGVyaWFscy5hbGxQcm9qZWN0c1tUYXNrTWFuYWdlbWVudC5wcm9qZWN0UG9zLnBvc2l0aW9uXS5wcm9qZWN0TGlzdFtpXTtcbiAgICAgIGNvbnNvbGUubG9nKHRhc2spXG5cbiAgICAgIFxuICAgICB0YXNrY2FyZHModGFzayk7XG4gICAgIFxuICAgIH1cbiAgICBcbiAgfVxuICBcbiAgZnVuY3Rpb24gY2xlYXJUYXNrQm94KCl7XG4gIFxuICAgIGxldCBhbGxUYXNrc2NhcmRzPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrJyk7XG4gICAgYWxsVGFza3NjYXJkcy5mb3JFYWNoKGFsbFRhc2tzY2FyZHM9PntcbiAgICAgIGFsbFRhc2tzY2FyZHMucmVtb3ZlKCk7XG4gICAgfSlcbiAgXG4gIFxuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUFsbHRhc2tzKCkge1xuICAgIGlmKGtub3dXaGljaHNlY3Rpb25kaWFsb2dpcy5zZWN0aW9uPT09XCJIb21lXCIpe1xuICAgICAgbGV0IG51bWJlck9mdGFza3M9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI1Rhc2tOdW1iZXInKVxuICAgICAgbnVtYmVyT2Z0YXNrcy50ZXh0Q29udGVudD1hbGxNYXRlcmlhbHMuYWxsVGFza3MubGVuZ3RoO1xuXG4gICAgfVxuICAgXG4gIH1cblxuXG5cbnJldHVybntwbGFjaW5nVGFza3MsdXBkYXRlQWxsdGFza3MsbWFrZVRhc2tib3gsdGFza2NhcmRzfTtcbn0pKClcbmxldCB0YXNrQm94dG9rZWVwVGFza3M9KCgpPT57XG5sZXQgVGFza0JveD1jb250ZW50Qm94ZWxlbWVudE1ha2VyKCdkaXYnLFwiVGFza0JveFwiLGNvbnRlbnRUb2JldXBkYXRlZENoYW5naW5nUHJvamVjdHMuY29udGVudCk7XG5cblxucmV0dXJuIHtUYXNrQm94fTtcbn0pKClcblxuXG5cbmV4cG9ydCBsZXQgZGVmYXVsdFByb2plY3RCdXR0b249KCgpPT57XG4gIGxldCBwcm9qZWN0QnV0dG9uPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNwcm9qZWN0Jyk7XG5cbiAgbGV0IGRlZmF1bHRQcm9qZWN0PXByb2plY3RCdXR0b25bMF1cblxuXG5yZXR1cm57ZGVmYXVsdFByb2plY3R9XG59KSgpXG5cbiBmdW5jdGlvbiBwcm9qZWN0QnV0dG9ucygpe1xuICBsZXQgYWxscHJvamVjdEJ1dHRvbnM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3Byb2plY3QnKTtcbiBcbiAgbGV0IGluZGV4PTA7XG4gIGFsbHByb2plY3RCdXR0b25zLmZvckVhY2gocHJvamVjdEJ1dHRvbj0+e1xuICAgXG4gICAgXG4gICAgICBsZXQgVGFza1BsYWNpbmc9bmV3IFRhc2tpbmVhY2hwcm9qZWN0KHByb2plY3RCdXR0b24saW5kZXgpXG4gICAgICBcbiAgICAgaW5kZXgrKztcblxuICAgIFxuXG4gICAgXG5cblxuICB9KVxuXG5cbn1cblxucHJvamVjdEJ1dHRvbnMoKTtcblxuZXhwb3J0IGxldCBtb3Zpbmdmcm9tT25lcHJvamVjdHRvYW5vdGhlcj0oKCk9PntcblxuICBmdW5jdGlvbiByZWZyZXNoVGFza0JveCgpe1xuICAgICAgbGV0IGFsbEVsZW1lbnRzPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250ZW50VG9SZW1vdmUnKTtcbiAgICAgIGFsbEVsZW1lbnRzLmZvckVhY2goZWxlbWVudD0+e1xuXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKClcblxuICAgICAgfSlcbiAgICAgIGxldCBhbGx0YXNrcz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFzaycpXG4gICAgICBhbGx0YXNrcy5mb3JFYWNoKGVsZW1lbnQ9PntcblxuICAgICAgICBlbGVtZW50LnJlbW92ZSgpXG4gICAgICB9KVxuICAgICAgZnVuY3Rpb24gVGFza0JveGNsZWFudXAoKSB7XG4gICAgICAgIGxldCBUYXNrQm94PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNUYXNrQm94JylcbiAgICAgICAgVGFza0JveC5mb3JFYWNoKFRhc2tCb3g9PntcbiAgICAgICAgICBUYXNrQm94LnJlbW92ZSgpO1xuICAgICAgXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgIFRhc2tCb3hjbGVhbnVwKCk7XG4gICAgICBcblxuXG4gIH1cblxuXG5cbnJldHVybiB7cmVmcmVzaFRhc2tCb3gsVGFza0JveGNsZWFudXB9O1xufSkoKVxuXG5cbmxldCBIb21lYnV0dG9uPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNob21lRGl2Jyk7XG5cbmZ1bmN0aW9uIGhvbWVCdXR0b25SZXNldCgpIHtcbiAgbW92aW5nZnJvbU9uZXByb2plY3R0b2Fub3RoZXIucmVmcmVzaFRhc2tCb3goKTtcbiAgICBzdGF0aXN0aWNzLm1ha2VTdGF0aXN0aWNzKCk7XG4gICAgbW92aW5nVGFza3MubWFrZVRhc2tib3goKTtcbiAgICBVcGRhdGVOdW1iZXJPZlByb2plY3RzKClcblxuICAgIC8vIG1vdmluZ1Rhc2tzLnBsYWNpbmdUYXNrcygpO1xuICAgIC8vIG1vdmluZ1Rhc2tzLnVwZGF0ZUFsbHRhc2tzKCk7XG4gICAga25vd1doaWNoc2VjdGlvbmRpYWxvZ2lzLnNlY3Rpb249XCJIb21lXCI7XG4gICAga25vd3NlY3Rpb24oKTtcbiAgICBjb21wbGV0ZVRhc2subWFuYWdlQ2hlY2tib3goKTtcbiAgICAvLyBzZXR0aW5nQWxsdGFza3NpbkhvbWUoKVxufVxuXG5Ib21lYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbihlKXtcblxuICBob21lQnV0dG9uUmVzZXQoKTtcblxufSlcblxuZXhwb3J0IGxldCBwcm9qZWN0QnV0dG9uQWN0aW9uc1RvZ2l2ZVRhc2tzPSgoKT0+e1xuXG5cbiAgZnVuY3Rpb24gY3JlYXRlVGFza0JveGZvclByb2plY3QoKXtcblxuICAgIGxldCBUYXNrQm94Zm9yUHJvamVjdD1kb21FbGVtZW50TWFrZXIuZG9tRWxlbWVudENyZWF0b3IoJ2RpdicsXCJUYXNrQm94XCIsZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnRUb2JlVXBkYXRlZCcpKTtcbiAgICBUYXNrQm94Zm9yUHJvamVjdC5jbGFzc05hbWU9XCIuY29udGVudFRvUmVtb3ZlXCI7XG4gICAgXG4gICAgXG4gICAgcmV0dXJuIFRhc2tCb3hmb3JQcm9qZWN0XG4gICAgfVxuXG4gIGZ1bmN0aW9uIG5hdmlnYXRpbmdUaGVQcm9qZWN0QW5kR2l2aW5nVGFza3MoaW5kZXgpe1xuICAgXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8ICBhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaW5kZXhdLnByb2plY3RMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBcbiAgICAgIG1vdmluZ1Rhc2tzLnRhc2tjYXJkcyhhbGxNYXRlcmlhbHMuYWxsUHJvamVjdHNbaW5kZXhdLnByb2plY3RMaXN0W2ldKVxuICAgICAgXG4gICAgfVxuXG5cblxuXG5cbiAgfVxuXG5cblxucmV0dXJuIHtjcmVhdGVUYXNrQm94Zm9yUHJvamVjdCxuYXZpZ2F0aW5nVGhlUHJvamVjdEFuZEdpdmluZ1Rhc2tzfVxufSkoKVxuZnVuY3Rpb24gVGFza0JveGNsZWFudXAoKSB7XG4gIGxldCBUYXNrQm94PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrJylcbiAgVGFza0JveC5mb3JFYWNoKFRhc2tCb3g9PntcbiAgICBUYXNrQm94LnJlbW92ZSgpO1xuXG4gIH0pXG59XG4vLyBtb3ZpbmdUYXNrcy5tYWtlVGFza2JveCgpO1xuZnVuY3Rpb24gc2V0dGluZ0FsbHRhc2tzaW5Ib21lKCkge1xuVGFza0JveGNsZWFudXAoKTtcbmNvbnNvbGUubG9nKFwiaGVsbG9cIik7XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgYWxsTWF0ZXJpYWxzLmFsbFRhc2tzLmxlbmd0aDsgaSsrKSB7XG4gIGNvbnNvbGUubG9nKGFsbE1hdGVyaWFscy5hbGxUYXNrc1tpXSk7XG4gbW92aW5nVGFza3MudGFza2NhcmRzKGFsbE1hdGVyaWFscy5hbGxUYXNrc1tpXSlcbiAgXG59XG5cblxuICBcbn1cblxuc2V0dGluZ0FsbHRhc2tzaW5Ib21lKCk7XG5cbmV4cG9ydCBsZXQgY29tcGxldGVUYXNrPSgoKT0+e1xuXG4gIGZ1bmN0aW9uIG1hbmFnZUNoZWNrYm94KCkge1xuICAgIGxldCBpbmRleD0wO1xubGV0IGNoZWNrYm94T2Zjb21wbGV0ZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjY29tcGxldGVUYXNrJyk7XG5cbmNoZWNrYm94T2Zjb21wbGV0ZS5mb3JFYWNoKGNoZWNrYm94PT57XG5cbiAgbGV0IGNvbXBsZXRlPW5ldyBjb21wbGV0ZUJ1dHRvbmZvckVhY2hQcm9qZWN0KGNoZWNrYm94LGluZGV4KVxuICBpbmRleCsrO1xufSlcbiAgICBcbiAgfVxuXG5cblxuXG5cbnJldHVybiB7bWFuYWdlQ2hlY2tib3h9XG5cbn0pKClcblxuZXhwb3J0IGxldCBzdHJpa2VPdXRlZmZlY3Q9KCgpPT57XG5cbiAgZnVuY3Rpb24gc3RyaWtlb3V0V29yZHMocG9zaXRpb24sY2hvc2VuU3R5bGU9XCJsaW5lLXRocm91Z2hcIikge1xuICAgIGxldCBhbGxUYXNrdGl0bGVzPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyN0YXNrVGl0bGUnKVxuICAgIGxldCBleHBsYWluYXRpb25UYXNrPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNleHBsYWluYXRpb25UYXNrJylcblxuICAgIGFsbFRhc2t0aXRsZXNbcG9zaXRpb25dLnN0eWxlLnNldFByb3BlcnR5KFwidGV4dC1kZWNvcmF0aW9uXCIsY2hvc2VuU3R5bGUpO1xuICAgIGV4cGxhaW5hdGlvblRhc2tbcG9zaXRpb25dLnN0eWxlLnNldFByb3BlcnR5KFwidGV4dC1kZWNvcmF0aW9uXCIsY2hvc2VuU3R5bGUpO1xuICB9XG4gIFxuXG5cblxucmV0dXJuIHtzdHJpa2VvdXRXb3Jkc31cbn0pKClcblxuXG5mdW5jdGlvbiBrZWVwaW5nU3RyaWtlT3V0KHtzdGF0dXN9LCkge1xuICBcbn0iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImxvY2FscyIsImFsbE1hdGVyaWFscyIsImFsbFByb2plY3RzIiwiYWxsVGFza3MiLCJQcm9qZWN0TWFuYWdlbWVudCIsImNvbnN0cnVjdG9yIiwicHJvamVjdFRpdGxlIiwicHJvamVjdExpc3QiLCJOZXdQcm9qZWN0IiwiVGFza01hbmFnZW1lbnQiLCJwcm9qZWN0UG9zIiwicG9zaXRpb24iLCJjcmVhdGVUYXNrIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJwcmlvcml0eSIsInN0YXR1cyIsImZpbmRpbmdUYXNrIiwiVGFza05hbWUiLCJ4IiwiY29uc29sZSIsImxvZyIsImFkZFRhc2t0b1Byb2plY3QiLCJ0YXNrIiwicHJvamVjdCIsImFkZGluZ1RvYWxsVGFza3MiLCJ1bmtub3duVGFrcyIsInNwYWNlVHJhdmVscyIsIlRhc2tpbmVhY2hwcm9qZWN0IiwicHJvamVjdEJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJub3RIb21lc2VjdGlvbiIsInN0eWxpbmdTbGVsZWN0ZWRCdXR0b25zIiwicmV0dXJuQWxsYnV0dG9uc3RseWVzVG9kZWZhdWx0IiwibWFraW5nVGhlQnV0dG9uR2xvdyIsIm1vdmluZ2Zyb21PbmVwcm9qZWN0dG9hbm90aGVyIiwicmVmcmVzaFRhc2tCb3giLCJwcm9qZWN0QnV0dG9uQWN0aW9uc1RvZ2l2ZVRhc2tzIiwiY3JlYXRlVGFza0JveGZvclByb2plY3QiLCJuYXZpZ2F0aW5nVGhlUHJvamVjdEFuZEdpdmluZ1Rhc2tzIiwiY29tcGxldGVUYXNrIiwibWFuYWdlQ2hlY2tib3giLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwicHJvdG90eXBlIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwiVHlwZUVycm9yIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmd1bWVudHMiLCJhcmdTdHIiLCJPYmplY3QiLCJjYWxsIiwiRGF0ZSIsImdldFRpbWUiLCJ3YXJuIiwic3RhY2siLCJOYU4iLCJ0b0ludGVnZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsIk51bWJlciIsImlzTmFOIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZGlydHlEYXRlIiwiZGF5IiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRVVENGdWxsWWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJkZWZhdWx0T3B0aW9ucyIsImdldERlZmF1bHRPcHRpb25zIiwic3RhcnRPZlVUQ1dlZWsiLCJfcmVmIiwiX3JlZjIiLCJfcmVmMyIsIl9vcHRpb25zJHdlZWtTdGFydHNPbiIsIl9vcHRpb25zJGxvY2FsZSIsIl9vcHRpb25zJGxvY2FsZSRvcHRpbyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbCIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDIiLCJ3ZWVrU3RhcnRzT24iLCJsb2NhbGUiLCJSYW5nZUVycm9yIiwiZ2V0VVRDV2Vla1llYXIiLCJfb3B0aW9ucyRmaXJzdFdlZWtDb24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ24iLCJvdXRwdXQiLCJhYnMiLCJ0b2tlbiIsInNpZ25lZFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicG93IiwiRyIsImxvY2FsaXplIiwiZXJhIiwid2lkdGgiLCJ5Iiwib3JkaW5hbE51bWJlciIsInVuaXQiLCJsaWdodEZvcm1hdHRlcnMiLCJZIiwic2lnbmVkV2Vla1llYXIiLCJ3ZWVrWWVhciIsIlIiLCJ1IiwiUSIsInF1YXJ0ZXIiLCJjb250ZXh0IiwicSIsIk0iLCJMIiwidyIsIndlZWsiLCJmaXJzdFdlZWsiLCJzdGFydE9mVVRDV2Vla1llYXIiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImZvdXJ0aE9mSmFudWFyeSIsInN0YXJ0T2ZVVENJU09XZWVrWWVhciIsImdldFVUQ0lTT1dlZWsiLCJkIiwiRCIsImRheU9mWWVhciIsInRpbWVzdGFtcCIsInNldFVUQ01vbnRoIiwiZGlmZmVyZW5jZSIsImdldFVUQ0RheU9mWWVhciIsIkUiLCJkYXlPZldlZWsiLCJsb2NhbERheU9mV2VlayIsImMiLCJpc29EYXlPZldlZWsiLCJhIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZGF5UGVyaW9kIiwidG9Mb3dlckNhc2UiLCJiIiwiaG91cnMiLCJCIiwiaCIsIkgiLCJLIiwibSIsInMiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJPIiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsInoiLCJ0Iiwib3JpZ2luYWxEYXRlIiwiVCIsIm9mZnNldCIsImRpcnR5RGVsaW1pdGVyIiwiYWJzT2Zmc2V0IiwibWludXRlcyIsImRlbGltaXRlciIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsImZvcm1hdExvbmciLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsInRpbWUiLCJwIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZSIsInByb3RlY3RlZERheU9mWWVhclRva2VucyIsInByb3RlY3RlZFdlZWtZZWFyVG9rZW5zIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImZvcm1hdCIsImlucHV0IiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0cyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsInZhbHVlc0FycmF5IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsIl9vcHRpb25zIiwicmVtMTAwIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJ2YWx1ZSIsIm1hdGNoZWRTdHJpbmciLCJwYXJzZVBhdHRlcm5zIiwiZGVmYXVsdFBhcnNlV2lkdGgiLCJrZXkiLCJBcnJheSIsImlzQXJyYXkiLCJhcnJheSIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsIm9iamVjdCIsImhhc093blByb3BlcnR5IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0IiwicGFyc2VQYXR0ZXJuIiwicGFyc2VJbnQiLCJwYXJzZVJlc3VsdCIsImFueSIsImNvZGUiLCJmb3JtYXREaXN0YW5jZSIsInRva2VuVmFsdWUiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZGlydHlGb3JtYXRTdHIiLCJfcmVmNCIsIl9vcHRpb25zJGxvY2FsZTIiLCJfb3B0aW9ucyRsb2NhbGUyJG9wdGkiLCJfcmVmNSIsIl9yZWY2IiwiX3JlZjciLCJfb3B0aW9ucyRsb2NhbGUzIiwiX29wdGlvbnMkbG9jYWxlMyRvcHRpIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDQiLCJmb3JtYXRTdHIiLCJkZWZhdWx0TG9jYWxlIiwiaXNEYXRlIiwiaXNWYWxpZCIsInV0Y0RhdGUiLCJVVEMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwiZGlydHlBbW91bnQiLCJhbW91bnQiLCJhZGRNaWxsaXNlY29uZHMiLCJzdWJNaWxsaXNlY29uZHMiLCJmb3JtYXR0ZXJPcHRpb25zIiwic3Vic3RyaW5nIiwiZmlyc3RDaGFyYWN0ZXIiLCJsb25nRm9ybWF0dGVyIiwibWF0Y2hlZCIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsImluZGV4T2YiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwiaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiIsImNvbXBsZXRlQnV0dG9uZm9yRWFjaFByb2plY3QiLCJUYXNrQnV0dG9uIiwiY2hlY2tlZCIsImtub3dXaGljaHNlY3Rpb25kaWFsb2dpcyIsInNlY3Rpb24iLCJwcm9qZWN0Qm94Iiwic3RyaWtlT3V0ZWZmZWN0Iiwic3RyaWtlb3V0V29yZHMiLCJkb21FbGVtZW50TWFrZXIiLCJkb21FbGVtZW50Q3JlYXRvciIsInR5cGUiLCJuZXdJZCIsInBhcmVudEJveCIsIldvcmRzIiwicGxhY2Vob2xkZXJXb3JkcyIsIm5ld0VsZW1lbnQiLCJ0ZXh0Q29udGVudCIsInBsYWNlaG9sZGVyIiwiSW1hZ2VMb2FkdG9ET20iLCJJY29uIiwiaWROYW1lIiwibXlJY29uIiwiSW1hZ2UiLCJzcmMiLCJzaWRlYmFyIiwic2lkZXJib3giLCJib2R5IiwiYXBwVGl0bGVIb2xkZXIiLCJob21lQnV0dG9uIiwiRGF0ZXNBcnJhbmdlZEJ1dHRvbiIsIlByb2plY3RzQnV0dG9uIiwiZGl2UHJvamVjdHNTZWN0aW9uIiwiY3JlYXRlcHJvamVjdHNCdXR0b24iLCJjcmVhdGVUYXNraWNvbiIsInRvcEJveCIsImFkZFRhc2siLCJpbnB1dEJveGNyZWF0ZVByb2plY3RzIiwiZGlhbG9nQm94IiwibWVzc2FnZUJveGRpdiIsInByb2plY3ROYW1laW5wdXQiLCJidXR0b25zZGl2IiwiY2FuY2VsQnV0dG9uIiwiZG9uZUJ1dHRvbiIsInNob3dNb2RhbCIsIm5ld1Byb2plY3QiLCJmcm9tRG9tdG9BbGxwcm9qZWN0cyIsImNyZWF0ZUJ1dHRvbnNGcm9tQWxsUHJvamVjdHMiLCJVcGRhdGVOdW1iZXJPZlByb2plY3RzIiwicHJvamVjdEJ1dHRvbnMiLCJwcmV2ZW50RGVmYXVsdCIsImNsb3NlIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJCdXR0b24iLCJzZXRQcm9wZXJ0eSIsImJ1dHRvbiIsImNyZWF0ZVRhc2tEaWFsb2ciLCJkaWFsb2dUYXNrIiwiUmVxdWlyZW1lbnRzRm9ybSIsIlRhc2tEZXNjcmlwdGlvbiIsInJvd3MiLCJQcmlvcml0eURyb3Bkb3duIiwiT3B0aW9uSGlnaCIsIk9wdGlvbk1lZGl1bSIsIk9wdGlvbkxvdyIsInNlbGVjdGVkIiwiYnV0dG9uSG9sZGVyIiwiY2FuY2VsVGFzayIsImtub3dzZWN0aW9uIiwic2V0dGluZ0FsbHRhc2tzaW5Ib21lIiwicHJvamVjdHMiLCJhcnJheU9mcHJvamVjdHMiLCJjbGFzc05hbWUiLCJuZXdUYXNrIiwibW92aW5nVGFza3MiLCJwbGFjaW5nVGFza3MiLCJ1cGRhdGVBbGx0YXNrcyIsImNvbnRlbnRUb2JldXBkYXRlZENoYW5naW5nUHJvamVjdHMiLCJjb250ZW50Qm94ZWxlbWVudE1ha2VyIiwiY2xhc3NUaXRsZSIsInN0YXRpc3RpY3MiLCJtYWtlU3RhdGlzdGljcyIsInN0YXRpc3RpY3NIb2xkZXJib3giLCJjYXJkTmFtZXMiLCJuYW1lc09mU3RhdHMiLCJjYXJkRGV0YWlscyIsImljb25zIiwiaWROYW1lcyIsInN0YXRpY3NPZmNhcmQiLCJzcGVjaWZpY05hbWVmb3JFbnRyeSIsImJhY2tkcm9wcyIsImNhcmRESVYiLCJpbmZvcm1hdGlvbkhvbGRlciIsIkljb25EaXYiLCJ0YXNrY2FyZHMiLCJUYXNrQm94IiwidGFza0RpdiIsImRhdGVEaXYiLCJ0YXNrVGl0bGUiLCJEZXNjcmlwdGlvblRhc2siLCJidXR0b25zTWFuaXB1bGF0aW9uRGl2IiwiUHJpb3JpdHlUYWciLCJlZGl0IiwiY29tcGxldGUiLCJhbGxUYXNrc2NhcmRzIiwibWFrZVRhc2tib3giLCJhbGxwcm9qZWN0QnV0dG9ucyIsIlRhc2tCb3hjbGVhbnVwIiwiVGFza0JveGZvclByb2plY3QiLCJjaGVja2JveCIsImNob3NlblN0eWxlIiwiYWxsVGFza3RpdGxlcyIsImV4cGxhaW5hdGlvblRhc2siXSwic291cmNlUm9vdCI6IiJ9